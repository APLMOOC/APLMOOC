{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"APL MOOC This is an online course on array programming in APL. No prior array programming knowledge is required; however, being familiar with at least one \"normal\" programming language is highly recommended. This course is a work-in-progress. When complete, it is intended to be an official 5 ECTS credit course at the University of Helsinki. Course developed and written by Sergey Ichtchenko (sergey.ichtchenko[at]helsinki.fi). Thank you to Dyalog Ltd. for collaborating on this MOOC. What are you waiting for? Get started!","title":"Home"},{"location":"#apl-mooc","text":"This is an online course on array programming in APL. No prior array programming knowledge is required; however, being familiar with at least one \"normal\" programming language is highly recommended. This course is a work-in-progress. When complete, it is intended to be an official 5 ECTS credit course at the University of Helsinki. Course developed and written by Sergey Ichtchenko (sergey.ichtchenko[at]helsinki.fi). Thank you to Dyalog Ltd. for collaborating on this MOOC. What are you waiting for? Get started!","title":"APL MOOC"},{"location":"credits/","text":"Receiving ECTS Credits After you have completed over 90% of the exercises, use the credits request form to request ECTS credits for the course. < form here >","title":"Receiving ECTS Credits"},{"location":"credits/#receiving-ects-credits","text":"After you have completed over 90% of the exercises, use the credits request form to request ECTS credits for the course. < form here >","title":"Receiving ECTS Credits"},{"location":"login/","text":"Log in Sign in with your mooc.fi credentials to be able to submit write problems to TMC and receive problem points. Log in $=>document.querySelector","title":"Log in"},{"location":"login/#log-in","text":"Sign in with your mooc.fi credentials to be able to submit write problems to TMC and receive problem points. Log in $=>document.querySelector","title":"Log in"},{"location":"course/ch0/part1/","text":"Welcome to the wonderful world of APL programming! APL is quirky, different, and not like the other programming languages. < examples to follow >","title":"0.1 - Quirky and different"},{"location":"course/ch0/part1/#welcome-to-the-wonderful-world-of-apl-programming","text":"APL is quirky, different, and not like the other programming languages. < examples to follow >","title":"Welcome to the wonderful world of APL programming!"},{"location":"course/ch0/part2/","text":"What's the big idea? < explain what APL is all about >","title":"0.2 - What's the big idea?"},{"location":"course/ch0/part2/#whats-the-big-idea","text":"< explain what APL is all about >","title":"What's the big idea?"},{"location":"course/ch0/part3/","text":"Resources < add useful resources and problem sets here >","title":"0.3 - Useful resources"},{"location":"course/ch0/part3/#resources","text":"< add useful resources and problem sets here >","title":"Resources"},{"location":"course/ch0/part4/","text":"About the course < practicalities, credits, read/write exercises, etc >","title":"0.4 - About the course"},{"location":"course/ch0/part4/#about-the-course","text":"< practicalities, credits, read/write exercises, etc >","title":"About the course"},{"location":"course/ch1/part1/","text":"Immediate execution mode Let's get started with some basic APL! For the first few chapters, we will be working with the REPL available at TryAPL . If you've ever tried running python3 ( py for W*ndows users) or the IDLE editor on your computer, this is the same thing. The REPL will wait for you to enter a command, then evaluate and print the result (if your command resulted in a result), after which it will return control back to you. This will repeat for as long as your heart desires. Try it yourself You can run APL code at tryapl.org Try running the commands in this chapter yourself. You can also use the REPL for playing around, testing out ideas, and working on the write exercises at the end of the chapter. The mode you land in by default is called Immediate Execution mode (because it immediately executes whatever you give it). Other modes include Execution mode, Function Editing mode, Character Input mode, Evaluated Input mode, and GUI Input Form mode. We will get back to these modes in future chapters. Surprisingly enough, this style of prompt is how APL code has been written for the longest time! By using the different modes outlined above, alongside APL workspaces and an APL IDE, you can write any programs you like. Thankfully, since we live in the year 2022, some APL developers have realised that it might be smart to finally get with the times and let programmers write their code in text files that are executed by an APL interpreter. This is fairly straightforward to do but requires some configuration, so we will get back to this in a later chapter. For now, the TryAPL interpreter will suffice.","title":"1.1 - Immediate execution mode"},{"location":"course/ch1/part1/#immediate-execution-mode","text":"Let's get started with some basic APL! For the first few chapters, we will be working with the REPL available at TryAPL . If you've ever tried running python3 ( py for W*ndows users) or the IDLE editor on your computer, this is the same thing. The REPL will wait for you to enter a command, then evaluate and print the result (if your command resulted in a result), after which it will return control back to you. This will repeat for as long as your heart desires. Try it yourself You can run APL code at tryapl.org Try running the commands in this chapter yourself. You can also use the REPL for playing around, testing out ideas, and working on the write exercises at the end of the chapter. The mode you land in by default is called Immediate Execution mode (because it immediately executes whatever you give it). Other modes include Execution mode, Function Editing mode, Character Input mode, Evaluated Input mode, and GUI Input Form mode. We will get back to these modes in future chapters. Surprisingly enough, this style of prompt is how APL code has been written for the longest time! By using the different modes outlined above, alongside APL workspaces and an APL IDE, you can write any programs you like. Thankfully, since we live in the year 2022, some APL developers have realised that it might be smart to finally get with the times and let programmers write their code in text files that are executed by an APL interpreter. This is fairly straightforward to do but requires some configuration, so we will get back to this in a later chapter. For now, the TryAPL interpreter will suffice.","title":"Immediate execution mode"},{"location":"course/ch1/part2/","text":"Basic operations and input Okay, so we have TryAPL open. Now what? APL is a programming language, so it would make sense if it could, at least, do some basic arithmetic. Let's try it out! How about addition? 2 + 2 4 Okay, it seems to be able to handle that. Great start! You'll notice that the programmer's input is indented, while the interpreter's output is not. You can think of it as a conversation, where you are on the right and the interpreter is on the left. Keep this in mind. It will be important for later. Time to try subtraction... 8 - 5 3 5 - 8 \u00af3 Okay, so that seems to work as well. But wait, why is the negative sign before the number 3 rendered weirdly? It looks different from the minus sign we typed. As it turns out, there are two signs for negation in APL. One of them is a minus function ( - ), that subtracts two numbers. The other is a negative sign ( \u00af ), which is slightly higher and tells APL that a number is negative. The negative sign is not a function! In the same way that a full stop ( . ) decorates a number ( 3.14159 ) to show that it has a decimal part, the negative sign ( \u00af ) decorates a number ( \u00af1337 ) to show that it's negative. Functions In APL, functions take in arguments and produce results . Most APL symbols are functions . You will get familiar with them in the next chapters. Functions can have arguments to their left and right. If a function has both left and right arguments , it is called dyadic (di = two). If a function has only one argument on the right , it is called monadic (mono = one). If a function doesn't take arguments (quite rare!), it is called niladic (nil = zero). Functions with only one argument on the left do not exist in APL. Results are what a function \"spits out\". You can imagine the result of the function replacing the function after its execution is done, just like in any other programming language. There are also functions that do not return any results. Multiplication should work just as intuitively. 2 * 2 4 2 * 5 32 Wait, what? 2*2 evaluated to 4 , while 2*5 evaluated to 32 ?! This isn't multiplication, it's exponentiation! What's going on here? Warning APL was created by mathematicians in the 1960s. Mathematicians love weird and funny symbols. This was the time before Unicode, the standard way in which we encode characters today, was invented. As such, the creators were free to invent any typewriter symbols they wanted (yes, APL was written on a typewriter), and added a lot of special symbols that look really cool but aren't found on any modern keyboards. There are lots of symbols implemented in Unicode even today just because they were invented by APL'ers before any proper standards were written. You will learn how to type them shortly! In fact, the creators of APL added a special multiplication cross ( \u00d7 ) to do multiplication. Not to be confused with the letter x ! Similarly, division is done with the dedicated mathematical division symbol ( \u00f7 ). Let's try them out: 2 \u00d7 2 4 2 \u00d7 5 10 7 \u00f7 2 3.5 2 \u00f7 7 0.2857142857 123 \u00d7 \u00af456 \u00af56088 Funkar som den ska. Significant figures APL will display results of your calculations to 10 significant figures. Internally, APL calculates all floating-point operations to 16 or 17 significant figures, which is a suitable level of accuracy for most (if not all) applications.","title":"1.2 - Basic operations and input"},{"location":"course/ch1/part2/#basic-operations-and-input","text":"Okay, so we have TryAPL open. Now what? APL is a programming language, so it would make sense if it could, at least, do some basic arithmetic. Let's try it out! How about addition? 2 + 2 4 Okay, it seems to be able to handle that. Great start! You'll notice that the programmer's input is indented, while the interpreter's output is not. You can think of it as a conversation, where you are on the right and the interpreter is on the left. Keep this in mind. It will be important for later. Time to try subtraction... 8 - 5 3 5 - 8 \u00af3 Okay, so that seems to work as well. But wait, why is the negative sign before the number 3 rendered weirdly? It looks different from the minus sign we typed. As it turns out, there are two signs for negation in APL. One of them is a minus function ( - ), that subtracts two numbers. The other is a negative sign ( \u00af ), which is slightly higher and tells APL that a number is negative. The negative sign is not a function! In the same way that a full stop ( . ) decorates a number ( 3.14159 ) to show that it has a decimal part, the negative sign ( \u00af ) decorates a number ( \u00af1337 ) to show that it's negative. Functions In APL, functions take in arguments and produce results . Most APL symbols are functions . You will get familiar with them in the next chapters. Functions can have arguments to their left and right. If a function has both left and right arguments , it is called dyadic (di = two). If a function has only one argument on the right , it is called monadic (mono = one). If a function doesn't take arguments (quite rare!), it is called niladic (nil = zero). Functions with only one argument on the left do not exist in APL. Results are what a function \"spits out\". You can imagine the result of the function replacing the function after its execution is done, just like in any other programming language. There are also functions that do not return any results. Multiplication should work just as intuitively. 2 * 2 4 2 * 5 32 Wait, what? 2*2 evaluated to 4 , while 2*5 evaluated to 32 ?! This isn't multiplication, it's exponentiation! What's going on here? Warning APL was created by mathematicians in the 1960s. Mathematicians love weird and funny symbols. This was the time before Unicode, the standard way in which we encode characters today, was invented. As such, the creators were free to invent any typewriter symbols they wanted (yes, APL was written on a typewriter), and added a lot of special symbols that look really cool but aren't found on any modern keyboards. There are lots of symbols implemented in Unicode even today just because they were invented by APL'ers before any proper standards were written. You will learn how to type them shortly! In fact, the creators of APL added a special multiplication cross ( \u00d7 ) to do multiplication. Not to be confused with the letter x ! Similarly, division is done with the dedicated mathematical division symbol ( \u00f7 ). Let's try them out: 2 \u00d7 2 4 2 \u00d7 5 10 7 \u00f7 2 3.5 2 \u00f7 7 0.2857142857 123 \u00d7 \u00af456 \u00af56088 Funkar som den ska. Significant figures APL will display results of your calculations to 10 significant figures. Internally, APL calculates all floating-point operations to 16 or 17 significant figures, which is a suitable level of accuracy for most (if not all) applications.","title":"Basic operations and input"},{"location":"course/ch1/part3/","text":"How do I type these characters?!?!?!? Step 1: go to Amazon and buy a special APL typewriter keyboard... Just kidding (thankfully). In the modern day and age, there are way better options: Simplest: Press the buttons in the IDE At the top of the TryAPL page (and this course page) there are symbols you can click. You can also hover over them to get a quick overview of what each symbol does in APL. This is, however, quite slow when you need to write APL code fast . Find some alternatives below. Quickest: Use keyboard shortcuts On TryAPL (and this page), you can use prefixes to insert various special symbols. You can use any of the following keys as prefixes: ` \u00a7 \u00b0 \u00b2 \u00b5 \u00ba \u00bd \u00f9 On Finnish keyboards, the \u00a7 key (located to the left of 1 ) is the easiest to use. On US and UK keyboards, the ` key is preferred. Whichever key you pick we will denote as PREFIX from now on. To use prefixes, hit whatever prefix key you are using, followed by the key you want to type. For example, the multiplication symbol \u00d7 is inserted by typing PREFIX - and division \u00f7 is inserted with PREFIX = . While these might seem unintuitive at first, you'll get used to them fairly quickly. You can see the completion shortcut if you hover over the symbol in the top language bar. For example, hovering over \u00d7 shows that you can type it by using Prefix: <prefix> - , just like we did above. Quickest (alternative): Tab completion Sometimes, if you have a Finnish keyboard, you will be unable to type certain prefix shortcuts that were designed for US keyboards. Thankfully, there is an alternative: tab completions. You can find the keys needed for tab completion in the same tooltip that shows you what keys to use for the prefix shortcuts. For example, hovering over the arrow symbol ( \u2190 ) shows the follwing information: < - <tab> . Just follow the instructions and hit the keys < - Tab . You'll notice that the alternative, PREFIX [ is impossible to type on a Finnish keyboard, as it doesn't have a separate [ key (and using AltGr breaks the APL shortcut). Note! Tab completion is only required for non-US users due to a bug feature in TryAPL, which is that it's designed with only US keyboards in mind. When we install the Dyalog IDE in a future chapter, this will no longer be a concern, as that supports Finnish (and various other non-US) keyboards natively. Excessive: Install the APL Keyboard You can install a dedicated keyboard for APL glyphs. See further instructions on the Dyalog website . This method provides no extra benefits unless you want to type APL outside of TryAPL, this webpage, or the IDE. We will also see in a later chapter how to install a plugin for Visual Studio Code that allows you to type APL characters.","title":"1.3 - How do I type these characters?!?!?!?"},{"location":"course/ch1/part3/#how-do-i-type-these-characters","text":"Step 1: go to Amazon and buy a special APL typewriter keyboard... Just kidding (thankfully). In the modern day and age, there are way better options:","title":"How do I type these characters?!?!?!?"},{"location":"course/ch1/part3/#simplest-press-the-buttons-in-the-ide","text":"At the top of the TryAPL page (and this course page) there are symbols you can click. You can also hover over them to get a quick overview of what each symbol does in APL. This is, however, quite slow when you need to write APL code fast . Find some alternatives below.","title":"Simplest: Press the buttons in the IDE"},{"location":"course/ch1/part3/#quickest-use-keyboard-shortcuts","text":"On TryAPL (and this page), you can use prefixes to insert various special symbols. You can use any of the following keys as prefixes: ` \u00a7 \u00b0 \u00b2 \u00b5 \u00ba \u00bd \u00f9 On Finnish keyboards, the \u00a7 key (located to the left of 1 ) is the easiest to use. On US and UK keyboards, the ` key is preferred. Whichever key you pick we will denote as PREFIX from now on. To use prefixes, hit whatever prefix key you are using, followed by the key you want to type. For example, the multiplication symbol \u00d7 is inserted by typing PREFIX - and division \u00f7 is inserted with PREFIX = . While these might seem unintuitive at first, you'll get used to them fairly quickly. You can see the completion shortcut if you hover over the symbol in the top language bar. For example, hovering over \u00d7 shows that you can type it by using Prefix: <prefix> - , just like we did above.","title":"Quickest: Use keyboard shortcuts"},{"location":"course/ch1/part3/#quickest-alternative-tab-completion","text":"Sometimes, if you have a Finnish keyboard, you will be unable to type certain prefix shortcuts that were designed for US keyboards. Thankfully, there is an alternative: tab completions. You can find the keys needed for tab completion in the same tooltip that shows you what keys to use for the prefix shortcuts. For example, hovering over the arrow symbol ( \u2190 ) shows the follwing information: < - <tab> . Just follow the instructions and hit the keys < - Tab . You'll notice that the alternative, PREFIX [ is impossible to type on a Finnish keyboard, as it doesn't have a separate [ key (and using AltGr breaks the APL shortcut). Note! Tab completion is only required for non-US users due to a bug feature in TryAPL, which is that it's designed with only US keyboards in mind. When we install the Dyalog IDE in a future chapter, this will no longer be a concern, as that supports Finnish (and various other non-US) keyboards natively.","title":"Quickest (alternative): Tab completion"},{"location":"course/ch1/part3/#excessive-install-the-apl-keyboard","text":"You can install a dedicated keyboard for APL glyphs. See further instructions on the Dyalog website . This method provides no extra benefits unless you want to type APL outside of TryAPL, this webpage, or the IDE. We will also see in a later chapter how to install a plugin for Visual Studio Code that allows you to type APL characters.","title":"Excessive: Install the APL Keyboard"},{"location":"course/ch1/part4/","text":"Order of execution Okay, we've tried adding and multiplying two numbers together. What if we try adding and multiplying three numbers at the same time? 2 \u00d7 2 4 2 \u00d7 2 + 1 6 Oops. What happened here? Instead of doing the arithmetic operations in the normal order, 2 times 2 and add 1 (PEMDAS, remember?) APL seems to have done them in the reverse order, 2 plus 1 and the whole thing times 2. Let's see why that is. The creators of APL were faced with a dillemma. Every new symbol they added to the language was to be considered a function. In other languages, like Python, functions take in arguments inside parentheses. However, in APL, functions only take in arguments from the left and right . Because of this, all functions look and act like the multiplication and addition functions, and it isn't clear in which order they should be executed (e.g. consider the new symbol 1\u230a2+2 : would you perform the addition first or whatever this new \u230a function does first?) So, for every new function they added, the creators would have to decide where to put it in the hierarchy. And this doesn't even take into account functions that programmers can create themselves! \"Screw it,\" the creators decided, and made one, solid, unambiguous, easy-to-remember rule. Order of execution In APL, all operations are executed right-to-left . When APL runs a line of code, it first looks at the rightmost function symbol and executes it with the arguments to its left and right. It then looks at the function symbol to the left of the one just processed, and executes it, treating the result it just got as a right argument. An equivalent formulation of this would be Order of execution In APL, every function takes in the whole expression on its right as a right argument. Can you see why these two formulations are equivalent? About spaces APL ignores extra spaces when processing statements. For example, all of the following statements will produce the same result: 2 \u00d7 2 + 1 6 2 \u00d7 2 + 1 6 2 \u00d7 2 + 1 6 2 \u00d7 2 + 1 6 Altering the order of execution You can use parentheses, ( and ) , to alter the order of execution in APL. This is the same as in mathematics or any other programming language: statements within parentheses are executed before anything else. Let's look at our previous example once again: 2 \u00d7 2 + 1 6 2 \u00d7 ( 2 + 1 ) \u235d (1)! 6 ( 2 \u00d7 2 ) + 1 \u235d (2)! 5 Same result as before; the parentheses changed nothing Finally, the result we wanted! As a beginner APL programmer, it's easy to want to put parentheses everywhere when your code doesn't work. Resist the urge. Use parentheses for readability, and when needed to change the order of operations. However, your code generally ends up cleaner if you can write it with as few parentheses as possible. In the above case, for example, we could have simply restructured the expression to be the following: 1 + 2 \u00d7 2 5 No parentheses, and we get the correct answer! In general, when you have parentheses on the right, they are redundant. This is easier to understand in context. Consider the following expression: ( 1 + ( 2 \u00d7 ( 3 \u00f7 ( 4 - 5 )))) \u00af5 In this case, all of the parentheses are unnecessary, since it is telling the APL interpreter to execute everything from right to left, which it would do anyway. So, in this case, you could achieve the same result with the shorter and more readable code: 1 + 2 \u00d7 3 \u00f7 4 - 5 \u00af5 Pretty, isn't it? Before we conclude, here are some tips on how to reduce parentheses in your code to avoid a parenthesis jungle: Reducing parentheses No APL expression needs to end with a closing parenthesis. It's redundant. For example, the expression (2\u00d73)+(4\u00d75) can be rewritten as (2\u00d73)+4\u00d75 You never need two consecutive closing parentheses. It's redundant. For example, the expression (2\u00d7(3+4))\u00f75 is equivalent to (2\u00d73+4)\u00f75 If you can easily rewrite the expression to avoid parentheses, do so. For example, the expression ((2\u00f73)+4)\u00d75 can be reversed to give 5\u00d74+2\u00f73 Do not shovel in extra parentheses in a panicked, desperate attempt to fix your code. Do shovel in parentheses if it genuinely helps the readability of your code. This isn't to say that you should avoid using parentheses. They often help your thought process and improve understanding of the code. They do not slow down execution , so feel free to use as many as you'd like (and potentially reduce their amount afterwards)! This funny order of execution and the rules for placing parentheses might take getting used to. Don't worry, as you progress further, you will forget how else computers can execute code! Stopping execution One last handy symbol: \u235d . Can you figure out what it does from this example? \u235d asdfada (1) \u235d adsfljsakfdjlkdsajflkdsajf \u235d =\u2260\u2228\u00af\u2265>\u2260\u2260=\u2264<\u00af\u00e4\u00f6'j\u2206\u2283\u2282\u2308\u220a\u2191j|\u22a4\u2282\u236aAQWED\u2286A\u2370\u22645\u2265>\u22288\u2227\u00b4\u00a7\u00c4&\u2364\u2368\u233f&\u00a4\u2286\u2261\u234e^\u00c5 2 + 2 \u235d This is addition 4 123 \u00d7 456 \u235d yay 56088 Hint: ong it kinda looks like \u0d9e That's right, it's a comment. It makes the APL interpreter ignore whatever symbols come after it on the same line. You can use it to temporarily remove code from your programs or to add extra information to whatever code you have written. The official name for this symbol is \"lamp\". Why? Because comments illuminate your code.","title":"1.4 - Order of execution"},{"location":"course/ch1/part4/#order-of-execution","text":"Okay, we've tried adding and multiplying two numbers together. What if we try adding and multiplying three numbers at the same time? 2 \u00d7 2 4 2 \u00d7 2 + 1 6 Oops. What happened here? Instead of doing the arithmetic operations in the normal order, 2 times 2 and add 1 (PEMDAS, remember?) APL seems to have done them in the reverse order, 2 plus 1 and the whole thing times 2. Let's see why that is. The creators of APL were faced with a dillemma. Every new symbol they added to the language was to be considered a function. In other languages, like Python, functions take in arguments inside parentheses. However, in APL, functions only take in arguments from the left and right . Because of this, all functions look and act like the multiplication and addition functions, and it isn't clear in which order they should be executed (e.g. consider the new symbol 1\u230a2+2 : would you perform the addition first or whatever this new \u230a function does first?) So, for every new function they added, the creators would have to decide where to put it in the hierarchy. And this doesn't even take into account functions that programmers can create themselves! \"Screw it,\" the creators decided, and made one, solid, unambiguous, easy-to-remember rule. Order of execution In APL, all operations are executed right-to-left . When APL runs a line of code, it first looks at the rightmost function symbol and executes it with the arguments to its left and right. It then looks at the function symbol to the left of the one just processed, and executes it, treating the result it just got as a right argument. An equivalent formulation of this would be Order of execution In APL, every function takes in the whole expression on its right as a right argument. Can you see why these two formulations are equivalent? About spaces APL ignores extra spaces when processing statements. For example, all of the following statements will produce the same result: 2 \u00d7 2 + 1 6 2 \u00d7 2 + 1 6 2 \u00d7 2 + 1 6 2 \u00d7 2 + 1 6","title":"Order of execution"},{"location":"course/ch1/part4/#altering-the-order-of-execution","text":"You can use parentheses, ( and ) , to alter the order of execution in APL. This is the same as in mathematics or any other programming language: statements within parentheses are executed before anything else. Let's look at our previous example once again: 2 \u00d7 2 + 1 6 2 \u00d7 ( 2 + 1 ) \u235d (1)! 6 ( 2 \u00d7 2 ) + 1 \u235d (2)! 5 Same result as before; the parentheses changed nothing Finally, the result we wanted! As a beginner APL programmer, it's easy to want to put parentheses everywhere when your code doesn't work. Resist the urge. Use parentheses for readability, and when needed to change the order of operations. However, your code generally ends up cleaner if you can write it with as few parentheses as possible. In the above case, for example, we could have simply restructured the expression to be the following: 1 + 2 \u00d7 2 5 No parentheses, and we get the correct answer! In general, when you have parentheses on the right, they are redundant. This is easier to understand in context. Consider the following expression: ( 1 + ( 2 \u00d7 ( 3 \u00f7 ( 4 - 5 )))) \u00af5 In this case, all of the parentheses are unnecessary, since it is telling the APL interpreter to execute everything from right to left, which it would do anyway. So, in this case, you could achieve the same result with the shorter and more readable code: 1 + 2 \u00d7 3 \u00f7 4 - 5 \u00af5 Pretty, isn't it? Before we conclude, here are some tips on how to reduce parentheses in your code to avoid a parenthesis jungle: Reducing parentheses No APL expression needs to end with a closing parenthesis. It's redundant. For example, the expression (2\u00d73)+(4\u00d75) can be rewritten as (2\u00d73)+4\u00d75 You never need two consecutive closing parentheses. It's redundant. For example, the expression (2\u00d7(3+4))\u00f75 is equivalent to (2\u00d73+4)\u00f75 If you can easily rewrite the expression to avoid parentheses, do so. For example, the expression ((2\u00f73)+4)\u00d75 can be reversed to give 5\u00d74+2\u00f73 Do not shovel in extra parentheses in a panicked, desperate attempt to fix your code. Do shovel in parentheses if it genuinely helps the readability of your code. This isn't to say that you should avoid using parentheses. They often help your thought process and improve understanding of the code. They do not slow down execution , so feel free to use as many as you'd like (and potentially reduce their amount afterwards)! This funny order of execution and the rules for placing parentheses might take getting used to. Don't worry, as you progress further, you will forget how else computers can execute code!","title":"Altering the order of execution"},{"location":"course/ch1/part4/#stopping-execution","text":"One last handy symbol: \u235d . Can you figure out what it does from this example? \u235d asdfada (1) \u235d adsfljsakfdjlkdsajflkdsajf \u235d =\u2260\u2228\u00af\u2265>\u2260\u2260=\u2264<\u00af\u00e4\u00f6'j\u2206\u2283\u2282\u2308\u220a\u2191j|\u22a4\u2282\u236aAQWED\u2286A\u2370\u22645\u2265>\u22288\u2227\u00b4\u00a7\u00c4&\u2364\u2368\u233f&\u00a4\u2286\u2261\u234e^\u00c5 2 + 2 \u235d This is addition 4 123 \u00d7 456 \u235d yay 56088 Hint: ong it kinda looks like \u0d9e That's right, it's a comment. It makes the APL interpreter ignore whatever symbols come after it on the same line. You can use it to temporarily remove code from your programs or to add extra information to whatever code you have written. The official name for this symbol is \"lamp\". Why? Because comments illuminate your code.","title":"Stopping execution"},{"location":"course/ch1/part5/","text":"When things go wrong Let's do some more arithmetic: 5 \u00f7 5 1 5 \u00f7 4 1.25 5 \u00f7 3 1.666666667 5 \u00f7 2 2.5 5 \u00f7 1 5 5 \u00f7 0 DOMAIN ERROR : Divide by zero 5 \u00f7 0 \u2227 Like most mathematicians, APL is deathly afraid of dividing by zero. As such, APL doesn't allow zero as a right argument to the division function. In other words, zero is outside the domain of the right argument of \u00f7 . When something like this happens, APL displays that there has been an error of a certain type (in this case, a DOMAIN ERROR), as well as a short description and an arrow pointing to the function that produced the error. So much better than errors in other languages! (looking at Java and Python right now) Here are some examples of error types you will come across in the future. DOMAIN ERROR LENGTH ERROR VALUE ERROR RANK ERROR SYNTAX ERROR INDEX ERROR WS FULL A common fight-or-flight response when seeing an error is ignoring it, smashing your computer screen, and trying to re-run the same line of code with a random modification you don't understand. Don't! Even if you think you might know how to solve the problem immediately, try looking at the error message and figuring out exactly what it's complaining about, and where the error happens. For example, if you see a LENGTH ERROR , APL is trying to tell you that your arguments are of the wrong length. See if you can pinpoint the exact location the error is happening at! If, on the other hand, you see a SYNTAX ERROR , it most likely means that you've either made a typo somewhere or constructed an incomplete APL expression like 3+ (the + function is missing its right argument). When faced with an error Stop, take a breath, and analyse the situation.","title":"1.5 - When things go wrong"},{"location":"course/ch1/part5/#when-things-go-wrong","text":"Let's do some more arithmetic: 5 \u00f7 5 1 5 \u00f7 4 1.25 5 \u00f7 3 1.666666667 5 \u00f7 2 2.5 5 \u00f7 1 5 5 \u00f7 0 DOMAIN ERROR : Divide by zero 5 \u00f7 0 \u2227 Like most mathematicians, APL is deathly afraid of dividing by zero. As such, APL doesn't allow zero as a right argument to the division function. In other words, zero is outside the domain of the right argument of \u00f7 . When something like this happens, APL displays that there has been an error of a certain type (in this case, a DOMAIN ERROR), as well as a short description and an arrow pointing to the function that produced the error. So much better than errors in other languages! (looking at Java and Python right now) Here are some examples of error types you will come across in the future. DOMAIN ERROR LENGTH ERROR VALUE ERROR RANK ERROR SYNTAX ERROR INDEX ERROR WS FULL A common fight-or-flight response when seeing an error is ignoring it, smashing your computer screen, and trying to re-run the same line of code with a random modification you don't understand. Don't! Even if you think you might know how to solve the problem immediately, try looking at the error message and figuring out exactly what it's complaining about, and where the error happens. For example, if you see a LENGTH ERROR , APL is trying to tell you that your arguments are of the wrong length. See if you can pinpoint the exact location the error is happening at! If, on the other hand, you see a SYNTAX ERROR , it most likely means that you've either made a typo somewhere or constructed an incomplete APL expression like 3+ (the + function is missing its right argument). When faced with an error Stop, take a breath, and analyse the situation.","title":"When things go wrong"},{"location":"course/ch1/read/","text":"Read exercises For each of the following exercises, try to figure out what the input will produce in the tryAPL terminal. Check your answers by opening the \"Output\" tab. If you think an error will occur, try to predict which error it will be and where the arrow will point to. The exercises are not checked or graded: use them to check your knowledge! Number manipulation Read problem 1 Input Output 2 + 3 5 Read problem 2 Input Output 2 - 3 \u00af1 The negative sign ( \u00af ) is different from the minus function ( - ) Read problem 3 Input Output 3 * 3 27 * is used for exponentiation, not multiplication Read problem 4 Input Output 3 \u00d7 3 9 Read problem 5 Input Output 3 \u00f7 2 1.5 Read problem 6 Input Output 2\u00af7 SYNTAX ERROR 2\u00af 7 \u2227 The negative sign ( \u00af ) is not a function. Use the - function instead. Read problem 7 Input Output 1 + 2 \u00f7 SYNTAX ERROR 1 + 2 \u00f7 \u2227 The divide function is missing its right argument. Read problem 8 Input Output 100 \u00f7 0 DOMAIN ERROR : Divide by zero 100 \u00f7 0 \u2227 Can't divide by zero! Read problem 9 Input Output 0 \u00f7 100 0 Read problem 10 Input Output 0 \u00f7 0 1 Ah, the age-old dilemma! Were you expecting a DOMAIN ERROR ? The APL developers decided to add this feature since it is useful in some contexts. There is the option to change this if it really upsets you. Read problem 11 Input Output \u00af2 \u00d7 \u00af3 6 Order of execution Read problem 12 Input Output 4 \u00d7 2 + 3 20 Right-to-left. Read problem 13 Input Output 5 \u00d7 2 + 3 \u00d7 2 40 Still right-to-left, regardless of spaces. Read problem 14 Input Output 24 \u00f7 8 \u00f7 2 6 Read problem 15 Input Output 3 \u00f7 12 + 4 \u00d7 \u00af3 DOMAIN ERROR : Divide by zero 3 \u00f7 12 + 4 \u00d7 \u00af3 \u2227 The 12 + \u00af12 results in zero, which is outside of the domain of the divide function's right argument. Read problem 16 Input Output ((( 2 + 3 ))) 5 Extra parentheses never hurt anyone. Read problem 17 Input Output ((( 5 )) + (((( 3 ))) \u00d7 ( 2 ))) 11 Very readable! Is this LISP ? Read problem 18 Input Output 4 \u00d7 24 \u00f7 3 32 Read problem 19 Input Output 24 \u00f7 4 \u00d7 3 2 Read problem 20 Input Output 6 \u00d7 3 - SYNTAX ERROR 6 \u00d7 3 - \u2227 Typo.","title":"1.R - Read exercises"},{"location":"course/ch1/read/#read-exercises","text":"For each of the following exercises, try to figure out what the input will produce in the tryAPL terminal. Check your answers by opening the \"Output\" tab. If you think an error will occur, try to predict which error it will be and where the arrow will point to. The exercises are not checked or graded: use them to check your knowledge!","title":"Read exercises"},{"location":"course/ch1/read/#number-manipulation","text":"Read problem 1 Input Output 2 + 3 5 Read problem 2 Input Output 2 - 3 \u00af1 The negative sign ( \u00af ) is different from the minus function ( - ) Read problem 3 Input Output 3 * 3 27 * is used for exponentiation, not multiplication Read problem 4 Input Output 3 \u00d7 3 9 Read problem 5 Input Output 3 \u00f7 2 1.5 Read problem 6 Input Output 2\u00af7 SYNTAX ERROR 2\u00af 7 \u2227 The negative sign ( \u00af ) is not a function. Use the - function instead. Read problem 7 Input Output 1 + 2 \u00f7 SYNTAX ERROR 1 + 2 \u00f7 \u2227 The divide function is missing its right argument. Read problem 8 Input Output 100 \u00f7 0 DOMAIN ERROR : Divide by zero 100 \u00f7 0 \u2227 Can't divide by zero! Read problem 9 Input Output 0 \u00f7 100 0 Read problem 10 Input Output 0 \u00f7 0 1 Ah, the age-old dilemma! Were you expecting a DOMAIN ERROR ? The APL developers decided to add this feature since it is useful in some contexts. There is the option to change this if it really upsets you. Read problem 11 Input Output \u00af2 \u00d7 \u00af3 6","title":"Number manipulation"},{"location":"course/ch1/read/#order-of-execution","text":"Read problem 12 Input Output 4 \u00d7 2 + 3 20 Right-to-left. Read problem 13 Input Output 5 \u00d7 2 + 3 \u00d7 2 40 Still right-to-left, regardless of spaces. Read problem 14 Input Output 24 \u00f7 8 \u00f7 2 6 Read problem 15 Input Output 3 \u00f7 12 + 4 \u00d7 \u00af3 DOMAIN ERROR : Divide by zero 3 \u00f7 12 + 4 \u00d7 \u00af3 \u2227 The 12 + \u00af12 results in zero, which is outside of the domain of the divide function's right argument. Read problem 16 Input Output ((( 2 + 3 ))) 5 Extra parentheses never hurt anyone. Read problem 17 Input Output ((( 5 )) + (((( 3 ))) \u00d7 ( 2 ))) 11 Very readable! Is this LISP ? Read problem 18 Input Output 4 \u00d7 24 \u00f7 3 32 Read problem 19 Input Output 24 \u00f7 4 \u00d7 3 2 Read problem 20 Input Output 6 \u00d7 3 - SYNTAX ERROR 6 \u00d7 3 - \u2227 Typo.","title":"Order of execution"},{"location":"course/ch1/summary/","text":"Function index Here is a table of symbols we have used and how to type them in TryAPL. It might be useful to review this page as you are doing the read and write exercises in the next sections. Symbol Name Key combination + Plus + - Minus - \u00d7 Times PREFIX - \u00f7 Divide PREFIX = * Power * \u00af Negative sign PREFIX 2 \u235d Lamp PREFIX ,","title":"1.S - Summary"},{"location":"course/ch1/summary/#function-index","text":"Here is a table of symbols we have used and how to type them in TryAPL. It might be useful to review this page as you are doing the read and write exercises in the next sections. Symbol Name Key combination + Plus + - Minus - \u00d7 Times PREFIX - \u00f7 Divide PREFIX = * Power * \u00af Negative sign PREFIX 2 \u235d Lamp PREFIX ,","title":"Function index"},{"location":"course/ch1/write/","text":"Write exercises Submit APL code for the following exercises. Your submissions are graded using TMC. Make sure to log in to be able to submit your work! You can submit as many solutions as you like. If you submit a correct solution at least once, you will receive points on the TMC server and be able to see the model solution. If the write problem is red, it is unsolved. If it it green, you have solved it and received points for it on the server. Write problem 1 Calculate the area of a room which is 13.7 long and 206.55 wide. \u2395\u2190 Submit Write problem 2 A grandpa decreases in height by 2.5412cm every year. If he is 150.0000cm tall now, how tall will he be in 15 years? \u2395\u2190 Submit Write problem 3 If 3 liters of embalming fluid cost you 300.12\u20ac, what is the price per liter? \u2395\u2190 Submit Write problem 4 Your current bank balance is \u00af420\u20ac. You are in big trouble. What will be your balance if you take just another quick loan of 100\u20ac? \u2395\u2190 Submit Write problem 5 Cause a SYNTAX ERROR using as few symbols as possible. \u2395\u2190 Submit Write problem 6 Cause a DOMAIN ERROR . \u2395\u2190 Submit Write problem 7 The following expression returns the number 13. ((( 5 * 2 ) + ( 12 * 2 )) * .5 ) Rewrite the expression with as few parentheses as possible to still return the number 13. \u2395\u2190 Submit Write problem 8 Compute the mean of the numbers 1, 57, 237, \u00af5, 42. \u2395\u2190 Submit Write problem 9 Suppose your tax rate is 7.5%, up to a maximum of 1000\u20ac in taxes. If you earned 25000\u20ac this year, and your tax return (to be deducted from this year's taxes) is 175\u20ac, how much money will you owe the government this year? \u2395\u2190 Submit Write problem 10 Subtract 7 from 16, divide the result by 3, add 8, multiply by 2.5, and square the result. Use as few parentheses as possible. \u2395\u2190 Submit Write problem 11 Write a nonempty line of code that does nothing (doesn't display anything on the screen). \u2395\u2190 Submit Write problem 12 Rewrite the following line of code to use as few parentheses as possible (((( 10 + 3.5 ) \u00d7 ( 6 + 5.555 )) - ((( 2 + 7 ) \u00d7 \u00af11 ) \u00d7 8.5 )) \u00f7 \u00af20 ) \u235d((()())))()()((()()))()()()()))())))()((( \u2395\u2190 Submit","title":"1.W - Write exercises"},{"location":"course/ch1/write/#write-exercises","text":"Submit APL code for the following exercises. Your submissions are graded using TMC. Make sure to log in to be able to submit your work! You can submit as many solutions as you like. If you submit a correct solution at least once, you will receive points on the TMC server and be able to see the model solution. If the write problem is red, it is unsolved. If it it green, you have solved it and received points for it on the server. Write problem 1 Calculate the area of a room which is 13.7 long and 206.55 wide. \u2395\u2190 Submit Write problem 2 A grandpa decreases in height by 2.5412cm every year. If he is 150.0000cm tall now, how tall will he be in 15 years? \u2395\u2190 Submit Write problem 3 If 3 liters of embalming fluid cost you 300.12\u20ac, what is the price per liter? \u2395\u2190 Submit Write problem 4 Your current bank balance is \u00af420\u20ac. You are in big trouble. What will be your balance if you take just another quick loan of 100\u20ac? \u2395\u2190 Submit Write problem 5 Cause a SYNTAX ERROR using as few symbols as possible. \u2395\u2190 Submit Write problem 6 Cause a DOMAIN ERROR . \u2395\u2190 Submit Write problem 7 The following expression returns the number 13. ((( 5 * 2 ) + ( 12 * 2 )) * .5 ) Rewrite the expression with as few parentheses as possible to still return the number 13. \u2395\u2190 Submit Write problem 8 Compute the mean of the numbers 1, 57, 237, \u00af5, 42. \u2395\u2190 Submit Write problem 9 Suppose your tax rate is 7.5%, up to a maximum of 1000\u20ac in taxes. If you earned 25000\u20ac this year, and your tax return (to be deducted from this year's taxes) is 175\u20ac, how much money will you owe the government this year? \u2395\u2190 Submit Write problem 10 Subtract 7 from 16, divide the result by 3, add 8, multiply by 2.5, and square the result. Use as few parentheses as possible. \u2395\u2190 Submit Write problem 11 Write a nonempty line of code that does nothing (doesn't display anything on the screen). \u2395\u2190 Submit Write problem 12 Rewrite the following line of code to use as few parentheses as possible (((( 10 + 3.5 ) \u00d7 ( 6 + 5.555 )) - ((( 2 + 7 ) \u00d7 \u00af11 ) \u00d7 8.5 )) \u00f7 \u00af20 ) \u235d((()())))()()((()()))()()()()))())))()((( \u2395\u2190 Submit","title":"Write exercises"}]}