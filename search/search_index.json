{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"APL MOOC This is an online course on array programming in APL. No prior array programming knowledge is required; however, being familiar with at least one other programming language is highly recommended. This course is a work-in-progress. When complete, it is intended to be an official 5 ECTS credit course at the University of Helsinki. Course developed and written by Sergey Ichtchenko (sergey.ichtchenko[at]helsinki.fi), Dani Adham (dani.adham[at]helsinki.fi), and Hex. Thank you to Dyalog Ltd. for collaborating on this MOOC. What are you waiting for? Get started!","title":"Home"},{"location":"#apl-mooc","text":"This is an online course on array programming in APL. No prior array programming knowledge is required; however, being familiar with at least one other programming language is highly recommended. This course is a work-in-progress. When complete, it is intended to be an official 5 ECTS credit course at the University of Helsinki. Course developed and written by Sergey Ichtchenko (sergey.ichtchenko[at]helsinki.fi), Dani Adham (dani.adham[at]helsinki.fi), and Hex. Thank you to Dyalog Ltd. for collaborating on this MOOC. What are you waiting for? Get started!","title":"APL MOOC"},{"location":"credits/","text":"Receiving ECTS Credits After you have completed at least 60% of the graded exercises, you can use the credits request form to request ECTS credits for the course. Note This form is not currently available, as the course has not been registered as a University of Helsinki MOOC yet.","title":"Receiving ECTS Credits"},{"location":"credits/#receiving-ects-credits","text":"After you have completed at least 60% of the graded exercises, you can use the credits request form to request ECTS credits for the course. Note This form is not currently available, as the course has not been registered as a University of Helsinki MOOC yet.","title":"Receiving ECTS Credits"},{"location":"login/","text":"Log in Sign in with your mooc.fi credentials to be able to submit write problems to TMC and receive problem points. Log in $=>document.querySelector","title":"Log in"},{"location":"login/#log-in","text":"Sign in with your mooc.fi credentials to be able to submit write problems to TMC and receive problem points. Log in $=>document.querySelector","title":"Log in"},{"location":"course/ch0/part1/","text":"Welcome to the wonderful world of APL programming! APL is quirky, different, and not like the other programming languages. One December, I was doing the Advent of Code (AoC) challenges. These are fun, small programming projects that are given to you in the form of a Christmas advent calendar. There are 2 challenges per day, for a grand total of 50 throughout December. Throughout the month, text like this was posted on forums: east \u2190 \u22a2 { ( \u237a + \u00af1 \u233d \u2375 ) - \u2375 } 0 \u2218 <\u2227 0 = 1 \u2218 \u233d \u235d (1)! Example taken from https://github.com/pitr/aoc/blob/main/2021/25.apl I was very confused. These were meant to be solutions to the AoC problems. However, I couldn't see how in the world these could represent any sort of algorithm, much less a solution. Were these... Encrypted solutions? Solutions encoded in some weird format? Trolls meant to confuse me? My computer bugging out? Turns out, it was none of these. After a bit more research, I found out that it was something called APL . APL APL stands for... A P rogramming L anguage. Great naming, right? Out of curiosity, I tried finding APL solutions to the AoC challenges after Christmas passed. At one point, I found a solution that spanned just 50 lines. As a note, a Python solution for one challenge (towards the end of the month) is usually about 150-200 lines long. In its 50 lines, the APL solution apparently solved all the problems. That was cool. APL looks different, feels different, and it challenges your normal way of thinking about programming. I hope that this course will expand your mind and let you approach programming from a whole new perspective.","title":"0.1 - Quirky and different"},{"location":"course/ch0/part1/#welcome-to-the-wonderful-world-of-apl-programming","text":"APL is quirky, different, and not like the other programming languages. One December, I was doing the Advent of Code (AoC) challenges. These are fun, small programming projects that are given to you in the form of a Christmas advent calendar. There are 2 challenges per day, for a grand total of 50 throughout December. Throughout the month, text like this was posted on forums: east \u2190 \u22a2 { ( \u237a + \u00af1 \u233d \u2375 ) - \u2375 } 0 \u2218 <\u2227 0 = 1 \u2218 \u233d \u235d (1)! Example taken from https://github.com/pitr/aoc/blob/main/2021/25.apl I was very confused. These were meant to be solutions to the AoC problems. However, I couldn't see how in the world these could represent any sort of algorithm, much less a solution. Were these... Encrypted solutions? Solutions encoded in some weird format? Trolls meant to confuse me? My computer bugging out? Turns out, it was none of these. After a bit more research, I found out that it was something called APL . APL APL stands for... A P rogramming L anguage. Great naming, right? Out of curiosity, I tried finding APL solutions to the AoC challenges after Christmas passed. At one point, I found a solution that spanned just 50 lines. As a note, a Python solution for one challenge (towards the end of the month) is usually about 150-200 lines long. In its 50 lines, the APL solution apparently solved all the problems. That was cool. APL looks different, feels different, and it challenges your normal way of thinking about programming. I hope that this course will expand your mind and let you approach programming from a whole new perspective.","title":"Welcome to the wonderful world of APL programming!"},{"location":"course/ch0/part2/","text":"What's the big idea? APL... ...is an array language. Another (unofficial) name for APL is \"Array Programming Language\". All operations in the language work on lists, matrices, and higher dimensional arrays. Many tasks that require data processing and operations on large amounts of structured data work really well in APL. You might have heard that programming languages can be classified into a few different types: Imperative languages (Python, Java, C, R, etc.) Functional languages (Haskell, Clojure, etc.) A new addition to this list, which you might not have heard of, is Array languages (APL and its derivatives, Fortran, etc.) Array languages are considered separate from the previous two categories, as they operate differently. Instead of having variables and operations (imperative) or functions (functional) as primitive objects, array languages use arrays and array algorithms as primitives. This requires a separate from of thinking from how you would program in other languages, which makes it interesting to learn even if you already know an imperative language like Python. ...uses special characters. Look at the top of the screen: that long bar with characters is the APL language! Don't be afraid: while mysterious at first, you'll grow to learn and love them. ...is untyped. There is no concept of type in APL. The underlying interpreter abstracts it all away from you and lets you focus on processing data, not its types. ...is high-level. In fact, APL abstracts a lot of normal operations from you. There are no concepts of memory, pointers, loops (in their traditional sense), or other primitives that, as a traditional (imperative) programmer, one needs to think about and understand when writing algorithms and code. The power of APL Some people say that APL is \"confusing\" and \"difficult to read\" due to its special characters. However, I disagree. APL is just as readable as any language. An English person can't read Finnish either without a little practice! On the contrary, APL is sometimes easier to read than imperative languages. Consider the following problem: Example problem Write a program that takes in a list of numbers. Is the product of all the numbers positive, negative, or zero? Return the sign of the product (1 if it is positive, -1 if it is negative, and 0 if it is zero). There are many ways to solve this problem (try it in Python or a language you are already familiar with!). The na\u00efve way - multiplying all the numbers together - is inefficient and may cause integer overflow for big lists or big numbers in some languages. Consider the following efficient solution in Python. Python solution Solution: def solution ( values ): result = 1 for value in values : if value == 0 : result = 0 break elif value > 0 : continue else : result *= - 1 print ( result ) Execution: solution ([ 1 , 3 , 5 , - 4 ]) Result: - 1 Sure, this solution could definitely be optimised and shortened. However, this is also how beginner Python programmers are often taught to approach problems such as this. You'll notice that there is a lot of overhead in this solution: the programmer manually go through the list using a loop, handle all of the different cases (making sure they are exhaustive), and print the result to the screen themselves. New students have to understand that functions are called using parentheses, while square brackets and commas are used for lists. Compare this to the equivalent APL solution. APL solution Solution: solution \u2190 \u00d7 / \u00d7 Execution: solution 1 3 5 \u00af4 Result: \u00af1 This isn't just part of the solution, this isn't a little section thereof, this is the whole solution . To an APL thinker, this is perfectly clear and legible! The symbols essentially tell the interpreter the following: \"Take the signs of all the elements of the input list, and multiply them together\". There is no mention of types, no mention of loops, just operations acting on a structured list of data. This is the power of APL: you can express simple constructs simply and effectively, with the rest abstracted away!","title":"0.2 - What's the big idea?"},{"location":"course/ch0/part2/#whats-the-big-idea","text":"","title":"What's the big idea?"},{"location":"course/ch0/part2/#apl","text":"","title":"APL..."},{"location":"course/ch0/part2/#is-an-array-language","text":"Another (unofficial) name for APL is \"Array Programming Language\". All operations in the language work on lists, matrices, and higher dimensional arrays. Many tasks that require data processing and operations on large amounts of structured data work really well in APL. You might have heard that programming languages can be classified into a few different types: Imperative languages (Python, Java, C, R, etc.) Functional languages (Haskell, Clojure, etc.) A new addition to this list, which you might not have heard of, is Array languages (APL and its derivatives, Fortran, etc.) Array languages are considered separate from the previous two categories, as they operate differently. Instead of having variables and operations (imperative) or functions (functional) as primitive objects, array languages use arrays and array algorithms as primitives. This requires a separate from of thinking from how you would program in other languages, which makes it interesting to learn even if you already know an imperative language like Python.","title":"...is an array language."},{"location":"course/ch0/part2/#uses-special-characters","text":"Look at the top of the screen: that long bar with characters is the APL language! Don't be afraid: while mysterious at first, you'll grow to learn and love them.","title":"...uses special characters."},{"location":"course/ch0/part2/#is-untyped","text":"There is no concept of type in APL. The underlying interpreter abstracts it all away from you and lets you focus on processing data, not its types.","title":"...is untyped."},{"location":"course/ch0/part2/#is-high-level","text":"In fact, APL abstracts a lot of normal operations from you. There are no concepts of memory, pointers, loops (in their traditional sense), or other primitives that, as a traditional (imperative) programmer, one needs to think about and understand when writing algorithms and code.","title":"...is high-level."},{"location":"course/ch0/part2/#the-power-of-apl","text":"Some people say that APL is \"confusing\" and \"difficult to read\" due to its special characters. However, I disagree. APL is just as readable as any language. An English person can't read Finnish either without a little practice! On the contrary, APL is sometimes easier to read than imperative languages. Consider the following problem: Example problem Write a program that takes in a list of numbers. Is the product of all the numbers positive, negative, or zero? Return the sign of the product (1 if it is positive, -1 if it is negative, and 0 if it is zero). There are many ways to solve this problem (try it in Python or a language you are already familiar with!). The na\u00efve way - multiplying all the numbers together - is inefficient and may cause integer overflow for big lists or big numbers in some languages. Consider the following efficient solution in Python. Python solution Solution: def solution ( values ): result = 1 for value in values : if value == 0 : result = 0 break elif value > 0 : continue else : result *= - 1 print ( result ) Execution: solution ([ 1 , 3 , 5 , - 4 ]) Result: - 1 Sure, this solution could definitely be optimised and shortened. However, this is also how beginner Python programmers are often taught to approach problems such as this. You'll notice that there is a lot of overhead in this solution: the programmer manually go through the list using a loop, handle all of the different cases (making sure they are exhaustive), and print the result to the screen themselves. New students have to understand that functions are called using parentheses, while square brackets and commas are used for lists. Compare this to the equivalent APL solution. APL solution Solution: solution \u2190 \u00d7 / \u00d7 Execution: solution 1 3 5 \u00af4 Result: \u00af1 This isn't just part of the solution, this isn't a little section thereof, this is the whole solution . To an APL thinker, this is perfectly clear and legible! The symbols essentially tell the interpreter the following: \"Take the signs of all the elements of the input list, and multiply them together\". There is no mention of types, no mention of loops, just operations acting on a structured list of data. This is the power of APL: you can express simple constructs simply and effectively, with the rest abstracted away!","title":"The power of APL"},{"location":"course/ch0/part3/","text":"Resources For some extra practice and information, check out the following resources: APL Practice Problems APL Problem Solving Competition , held every year Dyalog , the developer of the APL interpreter","title":"0.3 - Useful resources"},{"location":"course/ch0/part3/#resources","text":"For some extra practice and information, check out the following resources: APL Practice Problems APL Problem Solving Competition , held every year Dyalog , the developer of the APL interpreter","title":"Resources"},{"location":"course/ch0/part4/","text":"About the course Chapters This course consists of N chapters. Each chapter has multiple parts with material. At the end of each chapter, you can find the following parts: Summary , which contains a recap of the symbols used in the chapter material Read problems , which are ungraded problems you can use to test your knowledge of the material by reading Write problems , which are graded programming exercises you need to submit to the server. Grading Once you have successfully completed at least 60% of the write exercises, you can get 5 ECTS credits for completion. If you solve at least 60% of the exercises, you get a grade of 3. If you solve at least 90% of the exercises, you get a grade of 4. If you solve at least 99% of the exercises, you get a grade of 5. Please see the ECTS credits page for instructions on getting study credits for this course. Note ECTS credits are not currently available, as the course has not been registered as a University of Helsinki MOOC yet.","title":"0.4 - About the course"},{"location":"course/ch0/part4/#about-the-course","text":"","title":"About the course"},{"location":"course/ch0/part4/#chapters","text":"This course consists of N chapters. Each chapter has multiple parts with material. At the end of each chapter, you can find the following parts: Summary , which contains a recap of the symbols used in the chapter material Read problems , which are ungraded problems you can use to test your knowledge of the material by reading Write problems , which are graded programming exercises you need to submit to the server.","title":"Chapters"},{"location":"course/ch0/part4/#grading","text":"Once you have successfully completed at least 60% of the write exercises, you can get 5 ECTS credits for completion. If you solve at least 60% of the exercises, you get a grade of 3. If you solve at least 90% of the exercises, you get a grade of 4. If you solve at least 99% of the exercises, you get a grade of 5. Please see the ECTS credits page for instructions on getting study credits for this course. Note ECTS credits are not currently available, as the course has not been registered as a University of Helsinki MOOC yet.","title":"Grading"},{"location":"course/ch1/part1/","text":"Immediate execution mode Let's get started with some basic APL! For the first few chapters, we will be working with the REPL available at TryAPL . If you've ever tried running python3 ( py for W*ndows users) or the IDLE editor on your computer, this is the same thing. The REPL will wait for you to enter a command, then evaluate and print the result (if your command resulted in a result), after which it will return control back to you. This will repeat for as long as your heart desires. Try it yourself You can run APL code at tryapl.org Try running the commands in this chapter yourself. You can also use the REPL for playing around, testing out ideas, and working on the write exercises at the end of the chapter. The mode you land in by default is called Immediate Execution mode (because it immediately executes whatever you give it). Other modes include Execution mode, Function Editing mode, Character Input mode, Evaluated Input mode, and GUI Input Form mode. We will get back to these modes in future chapters. Surprisingly enough, this style of prompt is how APL code has been written for the longest time! By using the different modes outlined above, alongside APL workspaces and an APL IDE, you can write any programs you like. Thankfully, since we live in the year 2022, some APL developers have realised that it might be smart to finally get with the times and let programmers write their code in text files that are executed by an APL interpreter. This is fairly straightforward to do but requires some configuration, so we will get back to this in a later chapter. For now, the TryAPL interpreter will suffice.","title":"1.1 - Immediate execution mode"},{"location":"course/ch1/part1/#immediate-execution-mode","text":"Let's get started with some basic APL! For the first few chapters, we will be working with the REPL available at TryAPL . If you've ever tried running python3 ( py for W*ndows users) or the IDLE editor on your computer, this is the same thing. The REPL will wait for you to enter a command, then evaluate and print the result (if your command resulted in a result), after which it will return control back to you. This will repeat for as long as your heart desires. Try it yourself You can run APL code at tryapl.org Try running the commands in this chapter yourself. You can also use the REPL for playing around, testing out ideas, and working on the write exercises at the end of the chapter. The mode you land in by default is called Immediate Execution mode (because it immediately executes whatever you give it). Other modes include Execution mode, Function Editing mode, Character Input mode, Evaluated Input mode, and GUI Input Form mode. We will get back to these modes in future chapters. Surprisingly enough, this style of prompt is how APL code has been written for the longest time! By using the different modes outlined above, alongside APL workspaces and an APL IDE, you can write any programs you like. Thankfully, since we live in the year 2022, some APL developers have realised that it might be smart to finally get with the times and let programmers write their code in text files that are executed by an APL interpreter. This is fairly straightforward to do but requires some configuration, so we will get back to this in a later chapter. For now, the TryAPL interpreter will suffice.","title":"Immediate execution mode"},{"location":"course/ch1/part2/","text":"Basic operations and input Okay, so we have TryAPL open. Now what? APL is a programming language, so it would make sense if it could, at least, do some basic arithmetic. Let's try it out! How about addition? 2 + 2 4 Okay, it seems to be able to handle that. Great start! You'll notice that the programmer's input is indented, while the interpreter's output is not. You can think of it as a conversation, where you are on the right and the interpreter is on the left. Keep this in mind. It will be important for later. Time to try subtraction... 8 - 5 3 5 - 8 \u00af3 Okay, so that seems to work as well. But wait, why is the negative sign before the number 3 rendered weirdly? It looks different from the minus sign we typed. As it turns out, there are two signs for negation in APL. One of them is a minus function ( - ), that subtracts two numbers. The other is a negative sign ( \u00af ), which is slightly higher and tells APL that a number is negative. The negative sign is not a function! In the same way that a full stop ( . ) decorates a number ( 3.14159 ) to show that it has a decimal part, the negative sign ( \u00af ) decorates a number ( \u00af1337 ) to show that it's negative. Functions In APL, functions take in arguments and produce results . Most APL symbols are functions . You will get familiar with them in the next chapters. Functions can have arguments to their left and right. If a function has both left and right arguments , it is called dyadic (di = two). If a function has only one argument on the right , it is called monadic (mono = one). If a function doesn't take arguments (quite rare!), it is called niladic (nil = zero). Functions with only one argument on the left do not exist in APL. Results are what a function \"spits out\". You can imagine the result of the function replacing the function after its execution is done, just like in any other programming language. There are also functions that do not return any results. Multiplication should work just as intuitively. 2 * 2 4 2 * 5 32 Wait, what? 2*2 evaluated to 4 , while 2*5 evaluated to 32 ?! This isn't multiplication, it's exponentiation! What's going on here? Warning APL was created by mathematicians in the 1960s. Mathematicians love weird and funny symbols. This was the time before Unicode, the standard way in which we encode characters today, was invented. As such, the creators were free to invent any typewriter symbols they wanted (yes, APL was written on a typewriter), and added a lot of special symbols that look really cool but aren't found on any modern keyboards. There are lots of symbols implemented in Unicode even today just because they were invented by APL'ers before any proper standards were written. You will learn how to type them shortly! In fact, the creators of APL added a special multiplication cross ( \u00d7 ) to do multiplication. Not to be confused with the letter x ! Similarly, division is done with the dedicated mathematical division symbol ( \u00f7 ). Let's try them out: 2 \u00d7 2 4 2 \u00d7 5 10 7 \u00f7 2 3.5 2 \u00f7 7 0.2857142857 123 \u00d7 \u00af456 \u00af56088 Funkar som den ska. Significant figures APL will display results of your calculations to 10 significant figures. Internally, APL calculates all floating-point operations to 16 or 17 significant figures, which is a suitable level of accuracy for most (if not all) applications.","title":"1.2 - Basic operations and input"},{"location":"course/ch1/part2/#basic-operations-and-input","text":"Okay, so we have TryAPL open. Now what? APL is a programming language, so it would make sense if it could, at least, do some basic arithmetic. Let's try it out! How about addition? 2 + 2 4 Okay, it seems to be able to handle that. Great start! You'll notice that the programmer's input is indented, while the interpreter's output is not. You can think of it as a conversation, where you are on the right and the interpreter is on the left. Keep this in mind. It will be important for later. Time to try subtraction... 8 - 5 3 5 - 8 \u00af3 Okay, so that seems to work as well. But wait, why is the negative sign before the number 3 rendered weirdly? It looks different from the minus sign we typed. As it turns out, there are two signs for negation in APL. One of them is a minus function ( - ), that subtracts two numbers. The other is a negative sign ( \u00af ), which is slightly higher and tells APL that a number is negative. The negative sign is not a function! In the same way that a full stop ( . ) decorates a number ( 3.14159 ) to show that it has a decimal part, the negative sign ( \u00af ) decorates a number ( \u00af1337 ) to show that it's negative. Functions In APL, functions take in arguments and produce results . Most APL symbols are functions . You will get familiar with them in the next chapters. Functions can have arguments to their left and right. If a function has both left and right arguments , it is called dyadic (di = two). If a function has only one argument on the right , it is called monadic (mono = one). If a function doesn't take arguments (quite rare!), it is called niladic (nil = zero). Functions with only one argument on the left do not exist in APL. Results are what a function \"spits out\". You can imagine the result of the function replacing the function after its execution is done, just like in any other programming language. There are also functions that do not return any results. Multiplication should work just as intuitively. 2 * 2 4 2 * 5 32 Wait, what? 2*2 evaluated to 4 , while 2*5 evaluated to 32 ?! This isn't multiplication, it's exponentiation! What's going on here? Warning APL was created by mathematicians in the 1960s. Mathematicians love weird and funny symbols. This was the time before Unicode, the standard way in which we encode characters today, was invented. As such, the creators were free to invent any typewriter symbols they wanted (yes, APL was written on a typewriter), and added a lot of special symbols that look really cool but aren't found on any modern keyboards. There are lots of symbols implemented in Unicode even today just because they were invented by APL'ers before any proper standards were written. You will learn how to type them shortly! In fact, the creators of APL added a special multiplication cross ( \u00d7 ) to do multiplication. Not to be confused with the letter x ! Similarly, division is done with the dedicated mathematical division symbol ( \u00f7 ). Let's try them out: 2 \u00d7 2 4 2 \u00d7 5 10 7 \u00f7 2 3.5 2 \u00f7 7 0.2857142857 123 \u00d7 \u00af456 \u00af56088 Funkar som den ska. Significant figures APL will display results of your calculations to 10 significant figures. Internally, APL calculates all floating-point operations to 16 or 17 significant figures, which is a suitable level of accuracy for most (if not all) applications.","title":"Basic operations and input"},{"location":"course/ch1/part3/","text":"How do I type these characters?!?!?!? Step 1: go to Amazon and buy a special APL typewriter keyboard... Just kidding (thankfully). In the modern day and age, there are way better options: Simplest: Press the buttons in the IDE At the top of the TryAPL page (and this course page) there are symbols you can click. You can also hover over them to get a quick overview of what each symbol does in APL. This is, however, quite slow when you need to write APL code fast . Find some alternatives below. Quickest: Use keyboard shortcuts On TryAPL (and this page), you can use prefixes to insert various special symbols. You can use any of the following keys as a prefix: ` \u00a7 \u00b0 \u00b2 \u00b5 \u00ba \u00bd \u00f9 On Finnish keyboards, the \u00a7 key (located to the left of 1 ) is the easiest to use. On US and UK keyboards, the ` key is preferred. Whichever key you pick we will denote as PREFIX from now on. To use prefixes, hit whatever prefix key you are using, followed by the key you want to type. For example, the multiplication symbol \u00d7 is inserted by typing PREFIX - and division \u00f7 is inserted with PREFIX = . While these might seem unintuitive at first, you'll get used to them fairly quickly. You can see the completion shortcut if you hover over the symbol in the top language bar. For example, hovering over \u00d7 shows tells you the following: Prefix: <prefix> - . These are just instructions telling you to do what we did above. Quickest (alternative): Tab completion Sometimes, if you have a Finnish keyboard, you will be unable to type certain prefix shortcuts that were designed for US keyboards. Thankfully, there is an alternative: tab completions. You can find the keys needed for tab completion in the same tooltip that shows you what keys to use for the prefix shortcuts. For example, hovering over the arrow symbol ( \u2190 ) shows the follwing information: < - <tab> . Just follow the instructions and hit the keys < - Tab . You'll notice that the alternative, PREFIX [ is impossible to type on a Finnish keyboard, as it doesn't have a separate [ key (and using AltGr breaks the APL shortcut). Note! Tab completion is only required for non-US users due to a bug feature in TryAPL, which is that it's designed with only US keyboards in mind. When we install the Dyalog IDE in a future chapter, this will no longer be a concern, as that supports Finnish (and various other non-US) keyboards natively. Excessive: Install the APL Keyboard You can install a dedicated keyboard for APL glyphs. See further instructions on the Dyalog website . This method provides no extra benefits unless you want to type APL outside of TryAPL, this webpage, or the IDE. We will also see in a later chapter how to install a plugin for Visual Studio Code that allows you to type APL characters.","title":"1.3 - How do I type these characters?!?!?!?"},{"location":"course/ch1/part3/#how-do-i-type-these-characters","text":"Step 1: go to Amazon and buy a special APL typewriter keyboard... Just kidding (thankfully). In the modern day and age, there are way better options:","title":"How do I type these characters?!?!?!?"},{"location":"course/ch1/part3/#simplest-press-the-buttons-in-the-ide","text":"At the top of the TryAPL page (and this course page) there are symbols you can click. You can also hover over them to get a quick overview of what each symbol does in APL. This is, however, quite slow when you need to write APL code fast . Find some alternatives below.","title":"Simplest: Press the buttons in the IDE"},{"location":"course/ch1/part3/#quickest-use-keyboard-shortcuts","text":"On TryAPL (and this page), you can use prefixes to insert various special symbols. You can use any of the following keys as a prefix: ` \u00a7 \u00b0 \u00b2 \u00b5 \u00ba \u00bd \u00f9 On Finnish keyboards, the \u00a7 key (located to the left of 1 ) is the easiest to use. On US and UK keyboards, the ` key is preferred. Whichever key you pick we will denote as PREFIX from now on. To use prefixes, hit whatever prefix key you are using, followed by the key you want to type. For example, the multiplication symbol \u00d7 is inserted by typing PREFIX - and division \u00f7 is inserted with PREFIX = . While these might seem unintuitive at first, you'll get used to them fairly quickly. You can see the completion shortcut if you hover over the symbol in the top language bar. For example, hovering over \u00d7 shows tells you the following: Prefix: <prefix> - . These are just instructions telling you to do what we did above.","title":"Quickest: Use keyboard shortcuts"},{"location":"course/ch1/part3/#quickest-alternative-tab-completion","text":"Sometimes, if you have a Finnish keyboard, you will be unable to type certain prefix shortcuts that were designed for US keyboards. Thankfully, there is an alternative: tab completions. You can find the keys needed for tab completion in the same tooltip that shows you what keys to use for the prefix shortcuts. For example, hovering over the arrow symbol ( \u2190 ) shows the follwing information: < - <tab> . Just follow the instructions and hit the keys < - Tab . You'll notice that the alternative, PREFIX [ is impossible to type on a Finnish keyboard, as it doesn't have a separate [ key (and using AltGr breaks the APL shortcut). Note! Tab completion is only required for non-US users due to a bug feature in TryAPL, which is that it's designed with only US keyboards in mind. When we install the Dyalog IDE in a future chapter, this will no longer be a concern, as that supports Finnish (and various other non-US) keyboards natively.","title":"Quickest (alternative): Tab completion"},{"location":"course/ch1/part3/#excessive-install-the-apl-keyboard","text":"You can install a dedicated keyboard for APL glyphs. See further instructions on the Dyalog website . This method provides no extra benefits unless you want to type APL outside of TryAPL, this webpage, or the IDE. We will also see in a later chapter how to install a plugin for Visual Studio Code that allows you to type APL characters.","title":"Excessive: Install the APL Keyboard"},{"location":"course/ch1/part4/","text":"Order of execution Okay, we've tried adding and multiplying two numbers together. What if we try adding and multiplying three numbers at the same time? 2 \u00d7 2 4 2 \u00d7 2 + 1 6 Oops. What happened here? Instead of doing the arithmetic operations in the normal order, 2 times 2 and add 1 (PEMDAS, remember?) APL seems to have done them in the reverse order, 2 plus 1 and the whole thing times 2. Let's see why that is. The creators of APL were faced with a dillemma. Every new symbol they added to the language was to be considered a function. In other languages, like Python, functions take in arguments inside parentheses. However, in APL, functions only take in arguments from the left and right . Because of this, all functions look and act like the multiplication and addition functions, and it isn't clear in which order they should be executed (e.g. consider the new symbol 1\u230a2+2 : would you perform the addition first or whatever this new \u230a function does first?) So, for every new function they added, the creators would have to decide where to put it in the hierarchy. And this doesn't even take into account functions that programmers can create themselves! \"Screw it,\" the creators decided, and made one, solid, unambiguous, easy-to-remember rule. Order of execution In APL, all operations are executed right-to-left . When APL runs a line of code, it first looks at the rightmost function symbol and executes it with the arguments to its left and right. It then looks at the function symbol to the left of the one just processed, and executes it, treating the result it just got as a right argument. An equivalent formulation of this would be Order of execution In APL, every function takes in the whole expression on its right as a right argument. Can you see why these two formulations are equivalent? Example Suppose you have the expression 3+5\u00f70.25\u00d76*10-8 . This will get evaluated right-to-left as: 3 + 5 \u00f7 0.25 \u00d7 6 * 10 - 8 3 + 5 \u00f7 0.25 \u00d7 6 * 2 3 + 5 \u00f7 0.25 \u00d7 36 3 + 5 \u00f7 9 3 + 0.5555555556 3.555555556 About spaces APL ignores extra spaces when processing statements. For example, all of the following statements will produce the same result: 2 \u00d7 2 + 1 6 2 \u00d7 2 + 1 6 2 \u00d7 2 + 1 6 2 \u00d7 2 + 1 6 Altering the order of execution You can use parentheses, ( and ) , to alter the order of execution in APL. This is the same as in mathematics or any other programming language: statements within parentheses are executed before anything else. Let's look at our previous example once again: 2 \u00d7 2 + 1 6 2 \u00d7 ( 2 + 1 ) \u235d (1)! 6 ( 2 \u00d7 2 ) + 1 \u235d (2)! 5 Same result as before; the parentheses changed nothing Finally, the result we wanted! As a beginner APL programmer, it's easy to want to put parentheses everywhere when your code doesn't work. Resist the urge. Use parentheses for readability, and when needed to change the order of operations. However, your code generally ends up cleaner if you can write it with as few parentheses as possible. In the above case, for example, we could have simply restructured the expression to be the following: 1 + 2 \u00d7 2 5 No parentheses, and we get the correct answer! In general, when you have parentheses on the right, they are redundant. This is easier to understand in context. Consider the following expression: ( 1 + ( 2 \u00d7 ( 3 \u00f7 ( 4 - 5 )))) \u00af5 In this case, all of the parentheses are unnecessary, since it is telling the APL interpreter to execute everything from right to left, which it would do anyway. So, in this case, you could achieve the same result with the shorter and more readable code: 1 + 2 \u00d7 3 \u00f7 4 - 5 \u00af5 Pretty, isn't it? Before we conclude, here are some tips on how to reduce parentheses in your code to avoid a parenthesis jungle: Reducing parentheses No APL expression needs to end with a closing parenthesis. It's redundant. For example, the expression (2\u00d73)+(4\u00d75) can be rewritten as (2\u00d73)+4\u00d75 You never need two consecutive closing parentheses. It's redundant. For example, the expression (2\u00d7(3+4))\u00f75 is equivalent to (2\u00d73+4)\u00f75 If you can easily rewrite the expression to avoid parentheses, do so. For example, the expression ((2\u00f73)+4)\u00d75 can be reversed to give 5\u00d74+2\u00f73 Do not shovel in extra parentheses in a panicked, desperate attempt to fix your code. Do shovel in parentheses if it genuinely helps the readability of your code. This isn't to say that you should avoid using parentheses. They often help your thought process and improve understanding of the code. They do not slow down execution , so feel free to use as many as you'd like (and potentially reduce their amount afterwards)! This funny order of execution and the rules for placing parentheses might take getting used to. Don't worry, as you progress further, you will forget how else computers can execute code! Lamp One last handy symbol: \u235d . Can you figure out what it does from this example? \u235d asdfada (1) \u235d adsfljsakfdjlkdsajflkdsajf \u235d =\u2260\u2228\u00af\u2265>\u2260\u2260=\u2264<\u00af\u00e4\u00f6'j\u2206\u2283\u2282\u2308\u220a\u2191j|\u22a4\u2282\u236aAQWED\u2286A\u2370\u22645\u2265>\u22288\u2227\u00b4\u00a7\u00c4&\u2364\u2368\u233f&\u00a4\u2286\u2261\u234e^\u00c5 2 + 2 \u235d This is addition 4 123 \u00d7 456 \u235d yay 56088 Hint: ong it kinda looks like \u0d9e That's right, it's a comment. It makes the APL interpreter ignore whatever symbols come after it on the same line. You can use it to temporarily remove code from your programs or to add extra information to whatever code you have written. The official name for this symbol is \"lamp\". Why? Because comments illuminate your code.","title":"1.4 - Order of execution"},{"location":"course/ch1/part4/#order-of-execution","text":"Okay, we've tried adding and multiplying two numbers together. What if we try adding and multiplying three numbers at the same time? 2 \u00d7 2 4 2 \u00d7 2 + 1 6 Oops. What happened here? Instead of doing the arithmetic operations in the normal order, 2 times 2 and add 1 (PEMDAS, remember?) APL seems to have done them in the reverse order, 2 plus 1 and the whole thing times 2. Let's see why that is. The creators of APL were faced with a dillemma. Every new symbol they added to the language was to be considered a function. In other languages, like Python, functions take in arguments inside parentheses. However, in APL, functions only take in arguments from the left and right . Because of this, all functions look and act like the multiplication and addition functions, and it isn't clear in which order they should be executed (e.g. consider the new symbol 1\u230a2+2 : would you perform the addition first or whatever this new \u230a function does first?) So, for every new function they added, the creators would have to decide where to put it in the hierarchy. And this doesn't even take into account functions that programmers can create themselves! \"Screw it,\" the creators decided, and made one, solid, unambiguous, easy-to-remember rule. Order of execution In APL, all operations are executed right-to-left . When APL runs a line of code, it first looks at the rightmost function symbol and executes it with the arguments to its left and right. It then looks at the function symbol to the left of the one just processed, and executes it, treating the result it just got as a right argument. An equivalent formulation of this would be Order of execution In APL, every function takes in the whole expression on its right as a right argument. Can you see why these two formulations are equivalent? Example Suppose you have the expression 3+5\u00f70.25\u00d76*10-8 . This will get evaluated right-to-left as: 3 + 5 \u00f7 0.25 \u00d7 6 * 10 - 8 3 + 5 \u00f7 0.25 \u00d7 6 * 2 3 + 5 \u00f7 0.25 \u00d7 36 3 + 5 \u00f7 9 3 + 0.5555555556 3.555555556 About spaces APL ignores extra spaces when processing statements. For example, all of the following statements will produce the same result: 2 \u00d7 2 + 1 6 2 \u00d7 2 + 1 6 2 \u00d7 2 + 1 6 2 \u00d7 2 + 1 6","title":"Order of execution"},{"location":"course/ch1/part4/#altering-the-order-of-execution","text":"You can use parentheses, ( and ) , to alter the order of execution in APL. This is the same as in mathematics or any other programming language: statements within parentheses are executed before anything else. Let's look at our previous example once again: 2 \u00d7 2 + 1 6 2 \u00d7 ( 2 + 1 ) \u235d (1)! 6 ( 2 \u00d7 2 ) + 1 \u235d (2)! 5 Same result as before; the parentheses changed nothing Finally, the result we wanted! As a beginner APL programmer, it's easy to want to put parentheses everywhere when your code doesn't work. Resist the urge. Use parentheses for readability, and when needed to change the order of operations. However, your code generally ends up cleaner if you can write it with as few parentheses as possible. In the above case, for example, we could have simply restructured the expression to be the following: 1 + 2 \u00d7 2 5 No parentheses, and we get the correct answer! In general, when you have parentheses on the right, they are redundant. This is easier to understand in context. Consider the following expression: ( 1 + ( 2 \u00d7 ( 3 \u00f7 ( 4 - 5 )))) \u00af5 In this case, all of the parentheses are unnecessary, since it is telling the APL interpreter to execute everything from right to left, which it would do anyway. So, in this case, you could achieve the same result with the shorter and more readable code: 1 + 2 \u00d7 3 \u00f7 4 - 5 \u00af5 Pretty, isn't it? Before we conclude, here are some tips on how to reduce parentheses in your code to avoid a parenthesis jungle: Reducing parentheses No APL expression needs to end with a closing parenthesis. It's redundant. For example, the expression (2\u00d73)+(4\u00d75) can be rewritten as (2\u00d73)+4\u00d75 You never need two consecutive closing parentheses. It's redundant. For example, the expression (2\u00d7(3+4))\u00f75 is equivalent to (2\u00d73+4)\u00f75 If you can easily rewrite the expression to avoid parentheses, do so. For example, the expression ((2\u00f73)+4)\u00d75 can be reversed to give 5\u00d74+2\u00f73 Do not shovel in extra parentheses in a panicked, desperate attempt to fix your code. Do shovel in parentheses if it genuinely helps the readability of your code. This isn't to say that you should avoid using parentheses. They often help your thought process and improve understanding of the code. They do not slow down execution , so feel free to use as many as you'd like (and potentially reduce their amount afterwards)! This funny order of execution and the rules for placing parentheses might take getting used to. Don't worry, as you progress further, you will forget how else computers can execute code!","title":"Altering the order of execution"},{"location":"course/ch1/part4/#lamp","text":"One last handy symbol: \u235d . Can you figure out what it does from this example? \u235d asdfada (1) \u235d adsfljsakfdjlkdsajflkdsajf \u235d =\u2260\u2228\u00af\u2265>\u2260\u2260=\u2264<\u00af\u00e4\u00f6'j\u2206\u2283\u2282\u2308\u220a\u2191j|\u22a4\u2282\u236aAQWED\u2286A\u2370\u22645\u2265>\u22288\u2227\u00b4\u00a7\u00c4&\u2364\u2368\u233f&\u00a4\u2286\u2261\u234e^\u00c5 2 + 2 \u235d This is addition 4 123 \u00d7 456 \u235d yay 56088 Hint: ong it kinda looks like \u0d9e That's right, it's a comment. It makes the APL interpreter ignore whatever symbols come after it on the same line. You can use it to temporarily remove code from your programs or to add extra information to whatever code you have written. The official name for this symbol is \"lamp\". Why? Because comments illuminate your code.","title":"Lamp"},{"location":"course/ch1/part5/","text":"When things go wrong Let's do some more arithmetic: 5 \u00f7 5 1 5 \u00f7 4 1.25 5 \u00f7 3 1.666666667 5 \u00f7 2 2.5 5 \u00f7 1 5 5 \u00f7 0 DOMAIN ERROR : Divide by zero 5 \u00f7 0 \u2227 Like most mathematicians, APL is deathly afraid of dividing by zero. As such, APL doesn't allow zero as a right argument to the division function. In other words, zero is outside the domain of the right argument of \u00f7 . When something like this happens, APL displays that there has been an error of a certain type (in this case, a DOMAIN ERROR), as well as a short description and an arrow pointing to the function that produced the error. So much better than errors in other languages! (looking at Java and Python right now) Here are some examples of error types you will come across in the future. DOMAIN ERROR LENGTH ERROR VALUE ERROR RANK ERROR SYNTAX ERROR INDEX ERROR WS FULL A common fight-or-flight response when seeing an error is ignoring it, smashing your computer screen, and trying to re-run the same line of code with a random modification you don't understand. Don't! Even if you think you might know how to solve the problem immediately, try looking at the error message and figuring out exactly what it's complaining about, and where the error happens. For example, if you see a LENGTH ERROR , APL is trying to tell you that your arguments are of the wrong length. See if you can pinpoint the exact location the error is happening at! If, on the other hand, you see a SYNTAX ERROR , it most likely means that you've either made a typo somewhere or constructed an incomplete APL expression like 3+ (the + function is missing its right argument). When faced with an error Stop, take a breath, read the error message , and analyse the situation.","title":"1.5 - When things go wrong"},{"location":"course/ch1/part5/#when-things-go-wrong","text":"Let's do some more arithmetic: 5 \u00f7 5 1 5 \u00f7 4 1.25 5 \u00f7 3 1.666666667 5 \u00f7 2 2.5 5 \u00f7 1 5 5 \u00f7 0 DOMAIN ERROR : Divide by zero 5 \u00f7 0 \u2227 Like most mathematicians, APL is deathly afraid of dividing by zero. As such, APL doesn't allow zero as a right argument to the division function. In other words, zero is outside the domain of the right argument of \u00f7 . When something like this happens, APL displays that there has been an error of a certain type (in this case, a DOMAIN ERROR), as well as a short description and an arrow pointing to the function that produced the error. So much better than errors in other languages! (looking at Java and Python right now) Here are some examples of error types you will come across in the future. DOMAIN ERROR LENGTH ERROR VALUE ERROR RANK ERROR SYNTAX ERROR INDEX ERROR WS FULL A common fight-or-flight response when seeing an error is ignoring it, smashing your computer screen, and trying to re-run the same line of code with a random modification you don't understand. Don't! Even if you think you might know how to solve the problem immediately, try looking at the error message and figuring out exactly what it's complaining about, and where the error happens. For example, if you see a LENGTH ERROR , APL is trying to tell you that your arguments are of the wrong length. See if you can pinpoint the exact location the error is happening at! If, on the other hand, you see a SYNTAX ERROR , it most likely means that you've either made a typo somewhere or constructed an incomplete APL expression like 3+ (the + function is missing its right argument). When faced with an error Stop, take a breath, read the error message , and analyse the situation.","title":"When things go wrong"},{"location":"course/ch1/read/","text":"Read exercises For each of the following exercises, try to figure out what the input will produce in the TryAPL terminal. Check your answers by opening the \"Output\" tab. If you think an error will occur, try to predict which error it will be and where the arrow will point to. The exercises are not checked or graded: use them to check your knowledge! Number manipulation Read problem 1 Input Output 2 + 3 5 Read problem 2 Input Output 2 - 3 \u00af1 The negative sign ( \u00af ) is different from the minus function ( - ) Read problem 3 Input Output 3 * 3 27 * is used for exponentiation, not multiplication Read problem 4 Input Output 3 \u00d7 3 9 Read problem 5 Input Output 3 \u00f7 2 1.5 Read problem 6 Input Output 2\u00af7 SYNTAX ERROR 2\u00af 7 \u2227 The negative sign ( \u00af ) is not a function. Use the - function instead. Read problem 7 Input Output 1 + 2 \u00f7 SYNTAX ERROR 1 + 2 \u00f7 \u2227 The divide function is missing its right argument. Read problem 8 Input Output 100 \u00f7 0 DOMAIN ERROR : Divide by zero 100 \u00f7 0 \u2227 Can't divide by zero! Read problem 9 Input Output 0 \u00f7 100 0 Read problem 10 Input Output 0 \u00f7 0 1 Ah, the age-old dilemma! Were you expecting a DOMAIN ERROR ? The APL developers decided to add this feature since it is useful in some contexts. There is the option to change this if it really upsets you. Read problem 11 Input Output \u00af2 \u00d7 \u00af3 6 Order of execution Read problem 12 Input Output 4 \u00d7 2 + 3 20 Right-to-left. Read problem 13 Input Output 5 \u00d7 2 + 3 \u00d7 2 40 Still right-to-left, regardless of spaces. Read problem 14 Input Output 24 \u00f7 8 \u00f7 2 6 Read problem 15 Input Output 3 \u00f7 12 + 4 \u00d7 \u00af3 DOMAIN ERROR : Divide by zero 3 \u00f7 12 + 4 \u00d7 \u00af3 \u2227 The 12 + \u00af12 results in zero, which is outside of the domain of the divide function's right argument. Read problem 16 Input Output ((( 2 + 3 ))) 5 Extra parentheses never hurt anyone. Read problem 17 Input Output ((( 5 )) + (((( 3 ))) \u00d7 ( 2 ))) 11 Very readable! Is this LISP ? Read problem 18 Input Output 4 \u00d7 24 \u00f7 3 32 Read problem 19 Input Output 24 \u00f7 4 \u00d7 3 2 Read problem 20 Input Output 6 \u00d7 3 - SYNTAX ERROR 6 \u00d7 3 - \u2227 Typo.","title":"1.R - Read exercises"},{"location":"course/ch1/read/#read-exercises","text":"For each of the following exercises, try to figure out what the input will produce in the TryAPL terminal. Check your answers by opening the \"Output\" tab. If you think an error will occur, try to predict which error it will be and where the arrow will point to. The exercises are not checked or graded: use them to check your knowledge!","title":"Read exercises"},{"location":"course/ch1/read/#number-manipulation","text":"Read problem 1 Input Output 2 + 3 5 Read problem 2 Input Output 2 - 3 \u00af1 The negative sign ( \u00af ) is different from the minus function ( - ) Read problem 3 Input Output 3 * 3 27 * is used for exponentiation, not multiplication Read problem 4 Input Output 3 \u00d7 3 9 Read problem 5 Input Output 3 \u00f7 2 1.5 Read problem 6 Input Output 2\u00af7 SYNTAX ERROR 2\u00af 7 \u2227 The negative sign ( \u00af ) is not a function. Use the - function instead. Read problem 7 Input Output 1 + 2 \u00f7 SYNTAX ERROR 1 + 2 \u00f7 \u2227 The divide function is missing its right argument. Read problem 8 Input Output 100 \u00f7 0 DOMAIN ERROR : Divide by zero 100 \u00f7 0 \u2227 Can't divide by zero! Read problem 9 Input Output 0 \u00f7 100 0 Read problem 10 Input Output 0 \u00f7 0 1 Ah, the age-old dilemma! Were you expecting a DOMAIN ERROR ? The APL developers decided to add this feature since it is useful in some contexts. There is the option to change this if it really upsets you. Read problem 11 Input Output \u00af2 \u00d7 \u00af3 6","title":"Number manipulation"},{"location":"course/ch1/read/#order-of-execution","text":"Read problem 12 Input Output 4 \u00d7 2 + 3 20 Right-to-left. Read problem 13 Input Output 5 \u00d7 2 + 3 \u00d7 2 40 Still right-to-left, regardless of spaces. Read problem 14 Input Output 24 \u00f7 8 \u00f7 2 6 Read problem 15 Input Output 3 \u00f7 12 + 4 \u00d7 \u00af3 DOMAIN ERROR : Divide by zero 3 \u00f7 12 + 4 \u00d7 \u00af3 \u2227 The 12 + \u00af12 results in zero, which is outside of the domain of the divide function's right argument. Read problem 16 Input Output ((( 2 + 3 ))) 5 Extra parentheses never hurt anyone. Read problem 17 Input Output ((( 5 )) + (((( 3 ))) \u00d7 ( 2 ))) 11 Very readable! Is this LISP ? Read problem 18 Input Output 4 \u00d7 24 \u00f7 3 32 Read problem 19 Input Output 24 \u00f7 4 \u00d7 3 2 Read problem 20 Input Output 6 \u00d7 3 - SYNTAX ERROR 6 \u00d7 3 - \u2227 Typo.","title":"Order of execution"},{"location":"course/ch1/summary/","text":"Function index Here is a table of symbols we have used and how to type them in TryAPL. It might be useful to review this page as you are doing the read and write exercises in the next sections. Symbol Name Function Key combination + Plus Addition + - Minus Subtraction - \u00d7 Times Multiplication PREFIX - \u00f7 Divide Division PREFIX = * Power Exponentiation * \u00af Negative sign Negation of a number PREFIX 2 \u235d Lamp Comment PREFIX ,","title":"1.S - Summary"},{"location":"course/ch1/summary/#function-index","text":"Here is a table of symbols we have used and how to type them in TryAPL. It might be useful to review this page as you are doing the read and write exercises in the next sections. Symbol Name Function Key combination + Plus Addition + - Minus Subtraction - \u00d7 Times Multiplication PREFIX - \u00f7 Divide Division PREFIX = * Power Exponentiation * \u00af Negative sign Negation of a number PREFIX 2 \u235d Lamp Comment PREFIX ,","title":"Function index"},{"location":"course/ch1/write/","text":"Write exercises Submit APL code for the following exercises. Your submissions are graded using TMC. Make sure to log in to be able to submit your work! Remember, you can test out ideas and develop you solution at TryAPL before submitting it here. You can submit as many solutions as you like. If you submit a correct solution at least once, you will receive points on the TMC server and be able to see the model solution. If the write problem is red, it is unsolved. If it it green, you have solved it and received points for it on the server. Write problem 1 Calculate the area of a room which is 13.7 long and 206.55 wide. \u2395\u2190 Submit Write problem 2 A grandpa decreases in height by 2.5412cm every year. If he is 150.0000cm tall now, how tall will he be in 15 years? \u2395\u2190 Submit Write problem 3 If 3 liters of embalming fluid cost you 300.12\u20ac, what is the price per liter? \u2395\u2190 Submit Write problem 4 Your current bank balance is \u00af420\u20ac. You are in big trouble. What will be your balance if you take just another quick loan of 100\u20ac? \u2395\u2190 Submit Write problem 5 Cause a SYNTAX ERROR using as few symbols as possible. \u2395\u2190 Submit Write problem 6 Cause a DOMAIN ERROR . \u2395\u2190 Submit Write problem 7 The following expression returns the number 13. ((( 5 * 2 ) + ( 12 * 2 )) * .5 ) Rewrite the expression with as few parentheses as possible to still return the number 13. \u2395\u2190 Submit Write problem 8 Compute the mean of the numbers 1, 57, 237, \u00af5, 42. \u2395\u2190 Submit Write problem 9 Suppose your tax rate is 7.5%. If you earned 25000\u20ac this year, and your tax return (to be deducted from this year's taxes) is 175\u20ac, how much money will you owe the government this year? \u2395\u2190 Submit Write problem 10 Subtract 7 from 16, divide the result by 3, add 8, multiply by 2.5, and square the result. Use as few parentheses as possible. \u2395\u2190 Submit Write problem 11 Write a nonempty line of code that does nothing (doesn't display anything on the screen). \u2395\u2190 Submit Write problem 12 Rewrite the following line of code to use as few parentheses as possible (((( 10 + 3.5 ) \u00d7 ( 6 + 5.555 )) - ((( 2 + 7 ) \u00d7 \u00af11 ) \u00d7 8.5 )) \u00f7 \u00af20 ) \u235d((()())))()()((()()))()()()()))())))()((( \u2395\u2190 Submit","title":"1.W - Write exercises"},{"location":"course/ch1/write/#write-exercises","text":"Submit APL code for the following exercises. Your submissions are graded using TMC. Make sure to log in to be able to submit your work! Remember, you can test out ideas and develop you solution at TryAPL before submitting it here. You can submit as many solutions as you like. If you submit a correct solution at least once, you will receive points on the TMC server and be able to see the model solution. If the write problem is red, it is unsolved. If it it green, you have solved it and received points for it on the server. Write problem 1 Calculate the area of a room which is 13.7 long and 206.55 wide. \u2395\u2190 Submit Write problem 2 A grandpa decreases in height by 2.5412cm every year. If he is 150.0000cm tall now, how tall will he be in 15 years? \u2395\u2190 Submit Write problem 3 If 3 liters of embalming fluid cost you 300.12\u20ac, what is the price per liter? \u2395\u2190 Submit Write problem 4 Your current bank balance is \u00af420\u20ac. You are in big trouble. What will be your balance if you take just another quick loan of 100\u20ac? \u2395\u2190 Submit Write problem 5 Cause a SYNTAX ERROR using as few symbols as possible. \u2395\u2190 Submit Write problem 6 Cause a DOMAIN ERROR . \u2395\u2190 Submit Write problem 7 The following expression returns the number 13. ((( 5 * 2 ) + ( 12 * 2 )) * .5 ) Rewrite the expression with as few parentheses as possible to still return the number 13. \u2395\u2190 Submit Write problem 8 Compute the mean of the numbers 1, 57, 237, \u00af5, 42. \u2395\u2190 Submit Write problem 9 Suppose your tax rate is 7.5%. If you earned 25000\u20ac this year, and your tax return (to be deducted from this year's taxes) is 175\u20ac, how much money will you owe the government this year? \u2395\u2190 Submit Write problem 10 Subtract 7 from 16, divide the result by 3, add 8, multiply by 2.5, and square the result. Use as few parentheses as possible. \u2395\u2190 Submit Write problem 11 Write a nonempty line of code that does nothing (doesn't display anything on the screen). \u2395\u2190 Submit Write problem 12 Rewrite the following line of code to use as few parentheses as possible (((( 10 + 3.5 ) \u00d7 ( 6 + 5.555 )) - ((( 2 + 7 ) \u00d7 \u00af11 ) \u00d7 8.5 )) \u00f7 \u00af20 ) \u235d((()())))()()((()()))()()()()))())))()((( \u2395\u2190 Submit","title":"Write exercises"},{"location":"course/ch2/bonus/","text":"A Musical Interlude In addition to a linear progression of ideas, this course will have several projects that showcase features of the language in a non-linear order. These projects will use ideas or operations that might not have been covered yet, so brief explanations will be given, anticipating more complete explanations in later chapters. In this project, we will use basic music theory to algorithmically generate melodies entirely in APL. The Theoretical Minimum This section is optional. It explains the reasoning behind the decisions which will be made in the next section. For most people, the sensation of sound is mediated through the ears. The ears achieve this by allowing vibrations in the air to produce waves in the fluids of the inner ear, stimulating the inner ear hair cells whose signals are eventually processed by the brain. The pitch of a sound is the frequency of this vibration. \u201cNotes\u201d distinguish sounds by their pitch. In western music, the standard convention is to consider pitches whose ratio is a power of 2 as equivalent notes, this is called \u201coctave equivalence\u201d. Equivalent notes with higher or lower pitch are said to be an \u201coctave\u201d above or below the note, for reasons that will be made clear. The pitch of a sound is the frequency of this vibration. \u201cNotes\u201d distinguish sounds by their pitch. In western music, the standard convention is to consider pitches whose ratio is a power of 2 as equivalent notes, this is called \u201coctave equivalence\u201d. Equivalent notes with higher or lower pitch are said to be an \u201coctave\u201d above or below the note, for reasons that will be made clear. \u235d For example, between the pitches 440Hz and 880Hz, \u230a 440 \u00d7 ( 2 * ( \u2373 11 ) \u00f7 12 ) 466 493 523 554 587 622 659 698 739 783 830 \u235d \u230a Floor of \u235d 440\u00d7 440 times \u235d 2* 2 to the power of \u235d (\u237311)\u00f712 the numbers 1,2,3,...,11 divided by 12 Notes are labelled using the seven letters A through G, with sharps (\u266f) and flats (\u266d) to signify the notes in-between by raising or lowering pitch, with redundancy. There are eight letters from A through G back to A, justifying the use of the word \u201coctave\". Starting from C, the twelve notes are C, C\u266f or D\u266d, D, D\u266f or E\u266d, E, F, F\u266f or G\u266d, G, G\u266f or A\u266d, A, A\u266f or B\u266d, and B. A musical scale is a certain selection of these notes, usually spanning an octave. In our case, we will restrict ourselves to using the C major scale, the notes C, D, E, F, G, A, B. The notes of a major scale are usually referred to using an ordinal number from 1st through 7th, or by roman numerals I, II, III, IV, V, VI, VII. A musical scale is a certain selection of these notes, usually spanning an octave. In our case, we will restrict ourselves to using the C major scale, the notes C, D, E, F, G, A, B. The notes of a major scale are usually referred to using an ordinal number from 1st through 7th, or by roman numerals I, II, III, IV, V, VI, VII. Implementation From the above discussion, the problem is now clear. Given some starting note, we want to generate movements between the notes with some preference for certain special movements. In the table above, red numerals represent a preferred following note. For example, we want VI to resolve to a V more frequently than to move to a VII or down to a IV . Note that the next note depends only on the previous note, so we can represent this data as a graph. Then, the data is a list of triples, consisting of the starting note, the ending note, and the color (or, priority) of the arrow between those notes. We can lay out this data in the form of a table as follows, where the row represents the starting note and the column represents the ending note. For example, the first row says that, for I as the starting note, we can get to I itself, II, or III with equal preference, 1 1 1. We use 1 for standard movements and 2 for preferred movements. Let\u2019s write try to create this matrix in APL using the reshape \u2374 operator, remembering that if the right argument is not long enough, it will repeat it to fill the required dimensions. M \u2190 7 7 \u2374 1 1 1 0 0 0 0 M 1 1 1 0 0 0 0 1 1 1 0 0 0 0 1 1 1 0 0 0 0 1 1 1 0 0 0 0 1 1 1 0 0 0 0 1 1 1 0 0 0 0 1 1 1 0 0 0 0 \u235d Not quite M \u2190 7 7 \u2374 1 1 1 0 0 0 0 0 M 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 \u235d Closer M \u2190 7 7 \u2374 1 1 0 0 0 0 0 1 M 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 \u235d Getting there M \u2190 7 7 \u2374 1 1 1 0 0 0 1 1 M 1 1 1 0 0 0 1 1 1 1 1 0 0 0 1 1 1 1 1 0 0 0 1 1 1 1 1 0 0 0 1 1 1 1 1 0 0 0 1 1 1 1 1 0 0 0 1 1 1 \u235d Almost exactly what we want Our melodies here are restricted to one octave. If we allowed a wider range, we would allow the 7th to go to the 1st of the next octave and vice versa. M [ 7 ; 1 ] \u2190 0 M [ 1 ; 7 ] \u2190 0 M [ 6 ; 5 ] \u2190 2 M [ 4 ; 3 ] \u2190 2 M [ 2 ; 1 ] \u2190 2 M [ 2 ; 3 ] \u2190 2 M 1 1 1 0 0 0 0 2 1 2 1 0 0 0 1 1 1 1 1 0 0 0 1 2 1 1 1 0 0 0 1 1 1 1 1 0 0 0 1 2 1 1 0 0 0 0 1 1 1 \u235d Perfect The next step is to figure out, given a note, what the next possible notes are. This is very easily done using the matrix multiplication +.\u00d7 operator. This operator is actually the inner product operator . applied to the functions + and \u00d7, see [Inner and Outer product section]. Represent a note with scale degree N as a vector with a 1 in the Nth slot, and 0 otherwise, then matrix multiplication with M represents picking out the Nth row, which as we mentioned above corresponds to selecting the edges in the graph where N is the starting note. Recall that \u23737 is 1 2 3 4 5 6 7, this is equivalent to 2=1 2 3 4 5 6 7 The subsequence notes are I (Preferred), II, III (Preferred), and IV II \u2190 2 =\u2373 7 II 0 1 0 0 0 0 0 II + . \u00d7 M 2 1 2 1 0 0 0 Using this, we want to decide on a movement to another note, weighed by priority. One easy way to achieve this is using the roll ? function, which simulates the rolling of a dice with faces numbering 1 to the right argument. We will roll one die from 1 to 10, or 20 for preferred movements, for every possible following note, and pick the largest result. The subsequent notes are I, II, III, and IV Multiplying by 10 to prepare to roll dice with 10, or 20, faces Notice that ? 0 returns a random real number between 0 and 1 The Grade Down operator \u2352 returns the indices of the elements of the list from largest to smallest Getting the index of the largest roll. This is III. N \u2190 II + . \u00d7 M N 2 1 2 1 0 0 0 N \u00d7 \u2190 10 N 20 10 20 10 0 0 0 NR \u2190 ? N NR 3 8 13 0.9740484038 0.3581395503 0.5245918312 \u2352 100 200 0.1 1 2 1 4 3 \u2352 NR 3 2 1 4 6 5 1 \u2337\u2352 NR 3 ( \u2373 7 ) = 1 \u2337\u2352 NR 0 0 1 0 0 0 0 This is the basic algorithm we will use to generate our melodies. Let\u2019s enclose our note generation algorithm in a direct function and generate a melody. A direct function/dfn (pronounced dee-fun) is defined using {curly braces}. The right argument to the function is called \u2375, and the left \u237a. Statements in a dfn can be separated by a \u22c4 diamond. However, only it stops as soon as a statement which returns a value is evaluated The replicate / operator generates copies of its right argument elements depending on their left arguments In this case, it replicates 0 of everything other than one copy of D 10 { \u237a + \u2375 } 2 12 10 { \u237a + \u2375 \u22c4 \u237a - \u2375 } 2 12 NEXT \u2190 { ( \u2373 7 ) = 1 \u2337\u2352? ( \u2375 \u00d7 10 ) + . \u00d7 M } NEXT 1 0 0 0 0 0 0 0 1 0 0 0 0 0 NOTES \u2190 'CDEFGAB' ( 0 1 0 0 0 0 0 ) / NOTES D MELODY \u2190 { res \u2190 NEXT \u2375 \u22c4 \u235e \u2190 res / NOTES \u22c4 MELODY res } MELODY 1 0 0 0 0 0 0 CDCECEGBGAGGGBBAAGBGEDEDFFEDCDCDECCDCECDECECEFEFEEGEGECEFEDEGBBBGBG This function will run forever, generating notes until interrupted. One way of running the defun for a fixed number of steps is to add a variable representing the number of steps. We will use the left argument \u237a as this variable. MELODY \u2190 { \u237a \u2190 0 \u22c4 \u237a > 20 : '\u266b' \u22c4 res \u2190 NEXT \u2375 \u22c4 \u235e \u2190 res / NOTES \u22c4 ( \u237a + 1 ) MELODY res } MELODY 1 0 0 0 0 0 0 CCDEGAFDCEGFDEDCDCECC \u266b Assigning a value to the left argument \u237a gives a dfns a default left argument. The assignment is only executed if the function is called monadically, that is, if there is no supplied left argument. In this case, the left argument \u237a starts at 0. The generation of the next note, the \"(\u237a+1) MELODY res\" statement, is executed with an incremented left argument. The guarded expression \u237a>20: '\u266b' states that \u266b is returned when \u237a is becomes greater than 20. Since the execution of a dfn stops as soon as a statement returns a value, the code to generate the next note is no longer executed. This is the result we were after! With just a couple lines of APL, we were able to encode general guidelines for melodic composition and write a function generating random melodies according to these principles algorithmically by tracing out a random walk through a graph. These random graph processes are more generally known as Markov Processes and have a much broader range of applicability than our case here. Applications include the Google PageRank algorithm which powered the Google search engine, particle physics simulations of quantum field theory on a lattice, and speech recognition systems. There is clearly so much more we could add to our program, from generating rhythm to accompany the melody, to adding chord progressions and harmony, and there will always be more to add. We will however stop here to enjoy the melodies our program has generated, and leave it up to the interested reader to write their own digital musicians. Some of the generated melodies are included below. Your browser does not support the audio element. Your browser does not support the audio element. Your browser does not support the audio element.","title":"2.B - Bonus content"},{"location":"course/ch2/bonus/#a-musical-interlude","text":"In addition to a linear progression of ideas, this course will have several projects that showcase features of the language in a non-linear order. These projects will use ideas or operations that might not have been covered yet, so brief explanations will be given, anticipating more complete explanations in later chapters. In this project, we will use basic music theory to algorithmically generate melodies entirely in APL.","title":"A Musical Interlude"},{"location":"course/ch2/bonus/#the-theoretical-minimum","text":"This section is optional. It explains the reasoning behind the decisions which will be made in the next section. For most people, the sensation of sound is mediated through the ears. The ears achieve this by allowing vibrations in the air to produce waves in the fluids of the inner ear, stimulating the inner ear hair cells whose signals are eventually processed by the brain. The pitch of a sound is the frequency of this vibration. \u201cNotes\u201d distinguish sounds by their pitch. In western music, the standard convention is to consider pitches whose ratio is a power of 2 as equivalent notes, this is called \u201coctave equivalence\u201d. Equivalent notes with higher or lower pitch are said to be an \u201coctave\u201d above or below the note, for reasons that will be made clear. The pitch of a sound is the frequency of this vibration. \u201cNotes\u201d distinguish sounds by their pitch. In western music, the standard convention is to consider pitches whose ratio is a power of 2 as equivalent notes, this is called \u201coctave equivalence\u201d. Equivalent notes with higher or lower pitch are said to be an \u201coctave\u201d above or below the note, for reasons that will be made clear. \u235d For example, between the pitches 440Hz and 880Hz, \u230a 440 \u00d7 ( 2 * ( \u2373 11 ) \u00f7 12 ) 466 493 523 554 587 622 659 698 739 783 830 \u235d \u230a Floor of \u235d 440\u00d7 440 times \u235d 2* 2 to the power of \u235d (\u237311)\u00f712 the numbers 1,2,3,...,11 divided by 12 Notes are labelled using the seven letters A through G, with sharps (\u266f) and flats (\u266d) to signify the notes in-between by raising or lowering pitch, with redundancy. There are eight letters from A through G back to A, justifying the use of the word \u201coctave\". Starting from C, the twelve notes are C, C\u266f or D\u266d, D, D\u266f or E\u266d, E, F, F\u266f or G\u266d, G, G\u266f or A\u266d, A, A\u266f or B\u266d, and B. A musical scale is a certain selection of these notes, usually spanning an octave. In our case, we will restrict ourselves to using the C major scale, the notes C, D, E, F, G, A, B. The notes of a major scale are usually referred to using an ordinal number from 1st through 7th, or by roman numerals I, II, III, IV, V, VI, VII. A musical scale is a certain selection of these notes, usually spanning an octave. In our case, we will restrict ourselves to using the C major scale, the notes C, D, E, F, G, A, B. The notes of a major scale are usually referred to using an ordinal number from 1st through 7th, or by roman numerals I, II, III, IV, V, VI, VII.","title":"The Theoretical Minimum"},{"location":"course/ch2/bonus/#implementation","text":"From the above discussion, the problem is now clear. Given some starting note, we want to generate movements between the notes with some preference for certain special movements. In the table above, red numerals represent a preferred following note. For example, we want VI to resolve to a V more frequently than to move to a VII or down to a IV . Note that the next note depends only on the previous note, so we can represent this data as a graph. Then, the data is a list of triples, consisting of the starting note, the ending note, and the color (or, priority) of the arrow between those notes. We can lay out this data in the form of a table as follows, where the row represents the starting note and the column represents the ending note. For example, the first row says that, for I as the starting note, we can get to I itself, II, or III with equal preference, 1 1 1. We use 1 for standard movements and 2 for preferred movements. Let\u2019s write try to create this matrix in APL using the reshape \u2374 operator, remembering that if the right argument is not long enough, it will repeat it to fill the required dimensions. M \u2190 7 7 \u2374 1 1 1 0 0 0 0 M 1 1 1 0 0 0 0 1 1 1 0 0 0 0 1 1 1 0 0 0 0 1 1 1 0 0 0 0 1 1 1 0 0 0 0 1 1 1 0 0 0 0 1 1 1 0 0 0 0 \u235d Not quite M \u2190 7 7 \u2374 1 1 1 0 0 0 0 0 M 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 \u235d Closer M \u2190 7 7 \u2374 1 1 0 0 0 0 0 1 M 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 \u235d Getting there M \u2190 7 7 \u2374 1 1 1 0 0 0 1 1 M 1 1 1 0 0 0 1 1 1 1 1 0 0 0 1 1 1 1 1 0 0 0 1 1 1 1 1 0 0 0 1 1 1 1 1 0 0 0 1 1 1 1 1 0 0 0 1 1 1 \u235d Almost exactly what we want Our melodies here are restricted to one octave. If we allowed a wider range, we would allow the 7th to go to the 1st of the next octave and vice versa. M [ 7 ; 1 ] \u2190 0 M [ 1 ; 7 ] \u2190 0 M [ 6 ; 5 ] \u2190 2 M [ 4 ; 3 ] \u2190 2 M [ 2 ; 1 ] \u2190 2 M [ 2 ; 3 ] \u2190 2 M 1 1 1 0 0 0 0 2 1 2 1 0 0 0 1 1 1 1 1 0 0 0 1 2 1 1 1 0 0 0 1 1 1 1 1 0 0 0 1 2 1 1 0 0 0 0 1 1 1 \u235d Perfect The next step is to figure out, given a note, what the next possible notes are. This is very easily done using the matrix multiplication +.\u00d7 operator. This operator is actually the inner product operator . applied to the functions + and \u00d7, see [Inner and Outer product section]. Represent a note with scale degree N as a vector with a 1 in the Nth slot, and 0 otherwise, then matrix multiplication with M represents picking out the Nth row, which as we mentioned above corresponds to selecting the edges in the graph where N is the starting note. Recall that \u23737 is 1 2 3 4 5 6 7, this is equivalent to 2=1 2 3 4 5 6 7 The subsequence notes are I (Preferred), II, III (Preferred), and IV II \u2190 2 =\u2373 7 II 0 1 0 0 0 0 0 II + . \u00d7 M 2 1 2 1 0 0 0 Using this, we want to decide on a movement to another note, weighed by priority. One easy way to achieve this is using the roll ? function, which simulates the rolling of a dice with faces numbering 1 to the right argument. We will roll one die from 1 to 10, or 20 for preferred movements, for every possible following note, and pick the largest result. The subsequent notes are I, II, III, and IV Multiplying by 10 to prepare to roll dice with 10, or 20, faces Notice that ? 0 returns a random real number between 0 and 1 The Grade Down operator \u2352 returns the indices of the elements of the list from largest to smallest Getting the index of the largest roll. This is III. N \u2190 II + . \u00d7 M N 2 1 2 1 0 0 0 N \u00d7 \u2190 10 N 20 10 20 10 0 0 0 NR \u2190 ? N NR 3 8 13 0.9740484038 0.3581395503 0.5245918312 \u2352 100 200 0.1 1 2 1 4 3 \u2352 NR 3 2 1 4 6 5 1 \u2337\u2352 NR 3 ( \u2373 7 ) = 1 \u2337\u2352 NR 0 0 1 0 0 0 0 This is the basic algorithm we will use to generate our melodies. Let\u2019s enclose our note generation algorithm in a direct function and generate a melody. A direct function/dfn (pronounced dee-fun) is defined using {curly braces}. The right argument to the function is called \u2375, and the left \u237a. Statements in a dfn can be separated by a \u22c4 diamond. However, only it stops as soon as a statement which returns a value is evaluated The replicate / operator generates copies of its right argument elements depending on their left arguments In this case, it replicates 0 of everything other than one copy of D 10 { \u237a + \u2375 } 2 12 10 { \u237a + \u2375 \u22c4 \u237a - \u2375 } 2 12 NEXT \u2190 { ( \u2373 7 ) = 1 \u2337\u2352? ( \u2375 \u00d7 10 ) + . \u00d7 M } NEXT 1 0 0 0 0 0 0 0 1 0 0 0 0 0 NOTES \u2190 'CDEFGAB' ( 0 1 0 0 0 0 0 ) / NOTES D MELODY \u2190 { res \u2190 NEXT \u2375 \u22c4 \u235e \u2190 res / NOTES \u22c4 MELODY res } MELODY 1 0 0 0 0 0 0 CDCECEGBGAGGGBBAAGBGEDEDFFEDCDCDECCDCECDECECEFEFEEGEGECEFEDEGBBBGBG This function will run forever, generating notes until interrupted. One way of running the defun for a fixed number of steps is to add a variable representing the number of steps. We will use the left argument \u237a as this variable. MELODY \u2190 { \u237a \u2190 0 \u22c4 \u237a > 20 : '\u266b' \u22c4 res \u2190 NEXT \u2375 \u22c4 \u235e \u2190 res / NOTES \u22c4 ( \u237a + 1 ) MELODY res } MELODY 1 0 0 0 0 0 0 CCDEGAFDCEGFDEDCDCECC \u266b Assigning a value to the left argument \u237a gives a dfns a default left argument. The assignment is only executed if the function is called monadically, that is, if there is no supplied left argument. In this case, the left argument \u237a starts at 0. The generation of the next note, the \"(\u237a+1) MELODY res\" statement, is executed with an incremented left argument. The guarded expression \u237a>20: '\u266b' states that \u266b is returned when \u237a is becomes greater than 20. Since the execution of a dfn stops as soon as a statement returns a value, the code to generate the next note is no longer executed. This is the result we were after! With just a couple lines of APL, we were able to encode general guidelines for melodic composition and write a function generating random melodies according to these principles algorithmically by tracing out a random walk through a graph. These random graph processes are more generally known as Markov Processes and have a much broader range of applicability than our case here. Applications include the Google PageRank algorithm which powered the Google search engine, particle physics simulations of quantum field theory on a lattice, and speech recognition systems. There is clearly so much more we could add to our program, from generating rhythm to accompany the melody, to adding chord progressions and harmony, and there will always be more to add. We will however stop here to enjoy the melodies our program has generated, and leave it up to the interested reader to write their own digital musicians. Some of the generated melodies are included below. Your browser does not support the audio element. Your browser does not support the audio element. Your browser does not support the audio element.","title":"Implementation"},{"location":"course/ch2/part1/","text":"Assignment Allow me to introduce you to a new symbol; the assignment operator: \u2190 Typing the assignment operator \u2190 Prefix method: PREFIX ] Tab method: < - Tab Here is an example of assignment: BANANA \u2190 3 As you can see, there is no output, because assignment does not return anything. This is what's called a shy operation in APL. It is convention to use capital letters for variable names in APL. You can also use lowercase letters, underscores, and numbers (but a variable name cannot start with a number). In addition, you can use the characters \u2206 and \u2359 , called delta and delta underbar . These have no special meaning, and can be used to separate parts of a variable. For example, all of the following are valid variable names: STATS2020 BalanceDiff _Rate_of_change STATS\u22062020 \u2206Balance _ROC S20 \u2206 \u2359R If you try creating a variable that starts with a number, it will cause a SYNTAX ERROR . We can use variables in place of a number. BANANA \u2190 3 BANANA - 1 2 BANANA \u00f7 2 1.5 BANANA \u00d7 BANANA 9 Note that variables keep their value even if you perform operations with them. The only way to change a variable's value is to use the assignment operator again: BANANA \u2190 3 BANANA 3 BANANA + 1 4 BANANA \u2190 0 BANANA 0 BANANA + 1 1 BANANA \u2190 BANANA + 3 BANANA 4 Notice, at the end there we did a common operation: increasing the value of a variable by some amount. This is such a common operation, that the creators of APL introduced a shorthand: BANANA + \u2190 3 This has the same effect as the earlier BANANA \u2190 BANANA + 3 , but may save you some keystrokes. You can also use this same technique with all other APL functions, some more useful than others. With any function F , the expression VAR F\u2190 X will expand to become VAR \u2190 VAR F X . This is often handy to conserve space. Intermediate assignment One more thing. We saw above that assignment was a shy operation. What if we really wanted to see what was assigned to a variable immediately? This is where intermediate assignment, or chaining assignment operators, comes into play. For an example, say we were trying to solve the equation \"one plus the value of five times six\", and we assigned it to a variable. RES \u2190 1 + 5 * 6 ( nothing is displayed ) Now, something seems wrong. Let's see whether we got the result we wanted... \u2395 \u2190 RES \u2190 1 + 5 * 6 15626 Here, we \"assigned\" to an operator called a quad . All this does is print whatever is assigned to it to the screen. The developers of APL picked this because it looks kinda like a (arguably, vertical) computer monitor. Typing the quad operator \u2395 Prefix method: PREFIX L Tab method: [ ] Tab We also realised that we made a mistake somewhere in our calculation (it should be fairly obvious, but let's pretend we have a very complex program here). To debug what's going on, we can use intermediate assignment in the middle of our calculation as follows: RES \u2190 1 + DEBUG \u2190 5 * 6 ( nothing is displayed ) DEBUG 15625 This makes it easy to identify and debug different parts of our code. We could have also done both the assigning and the printing in one line, using our familiar quad operator: RES \u2190 1 + \u2395 \u2190 5 * 6 15625 With this, we can fix our code to work as it should. \u2395 \u2190 RES \u2190 1 + 5 \u00d7 6 31 Nice! Intermediate quad operator It appears as though currently, TryAPL does not support the intermediate quad operator. That is, the above expression RES \u2190 1 + \u2395 \u2190 5*6 will throw a NOT PERMITTED error. This is rather unfortunate but will not be an issue later, when we install the Dyalog IDE to write bigger programs.","title":"2.1 - Assignment"},{"location":"course/ch2/part1/#assignment","text":"Allow me to introduce you to a new symbol; the assignment operator: \u2190 Typing the assignment operator \u2190 Prefix method: PREFIX ] Tab method: < - Tab Here is an example of assignment: BANANA \u2190 3 As you can see, there is no output, because assignment does not return anything. This is what's called a shy operation in APL. It is convention to use capital letters for variable names in APL. You can also use lowercase letters, underscores, and numbers (but a variable name cannot start with a number). In addition, you can use the characters \u2206 and \u2359 , called delta and delta underbar . These have no special meaning, and can be used to separate parts of a variable. For example, all of the following are valid variable names: STATS2020 BalanceDiff _Rate_of_change STATS\u22062020 \u2206Balance _ROC S20 \u2206 \u2359R If you try creating a variable that starts with a number, it will cause a SYNTAX ERROR . We can use variables in place of a number. BANANA \u2190 3 BANANA - 1 2 BANANA \u00f7 2 1.5 BANANA \u00d7 BANANA 9 Note that variables keep their value even if you perform operations with them. The only way to change a variable's value is to use the assignment operator again: BANANA \u2190 3 BANANA 3 BANANA + 1 4 BANANA \u2190 0 BANANA 0 BANANA + 1 1 BANANA \u2190 BANANA + 3 BANANA 4 Notice, at the end there we did a common operation: increasing the value of a variable by some amount. This is such a common operation, that the creators of APL introduced a shorthand: BANANA + \u2190 3 This has the same effect as the earlier BANANA \u2190 BANANA + 3 , but may save you some keystrokes. You can also use this same technique with all other APL functions, some more useful than others. With any function F , the expression VAR F\u2190 X will expand to become VAR \u2190 VAR F X . This is often handy to conserve space.","title":"Assignment"},{"location":"course/ch2/part1/#intermediate-assignment","text":"One more thing. We saw above that assignment was a shy operation. What if we really wanted to see what was assigned to a variable immediately? This is where intermediate assignment, or chaining assignment operators, comes into play. For an example, say we were trying to solve the equation \"one plus the value of five times six\", and we assigned it to a variable. RES \u2190 1 + 5 * 6 ( nothing is displayed ) Now, something seems wrong. Let's see whether we got the result we wanted... \u2395 \u2190 RES \u2190 1 + 5 * 6 15626 Here, we \"assigned\" to an operator called a quad . All this does is print whatever is assigned to it to the screen. The developers of APL picked this because it looks kinda like a (arguably, vertical) computer monitor. Typing the quad operator \u2395 Prefix method: PREFIX L Tab method: [ ] Tab We also realised that we made a mistake somewhere in our calculation (it should be fairly obvious, but let's pretend we have a very complex program here). To debug what's going on, we can use intermediate assignment in the middle of our calculation as follows: RES \u2190 1 + DEBUG \u2190 5 * 6 ( nothing is displayed ) DEBUG 15625 This makes it easy to identify and debug different parts of our code. We could have also done both the assigning and the printing in one line, using our familiar quad operator: RES \u2190 1 + \u2395 \u2190 5 * 6 15625 With this, we can fix our code to work as it should. \u2395 \u2190 RES \u2190 1 + 5 \u00d7 6 31 Nice! Intermediate quad operator It appears as though currently, TryAPL does not support the intermediate quad operator. That is, the above expression RES \u2190 1 + \u2395 \u2190 5*6 will throw a NOT PERMITTED error. This is rather unfortunate but will not be an issue later, when we install the Dyalog IDE to write bigger programs.","title":"Intermediate assignment"},{"location":"course/ch2/part2/","text":"Vectors In the following section, you will play the role of an astronaut aboard the International Space Station . You are currently orbiting the Earth at an altitude of 413km at a speed of 28,013km/h. As part of the maintenance and repair team, you are tasked with guaranteeing the proper functioning of scientific instruments, environmental control and life support systems, power management and distribution systems, and radio communication modules to gather, log, process, and transmit information through the ISS, or back to mission control centers. In brief intervals of time spent waiting between tasks, you enjoy logging temperatures from sensors all around the ship into a small notebook. Unfortunately for you, your notebook\u2019s completely filled, and none of your colleagues seem to share your enthusiasm for data collection. Unfortunately for mission control, you\u2019ve decided to use critical APL machines on board to store your data. Typing as fast as possible without the aid of gravity, you manage to write some data without being caught. TEMPERATURE_PAGE1_YEAR1_DAY2_HOUR7_MINUTE42 \u2190 21.4 TEMPERATURE_PAGE1_YEAR1_DAY2_HOUR8_MINUTE47 \u2190 21.8 TEMPERATURE_PAGE1_YEAR1_DAY2_HOUR10_MINUTE10 \u2190 22.0 TEMPERATURE_PAGE1_YEAR1_DAY2_HOUR12_MINUTE01 \u2190 21.5 TEMPERATURE_PAGE1_YEAR1_DAY2_HOUR14_MINUTE36 \u2190 21.3 TEMPERATURE_PAGE1_YEAR1_DAY2_HOUR16_MINUTE50 \u2190 22.3 TEMPERATURE_PAGE2_YEAR1_DAY2_HOUR18_MINUTE23 \u2190 22.8 TEMPERATURE_PAGE2_YEAR1_DAY2_HOUR19_MINUTE30 \u2190 21.5 TEMPERATURE_PAGE2_YEAR1_DAY2_HOUR21_MINUTE12 \u2190 22.1 TEMPERATURE_PAGE2_YEAR1_DAY3_HOUR7_MINUTE15 \u2190 22.0 TEMPERATURE_PAGE2_YEAR1_DAY3_HOUR8_MINUTE30 \u2190 21.9 TEMPERATURE_PAGE2_YEAR1_DAY3_HOUR9_MINUTE45 \u2190 22.4 This is not the most efficient, or readable, method to input data into your system, and while flicking through your APL notes now crowded with temperatures, you refresh your workspace and instead decide to store your data using vectors. Vectors are one-dimensional ordered collections of elements, straight lines of elements. They are defined by writing values separated by one or more spaces in a line. Since vectors are ordered, it is possible to talk about the element at a specific position, called an index. For example, the first (1) element, the second (2) element, and so on. In notation, elements are obtained by specifying their index in square brackets after the name of the vector. FIBB \u2190 1 1 2 3 5 8 13 21 34 55 \u235d This is a vector KEYA \u2190 9 249 17 2 157 116 227 91 216 65 86 197 99 86 136 192 \u235d This is also a vector \u235d The following are all scalars PRIME \u2190 57 NUMERALS \u2190 413 MCBRT7 \u2190 - 7 *\u00f7 3 EPSILON \u2190 2 * \u00af53 MAGIC \u2190 1597463007 \u235d Note that the decimal separator in APL is the dot PI \u2190 11.001001 \u235d This is a scalar PI \u2190 11 , 001001 \u235d This is a vector LIST \u2190 PRIME 100 NUMERALS MCBRT7 0.6 EPSILON MAGIC 31.5 \u235d this is a vector LIST [ 2 ] 100 LIST [ 2 1 3 ] 100 57 413 INDICES \u2190 2 1 3 LIST [ INDICES ] 100 57 413","title":"2.2 - Vectors"},{"location":"course/ch2/part2/#vectors","text":"In the following section, you will play the role of an astronaut aboard the International Space Station . You are currently orbiting the Earth at an altitude of 413km at a speed of 28,013km/h. As part of the maintenance and repair team, you are tasked with guaranteeing the proper functioning of scientific instruments, environmental control and life support systems, power management and distribution systems, and radio communication modules to gather, log, process, and transmit information through the ISS, or back to mission control centers. In brief intervals of time spent waiting between tasks, you enjoy logging temperatures from sensors all around the ship into a small notebook. Unfortunately for you, your notebook\u2019s completely filled, and none of your colleagues seem to share your enthusiasm for data collection. Unfortunately for mission control, you\u2019ve decided to use critical APL machines on board to store your data. Typing as fast as possible without the aid of gravity, you manage to write some data without being caught. TEMPERATURE_PAGE1_YEAR1_DAY2_HOUR7_MINUTE42 \u2190 21.4 TEMPERATURE_PAGE1_YEAR1_DAY2_HOUR8_MINUTE47 \u2190 21.8 TEMPERATURE_PAGE1_YEAR1_DAY2_HOUR10_MINUTE10 \u2190 22.0 TEMPERATURE_PAGE1_YEAR1_DAY2_HOUR12_MINUTE01 \u2190 21.5 TEMPERATURE_PAGE1_YEAR1_DAY2_HOUR14_MINUTE36 \u2190 21.3 TEMPERATURE_PAGE1_YEAR1_DAY2_HOUR16_MINUTE50 \u2190 22.3 TEMPERATURE_PAGE2_YEAR1_DAY2_HOUR18_MINUTE23 \u2190 22.8 TEMPERATURE_PAGE2_YEAR1_DAY2_HOUR19_MINUTE30 \u2190 21.5 TEMPERATURE_PAGE2_YEAR1_DAY2_HOUR21_MINUTE12 \u2190 22.1 TEMPERATURE_PAGE2_YEAR1_DAY3_HOUR7_MINUTE15 \u2190 22.0 TEMPERATURE_PAGE2_YEAR1_DAY3_HOUR8_MINUTE30 \u2190 21.9 TEMPERATURE_PAGE2_YEAR1_DAY3_HOUR9_MINUTE45 \u2190 22.4 This is not the most efficient, or readable, method to input data into your system, and while flicking through your APL notes now crowded with temperatures, you refresh your workspace and instead decide to store your data using vectors. Vectors are one-dimensional ordered collections of elements, straight lines of elements. They are defined by writing values separated by one or more spaces in a line. Since vectors are ordered, it is possible to talk about the element at a specific position, called an index. For example, the first (1) element, the second (2) element, and so on. In notation, elements are obtained by specifying their index in square brackets after the name of the vector. FIBB \u2190 1 1 2 3 5 8 13 21 34 55 \u235d This is a vector KEYA \u2190 9 249 17 2 157 116 227 91 216 65 86 197 99 86 136 192 \u235d This is also a vector \u235d The following are all scalars PRIME \u2190 57 NUMERALS \u2190 413 MCBRT7 \u2190 - 7 *\u00f7 3 EPSILON \u2190 2 * \u00af53 MAGIC \u2190 1597463007 \u235d Note that the decimal separator in APL is the dot PI \u2190 11.001001 \u235d This is a scalar PI \u2190 11 , 001001 \u235d This is a vector LIST \u2190 PRIME 100 NUMERALS MCBRT7 0.6 EPSILON MAGIC 31.5 \u235d this is a vector LIST [ 2 ] 100 LIST [ 2 1 3 ] 100 57 413 INDICES \u2190 2 1 3 LIST [ INDICES ] 100 57 413","title":"Vectors"},{"location":"course/ch2/part3/","text":"Arithmetic operations on vectors So now we have vectors. You might wonder, why do we want to put a bunch of numbers inside a vector? Let\u2019s say you, the astronaut on the ISS, mistakenly bought a bunch of measuring equipment from America, and only found out later that all the readings are in Fahrenheit. Terrible news! After about 2000 milliseconds of googling about it, you found this formula to convert it into Celsius: Celsius = (Fahrenheit - 32) * 5 / 9 To test it out, you looked up the current room temperature reading, which says 72.1. You did the calculation in APL: ( 5 \u00d7 72.1 - 32 ) \u00f7 9 22.27777778 Great! What\u2019s not so great is that, the temperature sensor has been left generating data for the whole week, and there is a bunch of readings to convert to Celsius. TEMP_F \u2190 71.2 71.4 73.3 73.0 73.1 72.8 72.5 You are going to spend ages plugging the data from this one sensor, and you have 200 of them lying around! Fortunately, APL is designed to deal with data assorted in a vector. You can: \u2395 \u2190 TEMP_CELSIUS \u2190 ( 5 \u00d7 TEMP_F - 32 ) \u00f7 9 21.77777778 21.88888889 22.94444444 22.77777778 22.83333333 22.66666667 22.5 There\u2019s all the Celsius! What\u2019s going on here? In APL, all the basic arithmetic functions apply \u201ccomponent-wise\u201d. If you are familiar with functional programming in Python or maybe Haskell, you might know the map function, which applies another function to each element of a vector. In APL, this is done automatically for all the basic arithmetic functions, if one of the parameters is a scalar: TEMP_F - 32 39.2 39.4 41.3 41 41.1 40.8 40.5 TEMP_F + 32 103.2 103.4 105.3 105 105.1 104.8 104.5 32 - TEMP_F \u00af39.2 \u00af39.4 \u00af41.3 \u00af41 \u00af41.1 \u00af40.8 \u00af40.5 100 + 1 2 3 \u235d The space here takes precedent over + 101 102 103 Now you can do arithmetic to a list of numbers however you like! Just use them in place of a scalar value. After figuring this out, you decided to also check the temperature reading of a sensor outside the ISS: TEMP_OUTSIDE \u2190 118.5 97.1 59.5 30.0 \u00af9.7 \u00af62.3 \u00af113.2 That\u2019s some extreme temperature right there! And it makes you start to wonder, how much temperature difference is the hull bearing? Turns out it\u2019s also very simple in APL: \u2395 \u2190 TEMP_DIFF \u2190 TEMP_OUTSIDE - TEMP_CELSIUS 96.72222222 75.21111111 36.55555556 7.222222222 \u00af32.53333333 \u00af84.96666667 \u00af135.7 So applying a basic arithmetic function to two vectors also just applies them \u201ccomponent-wise\u201d! It just applies this function for the first element on the left and the first element on the right, note the result, then the second element on the left and the second element on the right, and so on. This is analogous to map with a binary operation and two iterators in Python, and zipWith in Haskell. There is one serious caveat though: 1 2 3 - 4 5 LENGTH ERROR : Mismatched left and right argument shapes 1 2 3 - 4 5 \u2227 The length of the vectors must match, APL will not silently truncate the longer one or fill in the difference. The length of the vectors must match, APL will not silently truncate the longer one or fill in the difference. 1 2 3 \u00f7 2 2 0 DOMAIN ERROR : Divide by zero 1 2 3 \u00f7 2 2 0 \u2227 Unfortunately, APL doesn\u2019t point out on which element the error occurred. If you get this kind of error in a complex expression, you can use the intermediate assignment and printout to help debug the situation.","title":"2.3 - Arithmetic operations on vectors"},{"location":"course/ch2/part3/#arithmetic-operations-on-vectors","text":"So now we have vectors. You might wonder, why do we want to put a bunch of numbers inside a vector? Let\u2019s say you, the astronaut on the ISS, mistakenly bought a bunch of measuring equipment from America, and only found out later that all the readings are in Fahrenheit. Terrible news! After about 2000 milliseconds of googling about it, you found this formula to convert it into Celsius: Celsius = (Fahrenheit - 32) * 5 / 9 To test it out, you looked up the current room temperature reading, which says 72.1. You did the calculation in APL: ( 5 \u00d7 72.1 - 32 ) \u00f7 9 22.27777778 Great! What\u2019s not so great is that, the temperature sensor has been left generating data for the whole week, and there is a bunch of readings to convert to Celsius. TEMP_F \u2190 71.2 71.4 73.3 73.0 73.1 72.8 72.5 You are going to spend ages plugging the data from this one sensor, and you have 200 of them lying around! Fortunately, APL is designed to deal with data assorted in a vector. You can: \u2395 \u2190 TEMP_CELSIUS \u2190 ( 5 \u00d7 TEMP_F - 32 ) \u00f7 9 21.77777778 21.88888889 22.94444444 22.77777778 22.83333333 22.66666667 22.5 There\u2019s all the Celsius! What\u2019s going on here? In APL, all the basic arithmetic functions apply \u201ccomponent-wise\u201d. If you are familiar with functional programming in Python or maybe Haskell, you might know the map function, which applies another function to each element of a vector. In APL, this is done automatically for all the basic arithmetic functions, if one of the parameters is a scalar: TEMP_F - 32 39.2 39.4 41.3 41 41.1 40.8 40.5 TEMP_F + 32 103.2 103.4 105.3 105 105.1 104.8 104.5 32 - TEMP_F \u00af39.2 \u00af39.4 \u00af41.3 \u00af41 \u00af41.1 \u00af40.8 \u00af40.5 100 + 1 2 3 \u235d The space here takes precedent over + 101 102 103 Now you can do arithmetic to a list of numbers however you like! Just use them in place of a scalar value. After figuring this out, you decided to also check the temperature reading of a sensor outside the ISS: TEMP_OUTSIDE \u2190 118.5 97.1 59.5 30.0 \u00af9.7 \u00af62.3 \u00af113.2 That\u2019s some extreme temperature right there! And it makes you start to wonder, how much temperature difference is the hull bearing? Turns out it\u2019s also very simple in APL: \u2395 \u2190 TEMP_DIFF \u2190 TEMP_OUTSIDE - TEMP_CELSIUS 96.72222222 75.21111111 36.55555556 7.222222222 \u00af32.53333333 \u00af84.96666667 \u00af135.7 So applying a basic arithmetic function to two vectors also just applies them \u201ccomponent-wise\u201d! It just applies this function for the first element on the left and the first element on the right, note the result, then the second element on the left and the second element on the right, and so on. This is analogous to map with a binary operation and two iterators in Python, and zipWith in Haskell. There is one serious caveat though: 1 2 3 - 4 5 LENGTH ERROR : Mismatched left and right argument shapes 1 2 3 - 4 5 \u2227 The length of the vectors must match, APL will not silently truncate the longer one or fill in the difference. The length of the vectors must match, APL will not silently truncate the longer one or fill in the difference. 1 2 3 \u00f7 2 2 0 DOMAIN ERROR : Divide by zero 1 2 3 \u00f7 2 2 0 \u2227 Unfortunately, APL doesn\u2019t point out on which element the error occurred. If you get this kind of error in a complex expression, you can use the intermediate assignment and printout to help debug the situation.","title":"Arithmetic operations on vectors"},{"location":"course/ch2/part4/","text":"Higher dimensional space The astute reader may have noticed that, although the new data is much more structured, the dates and times of the measurements have been completely forgotten. One solution is to use more vectors to organize this data, here using floating-point decimal encoded format. This format stores the dates as decimal numbers, where the integer part stores the year, month, and day, and the fractional part stores the hour, minute, and second, yyyymmdd.hhmmss. For example, 00010101.074200 is year 0001, month 01, day 01, hour 05, minute 42, and second 00. TEMPERATURE_PAGE1 \u2190 21.4 21.8 22.0 21.5 21.3 22.3 TEMPERATURE_PAGE1_DATE \u2190 00010101.074200 00010101.084700 00010101.101000 00010101.120100 00010101.143600 00010101.165000 TEMPERATURE_PAGE2 \u2190 22.8 21.5 22.1 22.0 21.9 22.4 TEMPERATURE_PAGE2_DATE \u2190 00010101.182300 00010101.193000 00010101.211200 00010102.071500 00010102.083000 00010102.094500 and access dates and times using the same index; TEMPERATURE_PAGE1 [ 2 ] 21.8 TEMPERATURE_PAGE1_DATE [ 2 ] 00010101.084700 60 \u00af10 \u2395DT TEMPERATURE_PAGE1_DATE [ 2 ] \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 1 8 47 0 0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u235d The \u2395DT function allows many different date conversions \u235d The above is read as, Year 1, Day 1, Hour 8, Minute 47 However, this lack of structure is exactly what introducing vectors was supposed to solve; two closely related pieces of information, the time of a measurement and the value of the measurement, are kept separate when they should logically be part of the same collection of data. Measurement data of this form are usually stored in tables, and it is only natural to try to store them in the same manner in a computer system. You decide to start over yet again, and decide to store data in a matrix instead TEMPERATURE_PAGE1 \u2190 6 2 \u2374 21.4 00010101.074200 21.8 00010101.084700 22.0 00010101.101000 21.5 00010101.120100 21.3 00010101.143600 22.3 00010101.165000 TEMPERATURE_PAGE2 \u2190 6 2 \u2374 22.8 00010101.182300 21.5 00010101.193000 22.1 00010102.211200 22.0 00010103.071500 21.9 00010103.083000 22.4 00010103.094500 Matrices are two-dimensional ordered collections of data, they are rectangles of data. They can be created by reshaping (\u2374) a vector. Function Valence The symbol \u2374 actually represents two different functions depending on the manner in which arguments are given. When applied to a single argument, \u2374X, it acts as the shape operator; when two arguments are given one on either side, X\u2374Y, it acts as the reshape operator. The former function is the monadic function associated to the symbol \u2374, and the latter is the dyadic function associated with the symbol \u2374. Many symbols in APL admit both monadic and dyadic functions, take a look at (link to apl vocab sheet) to see the different functions associated to different APL symbols. The reshape operator acts by returning an array whose entries are the entries of its right operand, and whose axes are specified by a vector of integers as its left operand, more concretely, TEMPERATURE_DATA \u2190 21.4 00010101.074200 21.8 00010101.084700 22.0 00010101.101000 21.5 00010101.120100 21.3 00010101.143600 22.3 00010101.165000 6 2 \u2374 TEMPERATURE_DATA 21.4 10101.0742 21.8 10101.0847 22 10101.101 21.5 10101.1201 21.3 10101.1436 22.3 10101.165 \u235d The reshaped matrix has 6 rows and 2 columns turns the vector TEMPERATURE_DATA into a matrix with axes of length six and two, consisting of the entries in TEMPERATURE_DATA. PYRAMID_ENTRIES \u2190 1 1 1 1 1 1 2 2 2 1 1 2 3 2 1 1 2 2 2 1 1 1 1 1 1 1 5 5 \u2374 PYRAMID_ENTRIES \u235d 5 rows and 5 columns 1 1 1 1 1 1 2 2 2 1 1 2 3 2 1 1 2 2 2 1 1 1 1 1 1 ALPHABET \u2190 \u2395A \u235d The \u2395A function return the string 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'. \u235d 'Strings' in APL are vectors of characters, defined using single quotes. 26 25 \u2374 ALPHABET ABCDEFGHIJKLMNOPQRSTUVWXY ZABCDEFGHIJKLMNOPQRSTUVWX YZABCDEFGHIJKLMNOPQRSTUVW XYZABCDEFGHIJKLMNOPQRSTUV WXYZABCDEFGHIJKLMNOPQRSTU VWXYZABCDEFGHIJKLMNOPQRST UVWXYZABCDEFGHIJKLMNOPQRS TUVWXYZABCDEFGHIJKLMNOPQR STUVWXYZABCDEFGHIJKLMNOPQ RSTUVWXYZABCDEFGHIJKLMNOP QRSTUVWXYZABCDEFGHIJKLMNO PQRSTUVWXYZABCDEFGHIJKLMN OPQRSTUVWXYZABCDEFGHIJKLM NOPQRSTUVWXYZABCDEFGHIJKL MNOPQRSTUVWXYZABCDEFGHIJK LMNOPQRSTUVWXYZABCDEFGHIJ KLMNOPQRSTUVWXYZABCDEFGHI JKLMNOPQRSTUVWXYZABCDEFGH IJKLMNOPQRSTUVWXYZABCDEFG HIJKLMNOPQRSTUVWXYZABCDEF GHIJKLMNOPQRSTUVWXYZABCDE FGHIJKLMNOPQRSTUVWXYZABCD EFGHIJKLMNOPQRSTUVWXYZABC DEFGHIJKLMNOPQRSTUVWXYZAB CDEFGHIJKLMNOPQRSTUVWXYZA BCDEFGHIJKLMNOPQRSTUVWXYZ \u235d If the right operand is too short to fill the array, the reshape (dyadic \u2374) operator repeats the right operand's entries The shape (monadic \u2374) operator acts on one array, its right operand, by returning a vector whose entries are the lengths of the axes. TEMPERATURE_DATA \u2190 21.4 00010101.074200 21.8 00010101.084700 22.0 00010101.101000 21.5 00010101.120100 21.3 00010101.143600 22.3 00010101.165000 TEMPERATURE_PAGE1 \u2190 6 2 \u2374 TEMPERATURE_DATA \u2374 TEMPERATURE_PAGE1 6 2 \u2374 100 \u2374 \u2395A 26 Since elements in matrices are ordered along two axes, an element of a matrix can be specified by two position, the row and column. If only a row position (or column position) is specified, the whole row (or column) is returned. WORD_SQUARE \u2190 5 5 \u2374 \"HEARTEMBERABUSERESINTREND\" WORD_SQUARE HEART EMBER ABUSE RESIN TREND WORD_SQUARE [ 1 ;] HEART WORD_SQUARE [; 1 ] HEART WORD_SQUARE [ 5 ;] TREND WORD_SQUARE [; 5 ] TREND TEMPERATURE_DATA1 \u2190 21.4 00010101.074200 21.8 00010101.084700 22.0 00010101.101000 21.5 00010101.120100 21.3 00010101.143600 22.3 00010101.165000 TEMPERATURE_PAGE1 \u2190 6 2 \u2374 TEMPERATURE_DATA1 TEMPERATURE_PAGE1 21.4 10101.0742 21.8 10101.0847 22 10101.101 21.5 10101.1201 21.3 10101.1436 22.3 10101.165 TEMPERATURE_PAGE1 [ 1 ; 1 ] 21.4 TEMPERATURE_PAGE1 [ 1 ; 2 ] 10101.0742 TEMPERATURE_PAGE1 [ 1 ;] 21.4 10101.0742 TEMPERATURE_PAGE1 [ 3 ; 2 ] 10101.101 TEMPERATURE_PAGE2 \u2190 6 2 \u2374 22.8 00010101.182300 21.5 00010101.193000 22.1 00010102.211200 22.0 00010103.071500 21.9 00010103.083000 22.4 00010103.094500 TEMPERATURE_PAGE2 22.8 10101.1823 21.5 10101.193 22.1 10102.2112 22 10103.0715 21.9 10103.083 22.4 10103.0945 TEMPERATURE_PAGE2 [ 1 ; 2 ] 10101.1823 TEMPERATURE_PAGE2 [ 2 ; 2 ] 10101.193 TEMPERATURE_PAGE2 [ 3 ; 2 ] 10102.2112 TEMPERATURE_PAGE2 [; 2 ] 0101.1823 10101.193 10102.2112 10103.0715 10103.083 10103.0945 Multiple numbers can be specified for both row and column indices. ALPHABET \u2190 5 5 \u2374 \u2395A ALPHABET [ 1 ;] ABCDE ALPHABET [ 1 2 3 ;] ABCDE FGHIJ KLMNO ALPHABET [ 1 2 3 ; 1 2 3 ] ABC FGH KLM However, again, the data measurements are separated without reason, the problem that introducing matrices was supposed to solve. Going one dimension further, the data can be arranged in a three-dimensional ordered collection of data: TEMPERATURE_ARRAY \u2190 2 6 2 \u2374 21.4 00010101.074200 21.8 00010101.084700 22.0 00010101.101000 21.5 00010101.120100 21.3 00010101.143600 22.3 00010101.165000 22.8 00010101.182300 21.5 00010101.193000 22.1 00010102.211200 22.0 00010103.071500 21.9 00010103.083000 22.4 00010103.094500 TEMPERATURE_ARRAY 21.4 10101.0742 21.8 10101.0847 22 10101.101 21.5 10101.1201 21.3 10101.1436 22.3 10101.165 22.8 10101.1823 21.5 10101.193 22.1 10102.2112 22 10103.0715 21.9 10103.083 22.4 10103.0945 \u2374 TEMPERATURE_ARRAY 2 6 2 \u2374\u2374 TEMPERATURE_ARRAY 3 TEMPERATURE_ARRAY [ 1 ; 5 ; 2 ] 10101.1436 TEMPERATURE_ARRAY [ 2 ; 5 ; 2 ] 10103.083 TEMPERATURE_ARRAY [ 1 ; 6 ; 1 ] 22.3 TEMPERATURE_ARRAY [ 2 ; 6 ; 1 ] 22.4 TEMPERATURE_ARRAY [ 1 ;;] 21.4 10101.0742 21.8 10101.0847 22 10101.101 21.5 10101.1201 21.3 10101.1436 22.3 10101.165 TEMPERATURE_ARRAY [ 2 ;;] 22.8 10101.1823 21.5 10101.193 22.1 10102.2112 22 10103.0715 21.9 10103.083 22.4 10103.0945 TEMPERATURE_ARRAY [; 1 ;] 21.4 10101.0742 22.8 10101.1823 TEMPERATURE_ARRAY [;; 1 ] 21.4 21.8 22 21.5 21.3 22.3 22.8 21.5 22.1 22 21.9 22.4 Rank The number of axes of an array is called the rank of the array. The arrays we\u2019ve constructed so far are of rank 0 (scalars), rank 1 (vectors), rank 2 (matrices), and rank 3. The maximum rank of an array in Dyalog APL is 15. A useful idiom for getting the rank of an array is the shape of the shape of an array, \u2374\u2374X. Now with your temperature table safely stored in your APL workspace, you can only imagine how many more values you can log and maintain. You excitedly gesture at one of your unimpressed coworkers before you notice you\u2019ve accidentally logged the temperature of the cabin as 226 degrees. Before they have a chance to look at your mistake, you quickly and shamefully change the value. TEMPERATURE_ARRAY 21.4 10101.0742 21.8 10101.0847 226 10101.101 21.5 10101.1201 21.3 10101.1436 22.3 10101.165 22.8 10101.1823 21.5 10101.193 22.1 10102.2112 22 10103.0715 21.9 10103.083 22.4 10103.0945 TEMPERATURE_ARRAY [ 1 ; 3 ; 1 ] \u2190 22.6 TEMPERATURE_ARRAY 21.4 10101.0742 21.8 10101.0847 22.6 10101.101 21.5 10101.1201 21.3 10101.1436 22.3 10101.165 22.8 10101.1823 21.5 10101.193 22.1 10102.2112 22 10103.0715 21.9 10103.083 22.4 10103.0945 That was close! Changing values in arrays acts in the same manner as it does for the case of changing variables, specify the element(s) to change and assign a new value. BOX \u2190 '\u2554\u2550\u2550\u2550\u2557\u2551TRY\u2551\u2560\u2550 \u2550\u2563\u2551APL\u2551\u255a\u2550\u2550\u2550\u255d' BOX \u2190 5 5 \u2374 BOX BOX \u2554\u2550\u2550\u2550\u2557 \u2551 TRY \u2551 \u2560\u2550 \u2550\u2563 \u2551 APL \u2551 \u255a\u2550\u2550\u2550\u255d BOX [ 3 ; 3 ] \u2190 '\u2550' BOX \u2554\u2550\u2550\u2550\u2557 \u2551 TRY \u2551 \u2560\u2550\u2550\u2550\u2563 \u2551 APL \u2551 \u255a\u2550\u2550\u2550\u255d BOX [ 3 ;] \u2560\u2550\u2550\u2550\u2563 BOX [ 3 ;] \u2190 '\u2551 \u2551' BOX \u2554\u2550\u2550\u2550\u2557 \u2551 TRY \u2551 \u2551 \u2551 \u2551 APL \u2551 \u255a\u2550\u2550\u2550\u255d BOX [ 3 ;] \u2190 '\u256c' BOX \u2554\u2550\u2550\u2550\u2557 \u2551 TRY \u2551 \u256c\u256c\u256c\u256c\u256c \u2551 APL \u2551 \u255a\u2550\u2550\u2550\u255d In order to make use of our knowledge of data in APL, a good understanding of how different functions act is needed. This is the topic of the rest of the course. Before moving on, an important function to keep in mind is the monadic index \u2373 functions, which acts on a list, and returns the indices of the array with axes specified by the list. For example, \u2373 5 1 2 3 4 5 \u2373 5 5 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 1 1 \u2502 1 2 \u2502 1 3 \u2502 1 4 \u2502 1 5 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 2 1 \u2502 2 2 \u2502 2 3 \u2502 2 4 \u2502 2 5 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 3 1 \u2502 3 2 \u2502 3 3 \u2502 3 4 \u2502 3 5 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 4 1 \u2502 4 2 \u2502 4 3 \u2502 4 4 \u2502 4 5 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 5 1 \u2502 5 2 \u2502 5 3 \u2502 5 4 \u2502 5 5 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 \u2373 2 2 2 \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 1 1 \u2502 1 1 2 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 2 1 \u2502 1 2 2 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 2 1 1 \u2502 2 1 2 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 2 2 1 \u2502 2 2 2 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518","title":"2.4 - Higher dimensional space"},{"location":"course/ch2/part4/#higher-dimensional-space","text":"The astute reader may have noticed that, although the new data is much more structured, the dates and times of the measurements have been completely forgotten. One solution is to use more vectors to organize this data, here using floating-point decimal encoded format. This format stores the dates as decimal numbers, where the integer part stores the year, month, and day, and the fractional part stores the hour, minute, and second, yyyymmdd.hhmmss. For example, 00010101.074200 is year 0001, month 01, day 01, hour 05, minute 42, and second 00. TEMPERATURE_PAGE1 \u2190 21.4 21.8 22.0 21.5 21.3 22.3 TEMPERATURE_PAGE1_DATE \u2190 00010101.074200 00010101.084700 00010101.101000 00010101.120100 00010101.143600 00010101.165000 TEMPERATURE_PAGE2 \u2190 22.8 21.5 22.1 22.0 21.9 22.4 TEMPERATURE_PAGE2_DATE \u2190 00010101.182300 00010101.193000 00010101.211200 00010102.071500 00010102.083000 00010102.094500 and access dates and times using the same index; TEMPERATURE_PAGE1 [ 2 ] 21.8 TEMPERATURE_PAGE1_DATE [ 2 ] 00010101.084700 60 \u00af10 \u2395DT TEMPERATURE_PAGE1_DATE [ 2 ] \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 1 8 47 0 0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u235d The \u2395DT function allows many different date conversions \u235d The above is read as, Year 1, Day 1, Hour 8, Minute 47 However, this lack of structure is exactly what introducing vectors was supposed to solve; two closely related pieces of information, the time of a measurement and the value of the measurement, are kept separate when they should logically be part of the same collection of data. Measurement data of this form are usually stored in tables, and it is only natural to try to store them in the same manner in a computer system. You decide to start over yet again, and decide to store data in a matrix instead TEMPERATURE_PAGE1 \u2190 6 2 \u2374 21.4 00010101.074200 21.8 00010101.084700 22.0 00010101.101000 21.5 00010101.120100 21.3 00010101.143600 22.3 00010101.165000 TEMPERATURE_PAGE2 \u2190 6 2 \u2374 22.8 00010101.182300 21.5 00010101.193000 22.1 00010102.211200 22.0 00010103.071500 21.9 00010103.083000 22.4 00010103.094500 Matrices are two-dimensional ordered collections of data, they are rectangles of data. They can be created by reshaping (\u2374) a vector. Function Valence The symbol \u2374 actually represents two different functions depending on the manner in which arguments are given. When applied to a single argument, \u2374X, it acts as the shape operator; when two arguments are given one on either side, X\u2374Y, it acts as the reshape operator. The former function is the monadic function associated to the symbol \u2374, and the latter is the dyadic function associated with the symbol \u2374. Many symbols in APL admit both monadic and dyadic functions, take a look at (link to apl vocab sheet) to see the different functions associated to different APL symbols. The reshape operator acts by returning an array whose entries are the entries of its right operand, and whose axes are specified by a vector of integers as its left operand, more concretely, TEMPERATURE_DATA \u2190 21.4 00010101.074200 21.8 00010101.084700 22.0 00010101.101000 21.5 00010101.120100 21.3 00010101.143600 22.3 00010101.165000 6 2 \u2374 TEMPERATURE_DATA 21.4 10101.0742 21.8 10101.0847 22 10101.101 21.5 10101.1201 21.3 10101.1436 22.3 10101.165 \u235d The reshaped matrix has 6 rows and 2 columns turns the vector TEMPERATURE_DATA into a matrix with axes of length six and two, consisting of the entries in TEMPERATURE_DATA. PYRAMID_ENTRIES \u2190 1 1 1 1 1 1 2 2 2 1 1 2 3 2 1 1 2 2 2 1 1 1 1 1 1 1 5 5 \u2374 PYRAMID_ENTRIES \u235d 5 rows and 5 columns 1 1 1 1 1 1 2 2 2 1 1 2 3 2 1 1 2 2 2 1 1 1 1 1 1 ALPHABET \u2190 \u2395A \u235d The \u2395A function return the string 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'. \u235d 'Strings' in APL are vectors of characters, defined using single quotes. 26 25 \u2374 ALPHABET ABCDEFGHIJKLMNOPQRSTUVWXY ZABCDEFGHIJKLMNOPQRSTUVWX YZABCDEFGHIJKLMNOPQRSTUVW XYZABCDEFGHIJKLMNOPQRSTUV WXYZABCDEFGHIJKLMNOPQRSTU VWXYZABCDEFGHIJKLMNOPQRST UVWXYZABCDEFGHIJKLMNOPQRS TUVWXYZABCDEFGHIJKLMNOPQR STUVWXYZABCDEFGHIJKLMNOPQ RSTUVWXYZABCDEFGHIJKLMNOP QRSTUVWXYZABCDEFGHIJKLMNO PQRSTUVWXYZABCDEFGHIJKLMN OPQRSTUVWXYZABCDEFGHIJKLM NOPQRSTUVWXYZABCDEFGHIJKL MNOPQRSTUVWXYZABCDEFGHIJK LMNOPQRSTUVWXYZABCDEFGHIJ KLMNOPQRSTUVWXYZABCDEFGHI JKLMNOPQRSTUVWXYZABCDEFGH IJKLMNOPQRSTUVWXYZABCDEFG HIJKLMNOPQRSTUVWXYZABCDEF GHIJKLMNOPQRSTUVWXYZABCDE FGHIJKLMNOPQRSTUVWXYZABCD EFGHIJKLMNOPQRSTUVWXYZABC DEFGHIJKLMNOPQRSTUVWXYZAB CDEFGHIJKLMNOPQRSTUVWXYZA BCDEFGHIJKLMNOPQRSTUVWXYZ \u235d If the right operand is too short to fill the array, the reshape (dyadic \u2374) operator repeats the right operand's entries The shape (monadic \u2374) operator acts on one array, its right operand, by returning a vector whose entries are the lengths of the axes. TEMPERATURE_DATA \u2190 21.4 00010101.074200 21.8 00010101.084700 22.0 00010101.101000 21.5 00010101.120100 21.3 00010101.143600 22.3 00010101.165000 TEMPERATURE_PAGE1 \u2190 6 2 \u2374 TEMPERATURE_DATA \u2374 TEMPERATURE_PAGE1 6 2 \u2374 100 \u2374 \u2395A 26 Since elements in matrices are ordered along two axes, an element of a matrix can be specified by two position, the row and column. If only a row position (or column position) is specified, the whole row (or column) is returned. WORD_SQUARE \u2190 5 5 \u2374 \"HEARTEMBERABUSERESINTREND\" WORD_SQUARE HEART EMBER ABUSE RESIN TREND WORD_SQUARE [ 1 ;] HEART WORD_SQUARE [; 1 ] HEART WORD_SQUARE [ 5 ;] TREND WORD_SQUARE [; 5 ] TREND TEMPERATURE_DATA1 \u2190 21.4 00010101.074200 21.8 00010101.084700 22.0 00010101.101000 21.5 00010101.120100 21.3 00010101.143600 22.3 00010101.165000 TEMPERATURE_PAGE1 \u2190 6 2 \u2374 TEMPERATURE_DATA1 TEMPERATURE_PAGE1 21.4 10101.0742 21.8 10101.0847 22 10101.101 21.5 10101.1201 21.3 10101.1436 22.3 10101.165 TEMPERATURE_PAGE1 [ 1 ; 1 ] 21.4 TEMPERATURE_PAGE1 [ 1 ; 2 ] 10101.0742 TEMPERATURE_PAGE1 [ 1 ;] 21.4 10101.0742 TEMPERATURE_PAGE1 [ 3 ; 2 ] 10101.101 TEMPERATURE_PAGE2 \u2190 6 2 \u2374 22.8 00010101.182300 21.5 00010101.193000 22.1 00010102.211200 22.0 00010103.071500 21.9 00010103.083000 22.4 00010103.094500 TEMPERATURE_PAGE2 22.8 10101.1823 21.5 10101.193 22.1 10102.2112 22 10103.0715 21.9 10103.083 22.4 10103.0945 TEMPERATURE_PAGE2 [ 1 ; 2 ] 10101.1823 TEMPERATURE_PAGE2 [ 2 ; 2 ] 10101.193 TEMPERATURE_PAGE2 [ 3 ; 2 ] 10102.2112 TEMPERATURE_PAGE2 [; 2 ] 0101.1823 10101.193 10102.2112 10103.0715 10103.083 10103.0945 Multiple numbers can be specified for both row and column indices. ALPHABET \u2190 5 5 \u2374 \u2395A ALPHABET [ 1 ;] ABCDE ALPHABET [ 1 2 3 ;] ABCDE FGHIJ KLMNO ALPHABET [ 1 2 3 ; 1 2 3 ] ABC FGH KLM However, again, the data measurements are separated without reason, the problem that introducing matrices was supposed to solve. Going one dimension further, the data can be arranged in a three-dimensional ordered collection of data: TEMPERATURE_ARRAY \u2190 2 6 2 \u2374 21.4 00010101.074200 21.8 00010101.084700 22.0 00010101.101000 21.5 00010101.120100 21.3 00010101.143600 22.3 00010101.165000 22.8 00010101.182300 21.5 00010101.193000 22.1 00010102.211200 22.0 00010103.071500 21.9 00010103.083000 22.4 00010103.094500 TEMPERATURE_ARRAY 21.4 10101.0742 21.8 10101.0847 22 10101.101 21.5 10101.1201 21.3 10101.1436 22.3 10101.165 22.8 10101.1823 21.5 10101.193 22.1 10102.2112 22 10103.0715 21.9 10103.083 22.4 10103.0945 \u2374 TEMPERATURE_ARRAY 2 6 2 \u2374\u2374 TEMPERATURE_ARRAY 3 TEMPERATURE_ARRAY [ 1 ; 5 ; 2 ] 10101.1436 TEMPERATURE_ARRAY [ 2 ; 5 ; 2 ] 10103.083 TEMPERATURE_ARRAY [ 1 ; 6 ; 1 ] 22.3 TEMPERATURE_ARRAY [ 2 ; 6 ; 1 ] 22.4 TEMPERATURE_ARRAY [ 1 ;;] 21.4 10101.0742 21.8 10101.0847 22 10101.101 21.5 10101.1201 21.3 10101.1436 22.3 10101.165 TEMPERATURE_ARRAY [ 2 ;;] 22.8 10101.1823 21.5 10101.193 22.1 10102.2112 22 10103.0715 21.9 10103.083 22.4 10103.0945 TEMPERATURE_ARRAY [; 1 ;] 21.4 10101.0742 22.8 10101.1823 TEMPERATURE_ARRAY [;; 1 ] 21.4 21.8 22 21.5 21.3 22.3 22.8 21.5 22.1 22 21.9 22.4 Rank The number of axes of an array is called the rank of the array. The arrays we\u2019ve constructed so far are of rank 0 (scalars), rank 1 (vectors), rank 2 (matrices), and rank 3. The maximum rank of an array in Dyalog APL is 15. A useful idiom for getting the rank of an array is the shape of the shape of an array, \u2374\u2374X. Now with your temperature table safely stored in your APL workspace, you can only imagine how many more values you can log and maintain. You excitedly gesture at one of your unimpressed coworkers before you notice you\u2019ve accidentally logged the temperature of the cabin as 226 degrees. Before they have a chance to look at your mistake, you quickly and shamefully change the value. TEMPERATURE_ARRAY 21.4 10101.0742 21.8 10101.0847 226 10101.101 21.5 10101.1201 21.3 10101.1436 22.3 10101.165 22.8 10101.1823 21.5 10101.193 22.1 10102.2112 22 10103.0715 21.9 10103.083 22.4 10103.0945 TEMPERATURE_ARRAY [ 1 ; 3 ; 1 ] \u2190 22.6 TEMPERATURE_ARRAY 21.4 10101.0742 21.8 10101.0847 22.6 10101.101 21.5 10101.1201 21.3 10101.1436 22.3 10101.165 22.8 10101.1823 21.5 10101.193 22.1 10102.2112 22 10103.0715 21.9 10103.083 22.4 10103.0945 That was close! Changing values in arrays acts in the same manner as it does for the case of changing variables, specify the element(s) to change and assign a new value. BOX \u2190 '\u2554\u2550\u2550\u2550\u2557\u2551TRY\u2551\u2560\u2550 \u2550\u2563\u2551APL\u2551\u255a\u2550\u2550\u2550\u255d' BOX \u2190 5 5 \u2374 BOX BOX \u2554\u2550\u2550\u2550\u2557 \u2551 TRY \u2551 \u2560\u2550 \u2550\u2563 \u2551 APL \u2551 \u255a\u2550\u2550\u2550\u255d BOX [ 3 ; 3 ] \u2190 '\u2550' BOX \u2554\u2550\u2550\u2550\u2557 \u2551 TRY \u2551 \u2560\u2550\u2550\u2550\u2563 \u2551 APL \u2551 \u255a\u2550\u2550\u2550\u255d BOX [ 3 ;] \u2560\u2550\u2550\u2550\u2563 BOX [ 3 ;] \u2190 '\u2551 \u2551' BOX \u2554\u2550\u2550\u2550\u2557 \u2551 TRY \u2551 \u2551 \u2551 \u2551 APL \u2551 \u255a\u2550\u2550\u2550\u255d BOX [ 3 ;] \u2190 '\u256c' BOX \u2554\u2550\u2550\u2550\u2557 \u2551 TRY \u2551 \u256c\u256c\u256c\u256c\u256c \u2551 APL \u2551 \u255a\u2550\u2550\u2550\u255d In order to make use of our knowledge of data in APL, a good understanding of how different functions act is needed. This is the topic of the rest of the course. Before moving on, an important function to keep in mind is the monadic index \u2373 functions, which acts on a list, and returns the indices of the array with axes specified by the list. For example, \u2373 5 1 2 3 4 5 \u2373 5 5 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 1 1 \u2502 1 2 \u2502 1 3 \u2502 1 4 \u2502 1 5 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 2 1 \u2502 2 2 \u2502 2 3 \u2502 2 4 \u2502 2 5 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 3 1 \u2502 3 2 \u2502 3 3 \u2502 3 4 \u2502 3 5 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 4 1 \u2502 4 2 \u2502 4 3 \u2502 4 4 \u2502 4 5 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 5 1 \u2502 5 2 \u2502 5 3 \u2502 5 4 \u2502 5 5 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 \u2373 2 2 2 \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 1 1 \u2502 1 1 2 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 2 1 \u2502 1 2 2 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 2 1 1 \u2502 2 1 2 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 2 2 1 \u2502 2 2 2 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518","title":"Higher dimensional space"},{"location":"course/ch2/part5/","text":"Shape This part will cover: - The shape operator - Justifying the shape of a scalar","title":"2.5 - Shape"},{"location":"course/ch2/part5/#shape","text":"This part will cover: - The shape operator - Justifying the shape of a scalar","title":"Shape"},{"location":"course/ch2/part6/","text":"Nested arrays Be warned, elements of arrays can be vectors, or matrices, or arrays of higher rank as well! Reducing the length of the temperature arrays for the sake of the following example, look what happens when we try to create a rank 3 array in the following, TEMPERATURE_DATA1 \u2190 21.4 00010101.074200 21.8 00010101.084700 TEMPERATURE_DATA2 \u2190 22.8 00010101.182300 21.5 00010101.193000 TEMPERATURE_ARRAY \u2190 2 2 2 \u2374 TEMPERATURE_DATA1 TEMPERATURE_DATA2 TEMPERATURE_ARRAY \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 21.4 10101.0742 21.8 10101.0847 \u2502 22.8 10101.1823 21.5 10101.193 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 21.4 10101.0742 21.8 10101.0847 \u2502 22.8 10101.1823 21.5 10101.193 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 21.4 10101.0742 21.8 10101.0847 \u2502 22.8 10101.1823 21.5 10101.193 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 21.4 10101.0742 21.8 10101.0847 \u2502 22.8 10101.1823 21.5 10101.193 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 compared to the expected result, which is 21.4 00010101.074200 21.8 00010101.084700 22.8 00010101.182300 21.5 00010101.193000 Attempting to access the elements of the rank 3 array returns vectors, this is because we\u2019ve accidentally created an array of vectors rather than an array of their elements. \u235d TEMPERATUER_ARRAY can be thought of as \u235d TEMPERATURE_DATA1 TEMPERATURE_DATA2 \u235d TEMPERATURE_DATA1 TEMPERATURE_DATA2 \u235d \u235d TEMPERATURE_DATA1 TEMPERATURE_DATA2 \u235d TEMPERATURE_DATA1 TEMPERATURE_DATA2 TEMPERATURE_ARRAY [ 1 ; 1 ; 1 ] \u235d the vector TEMPERATURE_DATA1 21.4 00010101.074200 21.8 00010101.084700 TEMPERATURE_ARRAY [ 2 ; 1 ; 1 ] \u235d the vector TEMPERATURE_DATA1 21.4 00010101.074200 21.8 00010101.084700 TEMPERATURE_ARRAY [ 1 ; 2 ; 1 ] \u235d the vector TEMPERATURE_DATA1 21.4 00010101.074200 21.8 00010101.084700 TEMPERATURE_ARRAY [ 2 ; 2 ; 1 ] \u235d the vector TEMPERATURE_DATA1 21.4 00010101.074200 21.8 00010101.084700 TEMPERATURE_ARRAY [ 1 ; 1 ; 2 ] \u235d the vector TEMPERATURE_DATA2 22.8 00010101.182300 21.5 00010101.193000 TEMPERATURE_ARRAY [ 2 ; 1 ; 2 ] \u235d the vector TEMPERATURE_DATA2 22.8 00010101.182300 21.5 00010101.193000 TEMPERATURE_ARRAY [ 1 ; 2 ; 2 ] \u235d the vector TEMPERATURE_DATA2 22.8 00010101.182300 21.5 00010101.193000 TEMPERATURE_ARRAY [ 2 ; 2 ; 2 ] \u235d the vector TEMPERATURE_DATA2 22.8 00010101.182300 21.5 00010101.193000 If we replace TEMPERATURE_DATA1 and TEMPERATURE_DATA2 with scalars, the situation is a bit more clear. ARRAY \u2190 2 2 2 \u2374 1 2 ARRAY 1 2 1 2 1 2 1 2 ARRAY [ 1 ; 1 ; 1 ] 1 ARRAY [ 2 ; 1 ; 1 ] 1 ARRAY [ 1 ; 2 ; 1 ] 1 ARRAY [ 2 ; 2 ; 1 ] 1 ARRAY [ 1 ; 1 ; 2 ] 2 ARRAY [ 2 ; 1 ; 2 ] 2 ARRAY [ 1 ; 2 ; 2 ] 2 ARRAY [ 2 ; 2 ; 2 ] 2 The monadic ravel operator , can be used to \u201cunravel\u201d a matrix into a vector of its elements in left-right top-down order, called ravel order. Dyadically, the catenate , function glues two arrays together along a common axis. ARRAY \u2190 2 2 2 \u2374 1 2 3 4 5 6 7 8 ARRAY 1 2 3 4 5 6 7 8 , ARRAY 1 2 3 4 5 6 7 8 ARRAY , 1 1 2 1 3 4 1 5 6 1 7 8 1 ARRAY , ARRAY 1 2 1 2 3 4 3 4 5 6 5 6 7 8 7 8 TEMPERATURE_DATA1 \u2190 21.4 00010101.074200 21.8 00010101.084700 TEMPERATURE_DATA2 \u2190 22.8 00010101.182300 21.5 00010101.193000 TEMPERATURE_ARRAY \u2190 2 2 2 \u2374 TEMPERATURE_DATA1 , TEMPERATURE_DATA2 21.4 10101.0742 21.8 10101.0847 22.8 10101.1823 21.5 10101.193 When dealing with nested arrays, useful functions to keep in mind are the monadic \u2261 depth, and the monadic \u2262 tally. \u2261 TEMPERATURE_ARRAY \u235d TEMPERATURE_ARRAY is an array of arrays, it has depth 2 2 \u2261 10 \u235d The depth of a scalar is 0 0 \u2373 10 \u235d The monadic \u2373 index operator generates numbers up to its right argument 1 2 3 4 5 6 7 8 9 10 \u2261\u2373 10 \u235d The depth of a vector of scalars is 1 1 \u2261 10 10 \u2374 \u2373 10 \u235d The depth of a matrix of scalars is 1 1 nested \u2190 2 2 \u2374 ( \u2373 3 ) ( ' ' ) ( ' ' ) ( 2 2 \u2374 ( ' ' ) ( \u2373 3 ) ( 2 2 \u2374 ( \u2373 3 ) ( ' ' ) ( ' ' ) ( \u2373 2 )) ( ' ' )) nested \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 3 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502 \u2502\u2502 \u2502 1 2 3 \u2502\u2502 \u2502 \u2502\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502 \u2502\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\u2502 \u2502\u2502 \u2502 \u2502\u2502\u2502 1 2 3 \u2502 \u2502\u2502 \u2502\u2502 \u2502 \u2502\u2502\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 \u2502 \u2502\u2502\u2502 \u2502 1 2 \u2502\u2502 \u2502\u2502 \u2502 \u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\u2502 \u2502\u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2261 nested \u235d We might expect a depth of 4 here, but for arrays with elements with differing depths, the depth is labelled as negative \u00af4 \u2374 nested \u235d Notice that the nested elements in the matrix count as scalar elements. 2 2 Boxing The ]Box user command controls how array output is displayed nested \u2190 2 2 \u2374 ( \u2373 3 ) ( ' ' ) ( ' ' ) ( 2 2 \u2374 ( ' ' ) ( \u2373 3 ) ( 2 2 \u2374 ( \u2373 3 ) ( ' ' ) ( ' ' ) ( \u2373 2 )) ( ' ' )) nested 1 2 3 1 2 3 1 2 3 1 2 ] Box on Was OFF nested \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 3 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502 \u2502\u2502 \u2502 1 2 3 \u2502\u2502 \u2502 \u2502\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502 \u2502\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\u2502 \u2502\u2502 \u2502 \u2502\u2502\u2502 1 2 3 \u2502 \u2502\u2502 \u2502\u2502 \u2502 \u2502\u2502\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 \u2502 \u2502\u2502\u2502 \u2502 1 2 \u2502\u2502 \u2502\u2502 \u2502 \u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\u2502 \u2502\u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 The monadic tally function \u2262 returns the number of rows of an array. \u2262 10 1 \u2262\u2373 10 10 \u2262 10 20 \u2374 \u2373 30 10 nested \u2190 2 2 \u2374 ( \u2373 3 ) ( ' ' ) ( ' ' ) ( 2 2 \u2374 ( ' ' ) ( \u2373 3 ) ( 2 2 \u2374 ( \u2373 3 ) ( ' ' ) ( ' ' ) ( \u2373 2 )) ( ' ' )) \u2262 nested 2 In order to create a nested array out of another array, the enclose \u2282 operator can be used. \u2373 10 1 2 3 4 5 6 7 8 9 10 \u2282\u2373 10 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 3 4 5 6 7 8 9 10 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 In order to pick information out of nested arrays, the dyadic pick \u2283 operator allows indexing a nested arrays using a nested left array. Monadically, it picks the first element of the array. school \u2190 2 1 \u2374 ( 'MATH' ( '101' 30 ( 'COMPETED' )) ( '102' 37 ( 'CANCELLED' ))) ( 'CS' ( '101' 53 ( 'COMPETED' )) ( '102' 28 ( 'COMPLETED' )) ( '103' 20 ( 'IN PROGRESS' ))) school \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502\u2502 MATH \u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502 \u2502\u2502 \u2502\u2502 101 \u2502 30 \u2502 COMPETED \u2502\u2502\u2502 102 \u2502 37 \u2502 CANCELLED \u2502\u2502 \u2502 \u2502\u2502 \u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502\u250c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502\u2502 CS \u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u2502 \u2502\u2502 \u2502\u2502 101 \u2502 53 \u2502 COMPETED \u2502\u2502\u2502 102 \u2502 28 \u2502 COMPLETED \u2502\u2502\u2502 103 \u2502 20 \u2502 IN PROGRESS \u2502\u2502\u2502 \u2502\u2502 \u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2502 \u2502\u2514\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2261 school \u00af4 \u2262 school 2 school [ 1 ] RANK ERROR school [ 1 ] \u2227 \u2283 school \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 MATH \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502 \u2502\u2502 CLASS 1 \u2502 30 \u2502 COMPETED \u2502\u2502\u2502 CLASS 2 \u2502 37 \u2502 CANCELLED \u2502\u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u235d Nested left arrays are required ( 1 1 ) \u2283 school RANK ERROR ( 1 1 ) \u2283 school \u2227 ( \u2282 ( 1 1 )) \u2283 school \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 MATH \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502 \u2502\u2502 CLASS 1 \u2502 30 \u2502 COMPETED \u2502\u2502\u2502 CLASS 2 \u2502 37 \u2502 CANCELLED \u2502\u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ( \u2282 ( 2 1 )) \u2283 school \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 COMPUTER SCIENCE \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502 \u2502\u2502 CLASS 1 \u2502 53 \u2502 COMPETED \u2502\u2502\u2502 CLASS 2 \u2502 28 \u2502 COMPLETED \u2502\u2502\u2502 CLASS 3 \u2502 20 \u2502 IN PROGRESS \u2502\u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 (( 1 1 ) ( 1 )) \u2283 school MATH (( 2 1 ) ( 2 )) \u2283 school \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 CLASS 1 \u2502 53 \u2502 COMPETED \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 (( 2 1 ) ( 2 ) ( 3 )) \u2283 school COMPETED Using nested arrays allows applying functions to arrays as if they were scalars, more on this in Chapter 4.","title":"2.6 - Nested arrays"},{"location":"course/ch2/part6/#nested-arrays","text":"Be warned, elements of arrays can be vectors, or matrices, or arrays of higher rank as well! Reducing the length of the temperature arrays for the sake of the following example, look what happens when we try to create a rank 3 array in the following, TEMPERATURE_DATA1 \u2190 21.4 00010101.074200 21.8 00010101.084700 TEMPERATURE_DATA2 \u2190 22.8 00010101.182300 21.5 00010101.193000 TEMPERATURE_ARRAY \u2190 2 2 2 \u2374 TEMPERATURE_DATA1 TEMPERATURE_DATA2 TEMPERATURE_ARRAY \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 21.4 10101.0742 21.8 10101.0847 \u2502 22.8 10101.1823 21.5 10101.193 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 21.4 10101.0742 21.8 10101.0847 \u2502 22.8 10101.1823 21.5 10101.193 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 21.4 10101.0742 21.8 10101.0847 \u2502 22.8 10101.1823 21.5 10101.193 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 21.4 10101.0742 21.8 10101.0847 \u2502 22.8 10101.1823 21.5 10101.193 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 compared to the expected result, which is 21.4 00010101.074200 21.8 00010101.084700 22.8 00010101.182300 21.5 00010101.193000 Attempting to access the elements of the rank 3 array returns vectors, this is because we\u2019ve accidentally created an array of vectors rather than an array of their elements. \u235d TEMPERATUER_ARRAY can be thought of as \u235d TEMPERATURE_DATA1 TEMPERATURE_DATA2 \u235d TEMPERATURE_DATA1 TEMPERATURE_DATA2 \u235d \u235d TEMPERATURE_DATA1 TEMPERATURE_DATA2 \u235d TEMPERATURE_DATA1 TEMPERATURE_DATA2 TEMPERATURE_ARRAY [ 1 ; 1 ; 1 ] \u235d the vector TEMPERATURE_DATA1 21.4 00010101.074200 21.8 00010101.084700 TEMPERATURE_ARRAY [ 2 ; 1 ; 1 ] \u235d the vector TEMPERATURE_DATA1 21.4 00010101.074200 21.8 00010101.084700 TEMPERATURE_ARRAY [ 1 ; 2 ; 1 ] \u235d the vector TEMPERATURE_DATA1 21.4 00010101.074200 21.8 00010101.084700 TEMPERATURE_ARRAY [ 2 ; 2 ; 1 ] \u235d the vector TEMPERATURE_DATA1 21.4 00010101.074200 21.8 00010101.084700 TEMPERATURE_ARRAY [ 1 ; 1 ; 2 ] \u235d the vector TEMPERATURE_DATA2 22.8 00010101.182300 21.5 00010101.193000 TEMPERATURE_ARRAY [ 2 ; 1 ; 2 ] \u235d the vector TEMPERATURE_DATA2 22.8 00010101.182300 21.5 00010101.193000 TEMPERATURE_ARRAY [ 1 ; 2 ; 2 ] \u235d the vector TEMPERATURE_DATA2 22.8 00010101.182300 21.5 00010101.193000 TEMPERATURE_ARRAY [ 2 ; 2 ; 2 ] \u235d the vector TEMPERATURE_DATA2 22.8 00010101.182300 21.5 00010101.193000 If we replace TEMPERATURE_DATA1 and TEMPERATURE_DATA2 with scalars, the situation is a bit more clear. ARRAY \u2190 2 2 2 \u2374 1 2 ARRAY 1 2 1 2 1 2 1 2 ARRAY [ 1 ; 1 ; 1 ] 1 ARRAY [ 2 ; 1 ; 1 ] 1 ARRAY [ 1 ; 2 ; 1 ] 1 ARRAY [ 2 ; 2 ; 1 ] 1 ARRAY [ 1 ; 1 ; 2 ] 2 ARRAY [ 2 ; 1 ; 2 ] 2 ARRAY [ 1 ; 2 ; 2 ] 2 ARRAY [ 2 ; 2 ; 2 ] 2 The monadic ravel operator , can be used to \u201cunravel\u201d a matrix into a vector of its elements in left-right top-down order, called ravel order. Dyadically, the catenate , function glues two arrays together along a common axis. ARRAY \u2190 2 2 2 \u2374 1 2 3 4 5 6 7 8 ARRAY 1 2 3 4 5 6 7 8 , ARRAY 1 2 3 4 5 6 7 8 ARRAY , 1 1 2 1 3 4 1 5 6 1 7 8 1 ARRAY , ARRAY 1 2 1 2 3 4 3 4 5 6 5 6 7 8 7 8 TEMPERATURE_DATA1 \u2190 21.4 00010101.074200 21.8 00010101.084700 TEMPERATURE_DATA2 \u2190 22.8 00010101.182300 21.5 00010101.193000 TEMPERATURE_ARRAY \u2190 2 2 2 \u2374 TEMPERATURE_DATA1 , TEMPERATURE_DATA2 21.4 10101.0742 21.8 10101.0847 22.8 10101.1823 21.5 10101.193 When dealing with nested arrays, useful functions to keep in mind are the monadic \u2261 depth, and the monadic \u2262 tally. \u2261 TEMPERATURE_ARRAY \u235d TEMPERATURE_ARRAY is an array of arrays, it has depth 2 2 \u2261 10 \u235d The depth of a scalar is 0 0 \u2373 10 \u235d The monadic \u2373 index operator generates numbers up to its right argument 1 2 3 4 5 6 7 8 9 10 \u2261\u2373 10 \u235d The depth of a vector of scalars is 1 1 \u2261 10 10 \u2374 \u2373 10 \u235d The depth of a matrix of scalars is 1 1 nested \u2190 2 2 \u2374 ( \u2373 3 ) ( ' ' ) ( ' ' ) ( 2 2 \u2374 ( ' ' ) ( \u2373 3 ) ( 2 2 \u2374 ( \u2373 3 ) ( ' ' ) ( ' ' ) ( \u2373 2 )) ( ' ' )) nested \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 3 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502 \u2502\u2502 \u2502 1 2 3 \u2502\u2502 \u2502 \u2502\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502 \u2502\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\u2502 \u2502\u2502 \u2502 \u2502\u2502\u2502 1 2 3 \u2502 \u2502\u2502 \u2502\u2502 \u2502 \u2502\u2502\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 \u2502 \u2502\u2502\u2502 \u2502 1 2 \u2502\u2502 \u2502\u2502 \u2502 \u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\u2502 \u2502\u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2261 nested \u235d We might expect a depth of 4 here, but for arrays with elements with differing depths, the depth is labelled as negative \u00af4 \u2374 nested \u235d Notice that the nested elements in the matrix count as scalar elements. 2 2 Boxing The ]Box user command controls how array output is displayed nested \u2190 2 2 \u2374 ( \u2373 3 ) ( ' ' ) ( ' ' ) ( 2 2 \u2374 ( ' ' ) ( \u2373 3 ) ( 2 2 \u2374 ( \u2373 3 ) ( ' ' ) ( ' ' ) ( \u2373 2 )) ( ' ' )) nested 1 2 3 1 2 3 1 2 3 1 2 ] Box on Was OFF nested \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 3 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502 \u2502\u2502 \u2502 1 2 3 \u2502\u2502 \u2502 \u2502\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502 \u2502\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\u2502 \u2502\u2502 \u2502 \u2502\u2502\u2502 1 2 3 \u2502 \u2502\u2502 \u2502\u2502 \u2502 \u2502\u2502\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 \u2502 \u2502\u2502\u2502 \u2502 1 2 \u2502\u2502 \u2502\u2502 \u2502 \u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\u2502 \u2502\u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 The monadic tally function \u2262 returns the number of rows of an array. \u2262 10 1 \u2262\u2373 10 10 \u2262 10 20 \u2374 \u2373 30 10 nested \u2190 2 2 \u2374 ( \u2373 3 ) ( ' ' ) ( ' ' ) ( 2 2 \u2374 ( ' ' ) ( \u2373 3 ) ( 2 2 \u2374 ( \u2373 3 ) ( ' ' ) ( ' ' ) ( \u2373 2 )) ( ' ' )) \u2262 nested 2 In order to create a nested array out of another array, the enclose \u2282 operator can be used. \u2373 10 1 2 3 4 5 6 7 8 9 10 \u2282\u2373 10 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 3 4 5 6 7 8 9 10 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 In order to pick information out of nested arrays, the dyadic pick \u2283 operator allows indexing a nested arrays using a nested left array. Monadically, it picks the first element of the array. school \u2190 2 1 \u2374 ( 'MATH' ( '101' 30 ( 'COMPETED' )) ( '102' 37 ( 'CANCELLED' ))) ( 'CS' ( '101' 53 ( 'COMPETED' )) ( '102' 28 ( 'COMPLETED' )) ( '103' 20 ( 'IN PROGRESS' ))) school \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502\u2502 MATH \u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502 \u2502\u2502 \u2502\u2502 101 \u2502 30 \u2502 COMPETED \u2502\u2502\u2502 102 \u2502 37 \u2502 CANCELLED \u2502\u2502 \u2502 \u2502\u2502 \u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502\u250c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502\u2502 CS \u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u2502 \u2502\u2502 \u2502\u2502 101 \u2502 53 \u2502 COMPETED \u2502\u2502\u2502 102 \u2502 28 \u2502 COMPLETED \u2502\u2502\u2502 103 \u2502 20 \u2502 IN PROGRESS \u2502\u2502\u2502 \u2502\u2502 \u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2502 \u2502\u2514\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2261 school \u00af4 \u2262 school 2 school [ 1 ] RANK ERROR school [ 1 ] \u2227 \u2283 school \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 MATH \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502 \u2502\u2502 CLASS 1 \u2502 30 \u2502 COMPETED \u2502\u2502\u2502 CLASS 2 \u2502 37 \u2502 CANCELLED \u2502\u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u235d Nested left arrays are required ( 1 1 ) \u2283 school RANK ERROR ( 1 1 ) \u2283 school \u2227 ( \u2282 ( 1 1 )) \u2283 school \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 MATH \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502 \u2502\u2502 CLASS 1 \u2502 30 \u2502 COMPETED \u2502\u2502\u2502 CLASS 2 \u2502 37 \u2502 CANCELLED \u2502\u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ( \u2282 ( 2 1 )) \u2283 school \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 COMPUTER SCIENCE \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502 \u2502\u2502 CLASS 1 \u2502 53 \u2502 COMPETED \u2502\u2502\u2502 CLASS 2 \u2502 28 \u2502 COMPLETED \u2502\u2502\u2502 CLASS 3 \u2502 20 \u2502 IN PROGRESS \u2502\u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 (( 1 1 ) ( 1 )) \u2283 school MATH (( 2 1 ) ( 2 )) \u2283 school \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 CLASS 1 \u2502 53 \u2502 COMPETED \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 (( 2 1 ) ( 2 ) ( 3 )) \u2283 school COMPETED Using nested arrays allows applying functions to arrays as if they were scalars, more on this in Chapter 4.","title":"Nested arrays"},{"location":"course/ch2/read/","text":"Read exercises For each of the following exercises, try to figure out what the input will produce in the TryAPL terminal. Check your answers by opening the \"Output\" tab. If you think an error will occur, try to predict which error it will be and where the arrow will point to. The exercises are not checked or graded: use them to check your knowledge!","title":"2.R - Read exercises"},{"location":"course/ch2/read/#read-exercises","text":"For each of the following exercises, try to figure out what the input will produce in the TryAPL terminal. Check your answers by opening the \"Output\" tab. If you think an error will occur, try to predict which error it will be and where the arrow will point to. The exercises are not checked or graded: use them to check your knowledge!","title":"Read exercises"},{"location":"course/ch2/summary/","text":"Function index Here is a table of symbols we have used and how to type them in TryAPL. It might be useful to review this page as you are doing the read and write exercises in the next sections. New functions Symbol Name Function Key combination \u2190 Assignment operator Assigning variables < - Tab \u2395 Quad Printing PREFIX L Old functions Symbol Name Function Key combination + Plus Addition + - Minus Subtraction - \u00d7 Times Multiplication PREFIX - \u00f7 Divide Division PREFIX = * Power Exponentiation * \u00af Negative sign Negation of a number PREFIX 2 \u235d Lamp Comment PREFIX ,","title":"2.S - Summary"},{"location":"course/ch2/summary/#function-index","text":"Here is a table of symbols we have used and how to type them in TryAPL. It might be useful to review this page as you are doing the read and write exercises in the next sections.","title":"Function index"},{"location":"course/ch2/summary/#new-functions","text":"Symbol Name Function Key combination \u2190 Assignment operator Assigning variables < - Tab \u2395 Quad Printing PREFIX L","title":"New functions"},{"location":"course/ch2/summary/#old-functions","text":"Symbol Name Function Key combination + Plus Addition + - Minus Subtraction - \u00d7 Times Multiplication PREFIX - \u00f7 Divide Division PREFIX = * Power Exponentiation * \u00af Negative sign Negation of a number PREFIX 2 \u235d Lamp Comment PREFIX ,","title":"Old functions"},{"location":"course/ch2/write/","text":"Write exercises Submit APL code for the following exercises. Your submissions are graded using TMC. Make sure to log in to be able to submit your work! Remember, you can test out ideas and develop you solution at TryAPL before submitting it here. You can submit as many solutions as you like. If you submit a correct solution at least once, you will receive points on the TMC server and be able to see the model solution. If the write problem is red, it is unsolved. If it it green, you have solved it and received points for it on the server.","title":"2.W - Write exercises"},{"location":"course/ch2/write/#write-exercises","text":"Submit APL code for the following exercises. Your submissions are graded using TMC. Make sure to log in to be able to submit your work! Remember, you can test out ideas and develop you solution at TryAPL before submitting it here. You can submit as many solutions as you like. If you submit a correct solution at least once, you will receive points on the TMC server and be able to see the model solution. If the write problem is red, it is unsolved. If it it green, you have solved it and received points for it on the server.","title":"Write exercises"},{"location":"course/ch3/bonus/","text":"Bonus content: Computer Graphics Did you know APL was used to make graphics for the original TRON movie? Judson Rosebush, one of the founders of the computer animation studio Digital Effects, developed \"Visions\"; a library of APL functions intended for generating computer graphics. It allowed the manipulation of polygons in three-dimensional space and compute perspective transformations. The company created several animated sequences for the movie, including animating the polyhedral character \"Bit\" who could only convey one bit of information, answering yes or no questions. Here's a quote from Jeffrey Kleinster, one of the co-founders of Digital Effects, in an interview published in \u201cCG 101\u201d: \"Our original setup was a 1200-baud modem connection to an Amdahl V6 running A Programming language (APL) in Bethesda, Maryland, using a Tektronix display to preview wireframes. (Polygons refreshed at one per second\u2014that's one polygon per second!)\u2026\" In this section, we will write our own ray marcher to render out 3D environments entirely in APL. The advantages of an array-based language for computer graphics will be immediately seen. In very simple terms, light rays travel from light sources, potentially reflecting off of surfaces, some of which eventually reach light detectors. For example, when admiring a nice forest view, rays of light from the sun get absorbed and emitted at different frequencies by leaves, some of which then make their way to your retina. The only rays of light that affect the final image are the ones which finally reach detectors. For the purposes of computation, light rays are usually traced from from detectors to the sources. This is entirely equivalent to tracing light from sources to detectors, as long as the assumptions of geometric optics hold, which are almost universally assumed in computer graphics. The procedure we will use is as follows. We place a camera at a certain position relative to a 3D environment, and send out rays from the camera for every pixel in the final rendered image in the direction of that pixel. We then calculate the intersection of each of our rays with the environment, and get the directions from the points to the light source of our scene. We finally calculate the shading for the specific points of the environment, by comparing the vector orthogonal to the surface at that point, the normal vector, to the direction of the light source. We will ignore lighting falloff and shadows in our rendering for simplicity. For the first step, we create a vector called camera which stores the camera position. We refer to the first coordinate as the x coordinate, the second as the y coordinate, and the third as the z coordinate. We imagine the camera is facing the positive z direction, towards (0 0 1). camera \u2190 0 0 \u00af10 We then create an array to hold pixel coordinates, in this case a 300\u00d7300 image. \u2373 10 10 \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 1 \u2502 1 2 \u2502 1 3 \u2502 1 4 \u2502 1 5 \u2502 1 6 \u2502 1 7 \u2502 1 8 \u2502 1 9 \u2502 1 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 2 1 \u2502 2 2 \u2502 2 3 \u2502 2 4 \u2502 2 5 \u2502 2 6 \u2502 2 7 \u2502 2 8 \u2502 2 9 \u2502 2 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 3 1 \u2502 3 2 \u2502 3 3 \u2502 3 4 \u2502 3 5 \u2502 3 6 \u2502 3 7 \u2502 3 8 \u2502 3 9 \u2502 3 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 4 1 \u2502 4 2 \u2502 4 3 \u2502 4 4 \u2502 4 5 \u2502 4 6 \u2502 4 7 \u2502 4 8 \u2502 4 9 \u2502 4 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 5 1 \u2502 5 2 \u2502 5 3 \u2502 5 4 \u2502 5 5 \u2502 5 6 \u2502 5 7 \u2502 5 8 \u2502 5 9 \u2502 5 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 6 1 \u2502 6 2 \u2502 6 3 \u2502 6 4 \u2502 6 5 \u2502 6 6 \u2502 6 7 \u2502 6 8 \u2502 6 9 \u2502 6 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 7 1 \u2502 7 2 \u2502 7 3 \u2502 7 4 \u2502 7 5 \u2502 7 6 \u2502 7 7 \u2502 7 8 \u2502 7 9 \u2502 7 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 8 1 \u2502 8 2 \u2502 8 3 \u2502 8 4 \u2502 8 5 \u2502 8 6 \u2502 8 7 \u2502 8 8 \u2502 8 9 \u2502 8 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 9 1 \u2502 9 2 \u2502 9 3 \u2502 9 4 \u2502 9 5 \u2502 9 6 \u2502 9 7 \u2502 9 8 \u2502 9 9 \u2502 9 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 10 1 \u2502 10 2 \u2502 10 3 \u2502 10 4 \u2502 10 5 \u2502 10 6 \u2502 10 7 \u2502 10 8 \u2502 10 9 \u2502 10 10 \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 pxl_coords \u2190 \u2373 300 300 If we picture the image as being in front of the camera, with the camera facing the center of the image, we divide the values by the width/height, and shift them so that the vector 0 0 is at the center. ( \u2373 5 5 ) \u00f7 5 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0.2 0.2 \u2502 0.2 0.4 \u2502 0.2 0.6 \u2502 0.2 0.8 \u2502 0.2 1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0.4 0.2 \u2502 0.4 0.4 \u2502 0.4 0.6 \u2502 0.4 0.8 \u2502 0.4 1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0.6 0.2 \u2502 0.6 0.4 \u2502 0.6 0.6 \u2502 0.6 0.8 \u2502 0.6 1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0.8 0.2 \u2502 0.8 0.4 \u2502 0.8 0.6 \u2502 0.8 0.8 \u2502 0.8 1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 0.2 \u2502 1 0.4 \u2502 1 0.6 \u2502 1 0.8 \u2502 1 1 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 (( \u2373 5 5 ) \u00f7 5 ) -\u2282 0.6 0.6 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u00af0.4 \u00af0.4 \u2502 \u00af0.4 \u00af0.2 \u2502 \u00af0.4 0 \u2502 \u00af0.4 0.2 \u2502 \u00af0.4 0.4 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u00af0.2 \u00af0.4 \u2502 \u00af0.2 \u00af0.2 \u2502 \u00af0.2 0 \u2502 \u00af0.2 0.2 \u2502 \u00af0.2 0.4 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 \u00af0.4 \u2502 0 \u00af0.2 \u2502 0 0 \u2502 0 0.2 \u2502 0 0.4 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0.2 \u00af0.4 \u2502 0.2 \u00af0.2 \u2502 0.2 0 \u2502 0.2 0.2 \u2502 0.2 0.4 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0.4 \u00af0.4 \u2502 0.4 \u00af0.2 \u2502 0.4 0 \u2502 0.4 0.2 \u2502 0.4 0.4 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 pxl_directions \u2190 ( pxl_coords \u00f7\u2262 pxl_coords ) -\u2282 0.6 0.6 If we picture the image as being in front of the camera, with the camera facing the center of the image, we divide the values by the width/height, and shift them so that the vector 0 0 is at the center. , \u2218 1 \u00a8 ((( \u2373 5 5 ) \u00f7 5 ) -\u2282 0.6 0.6 ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u00af0.4 \u00af0.4 1 \u2502 \u00af0.4 \u00af0.2 1 \u2502 \u00af0.4 0 1 \u2502 \u00af0.4 0.2 1 \u2502 \u00af0.4 0.4 1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u00af0.2 \u00af0.4 1 \u2502 \u00af0.2 \u00af0.2 1 \u2502 \u00af0.2 0 1 \u2502 \u00af0.2 0.2 1 \u2502 \u00af0.2 0.4 1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 \u00af0.4 1 \u2502 0 \u00af0.2 1 \u2502 0 0 1 \u2502 0 0.2 1 \u2502 0 0.4 1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0.2 \u00af0.4 1 \u2502 0.2 \u00af0.2 1 \u2502 0.2 0 1 \u2502 0.2 0.2 1 \u2502 0.2 0.4 1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0.4 \u00af0.4 1 \u2502 0.4 \u00af0.2 1 \u2502 0.4 0 1 \u2502 0.4 0.2 1 \u2502 0.4 0.4 1 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 pxl_directions \u2190 , \u2218 1 \u00a8 pxl_directions Where here, the each \u00a8 operator is used to apply the function (,\u22181) to each element of the array. Remember, (,\u22181) is binding the value 1 to the function (,), which means (,\u22181)x is the same as (x,1). Next, we have to calculate the intersection of our rays with the environment. One way is to do this is to keep moving along our rays in small steps until we are close enough to an object in the environment, which we detect using a function that returns the distance to the nearest object. This function should also return negative values for being inside the object, this function is usually called a signed distance function. A more efficient solution is to use this distance function to move along our rays by the distance to the nearest object, guaranteeing first that we do not accidentally move beyond the nearest object while moving along our rays, and second that we approach these objects as quickly as possible. This approach is called \u201csphere tracing\u201d. Teadrinker , Visualization of SDF ray marching algorithm , CC BY-SA 4.0 We first setup the environment. The function for getting the distance between two points \u237a and \u2375 in 3D space can be obtained using the Pythagorean theorem: dist \u2190 { 0.5 * \u2368 + / ( \u237a - \u2375 ) * 2 } 1 2 3 dist 4 6 3 5 The signed distance function for a sphere is immediate from the definition of a sphere as the set of points a distance R away from some center point C. sphere \u2190 { \u2375 [ 3 ] - \u2368 \u2375 [ 1 ] dist \u2375 [ 2 ] } R \u2190 2 C \u2190 0 0 0 P \u2190 0 0 4 sphere P C R 2 P \u2190 0 3 4 sphere P C R 3 Defining our environment as a sphere at the origin, we define the distance function for the environment. env \u2190 { C \u2190 0 0 0 \u22c4 R \u2190 2 \u22c4 sphere \u2375 C R } P \u2190 0 3 4 env P 3 Let\u2019s define the other functions we need and leave the marching function for last. When a point on an object is hit by a ray, the color of that point needs to be calculated in order to make it into the final image. The main insight is that, at every point on the surface of an object, the lighting at that point depends on the angle between the light ray and the surface. For example, if the light ray hits the surface directly, so that it is parallel to the normal at that point, that point will be at the maximum brightness compared to points where the light ray does not hit exactly. If the light ray is perpendicular or makes a negative angle with the surface, then that part of the object is obscured. We first normalise the vectors then take their dot product, this gives us the cosine of the angle between the two. Mathematically, We will use the cosine of the angle for shading, instead of using the angle explicitly. length \u2190 0 \u2218 dist normalize \u2190 \u22a2\u00f7 length normalize 3 4 0 0.6 0.8 0 The last function we will need is one which returns the normal to the environment at some point. Consider a point on the sphere. Intuitively, the vector orthogonal to the sphere will be the direction which makes the distance to the sphere increase the fastest, since every other direction either takes us towards the center of the sphere or away from the sphere at a slower rate We can construct this vector by calculating how much the distance function changes with a small variation in the x, y, and z directions, and normalizing the resulting vector. Small variations are needed so that we only consider points close to the surface point. In vector analysis terms, we are calculating the gradient of the distance function at that point. small \u2190 0.0001 0 0 P \u2190 2 0 0 \u0394env_x \u2190 ( env ( P + small )) - env ( P - small ) \u0394env_x 0.0002 We can use the rotate \u233d operator to make the small vector in the y and z direction too. 1 \u233d small 0 0 0.0001 ( \u233d \u2218 ( 0.0001 0 0 )) \u00a8 3 2 1 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0.0001 0 0 \u2502 0 0.0001 0 \u2502 0 0 0.0001 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u233d\u2373 3 3 2 1 ( \u233d \u2218 small ) \u00a8 \u233d\u2373 3 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0.0001 0 0 \u2502 0 0.0001 0 \u2502 0 0 0.0001 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 P (( env + ) - ( env - )) \u2368 small 0.0002 P (( env + ) - ( env - )) \u2368 (( \u233d \u2218 ( 0.0001 0 0 )) \u00a8 \u233d\u2373 3 ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0.0002 0 0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2283 P (( env + ) - ( env - )) \u2368 (( \u233d \u2218 ( 0.0001 0 0 )) \u00a8 \u233d\u2373 3 ) 0.0002 0 0 norm \u2190 { normalize \u2283 \u2375 (( env + ) - ( env - )) \u2368 (( \u233d \u2218 ( 0.0001 0 0 )) \u00a8 \u233d\u2373 3 ) } norm P 1 0 0 Finally, we are now ready to write the ray marching function. The marching function should take the camera\u2019s initial position, and move it along a ray according to the distance function for either a maximum number of marches or a point is hit, and for the latter return the dot product of the normal at that point with the vector from that point to the light source. march \u2190 ( { cur_pos \u2190 \u2283 \u2375 \u22c4 ray \u2190 2 \u2283 \u2375 \u22c4 i \u2190 3 \u2283 \u2375 \u22c4 cur_pos \u2190 cur_pos + ( env cur_pos ) \u00d7 ray \u22c4 ( env cur_pos ) < 0.0001 : 0 \u2308 ( norm cur_pos )( + . \u00d7 )( normalize cur_pos - light ) \u22c4 cur_pos ray ( i + 1 ) } \u2363 { ( 1 =\u2262 \u237a ) \u2228 (( \u237a , 0 0 ) [ 3 ] > 32 ) } ) camera \u2190 0 0 \u00af10 ray \u2190 0 0 1 light \u2190 2 3 4 march camera ray 0 0.8571428571 march camera ( 0 1 0 ) 0 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2510 \u2502 0 3.969795284E10 \u00af10 \u2502 0 1 0 \u2502 33 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2518 Let\u2019s go through the above code step by step. The function takes in a three element nested array, the first being the camera position, the second is the ray to march along, and the third is a counter variable. It starts from the camera position and adds to it the distance to the environment times the ray. If the distance to the environment is less than a small value, then it returns the dot product of the vector to the light source with the normal to the environment at that point, or zero, depending on which is greater. If not, then it returns the current position, ray, and counter incremented by one. The power operator f\u2363g allows us to evaluate the function f until the function g returns a value of 1. The function g takes in the previous return value of f, and the current return value of f, as left and right arguments. Here, the march function keeps moving the current position along the ray until either the result is a single value, that is, if the if statement in the march function returns either 0 or the dot product, by checking the number of elements (1=\u2262\u237a), or if the number of iterations exceeds 32, \u237a[3]>32. Wrapping the march function in a function that returns zero if the result is not a single number, we apply the function to the pixel coordinates and store the result. color \u2190 { i \u2190 march camera \u2375 0 \u22c4 1 =\u2262 i : i \u22c4 0 } color ( 0 1 0 ) 0 color \u00a8 ( , \u2218 1 \u00a8 (( \u2373 5 5 ) \u00f7 5 ) -\u2282 0.6 0.6 ) 0 0 0 0 0 0 0 0.7893982995 0 0 0 0.8900597217 0.8571428571 0.145402276 0 0 0 0.3004347993 0 0 0 0 0 0 0 image \u2190 color \u00a8 pxl_directions This calculation might take a couple seconds. To actually see our rendered image, we need to export our array as an image file. We will be using the very simple PPM file format, in which images are plain text files. The header of a PPM file consists of a format indicator \u201cP3\u201d, the size of the image (5 5), the maximum value for each color (255), and the colors in RGB format. Using the \u2395NPUT function with the append (2) argument, we write to a file called \u201cimage.ppm\u201d. We use the encode \u2355 operator to convert between numerical arrays to character arrays. 'P3' \u2395NPUT 'image.ppm' 2 ( \u2355\u2374 image ) \u2395NPUT 'image.ppm' 2 '255' \u2395NPUT 'image.ppm' 2 test \u2190 color \u00a8 ( , \u2218 1 \u00a8 (( \u2373 5 5 ) \u00f7 5 ) -\u2282 0.6 0.6 ) test 0 0 0 0 0 0 0 0.7893982995 0 0 0 0.8900597217 0.8571428571 0.145402276 0 0 0 0.3004347993 0 0 0 0 0 0 0 test \u2190 \u2308 \u00a8 255 \u00d7 ( test ) test 0 0 0 0 0 0 0 202 0 0 0 227 219 38 0 0 0 77 0 0 0 0 0 0 0 , \u2218 ( 0 0 ) \u00a8 test \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 0 0 \u2502 0 0 0 \u2502 202 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 0 0 \u2502 227 0 0 \u2502 219 0 0 \u2502 38 0 0 \u2502 0 0 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 0 0 \u2502 0 0 0 \u2502 77 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 , / test \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0 0 0 0 0 \u2502 0 0 202 0 0 \u2502 0 227 219 38 0 \u2502 0 0 77 0 0 \u2502 0 0 0 0 0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 image \u2190 , \u2218 ( 0 0 ) \u00a8 ( \u2308 \u00a8 255 \u00d7 image ) (( 'image.ppm' 2 ) \u2218 ( \u2395NPUT \u2368 ) \u2355 ) \u00a8 , / image Opening the file in a compatible program, such as the GIMP image editor, we see the beautifully shaded sphere. By changing the distance function of the world, it is possible to render more complex objects. Take for example, the distance function for a torus. torus \u2190 { r \u2190 \u237a \u22c4 p \u2190 \u2375 \u22c4 q \u2190 ( r [ 1 ] - \u2368 length p [ 1 ] , p [ 3 ] ) , p [ 2 ] \u22c4 r [ 2 ] - \u2368 length q } env \u2190 { 1 0.5 torus \u2375 } There are also ways of combining distance functions to create more complex scenes, such as taking the minimum of two distance functions. However, we will leave the creation of more complex 3D scenes to the interested reader.","title":"3.B - Bonus content"},{"location":"course/ch3/bonus/#bonus-content-computer-graphics","text":"Did you know APL was used to make graphics for the original TRON movie? Judson Rosebush, one of the founders of the computer animation studio Digital Effects, developed \"Visions\"; a library of APL functions intended for generating computer graphics. It allowed the manipulation of polygons in three-dimensional space and compute perspective transformations. The company created several animated sequences for the movie, including animating the polyhedral character \"Bit\" who could only convey one bit of information, answering yes or no questions. Here's a quote from Jeffrey Kleinster, one of the co-founders of Digital Effects, in an interview published in \u201cCG 101\u201d: \"Our original setup was a 1200-baud modem connection to an Amdahl V6 running A Programming language (APL) in Bethesda, Maryland, using a Tektronix display to preview wireframes. (Polygons refreshed at one per second\u2014that's one polygon per second!)\u2026\" In this section, we will write our own ray marcher to render out 3D environments entirely in APL. The advantages of an array-based language for computer graphics will be immediately seen. In very simple terms, light rays travel from light sources, potentially reflecting off of surfaces, some of which eventually reach light detectors. For example, when admiring a nice forest view, rays of light from the sun get absorbed and emitted at different frequencies by leaves, some of which then make their way to your retina. The only rays of light that affect the final image are the ones which finally reach detectors. For the purposes of computation, light rays are usually traced from from detectors to the sources. This is entirely equivalent to tracing light from sources to detectors, as long as the assumptions of geometric optics hold, which are almost universally assumed in computer graphics. The procedure we will use is as follows. We place a camera at a certain position relative to a 3D environment, and send out rays from the camera for every pixel in the final rendered image in the direction of that pixel. We then calculate the intersection of each of our rays with the environment, and get the directions from the points to the light source of our scene. We finally calculate the shading for the specific points of the environment, by comparing the vector orthogonal to the surface at that point, the normal vector, to the direction of the light source. We will ignore lighting falloff and shadows in our rendering for simplicity. For the first step, we create a vector called camera which stores the camera position. We refer to the first coordinate as the x coordinate, the second as the y coordinate, and the third as the z coordinate. We imagine the camera is facing the positive z direction, towards (0 0 1). camera \u2190 0 0 \u00af10 We then create an array to hold pixel coordinates, in this case a 300\u00d7300 image. \u2373 10 10 \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 1 \u2502 1 2 \u2502 1 3 \u2502 1 4 \u2502 1 5 \u2502 1 6 \u2502 1 7 \u2502 1 8 \u2502 1 9 \u2502 1 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 2 1 \u2502 2 2 \u2502 2 3 \u2502 2 4 \u2502 2 5 \u2502 2 6 \u2502 2 7 \u2502 2 8 \u2502 2 9 \u2502 2 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 3 1 \u2502 3 2 \u2502 3 3 \u2502 3 4 \u2502 3 5 \u2502 3 6 \u2502 3 7 \u2502 3 8 \u2502 3 9 \u2502 3 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 4 1 \u2502 4 2 \u2502 4 3 \u2502 4 4 \u2502 4 5 \u2502 4 6 \u2502 4 7 \u2502 4 8 \u2502 4 9 \u2502 4 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 5 1 \u2502 5 2 \u2502 5 3 \u2502 5 4 \u2502 5 5 \u2502 5 6 \u2502 5 7 \u2502 5 8 \u2502 5 9 \u2502 5 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 6 1 \u2502 6 2 \u2502 6 3 \u2502 6 4 \u2502 6 5 \u2502 6 6 \u2502 6 7 \u2502 6 8 \u2502 6 9 \u2502 6 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 7 1 \u2502 7 2 \u2502 7 3 \u2502 7 4 \u2502 7 5 \u2502 7 6 \u2502 7 7 \u2502 7 8 \u2502 7 9 \u2502 7 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 8 1 \u2502 8 2 \u2502 8 3 \u2502 8 4 \u2502 8 5 \u2502 8 6 \u2502 8 7 \u2502 8 8 \u2502 8 9 \u2502 8 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 9 1 \u2502 9 2 \u2502 9 3 \u2502 9 4 \u2502 9 5 \u2502 9 6 \u2502 9 7 \u2502 9 8 \u2502 9 9 \u2502 9 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 10 1 \u2502 10 2 \u2502 10 3 \u2502 10 4 \u2502 10 5 \u2502 10 6 \u2502 10 7 \u2502 10 8 \u2502 10 9 \u2502 10 10 \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 pxl_coords \u2190 \u2373 300 300 If we picture the image as being in front of the camera, with the camera facing the center of the image, we divide the values by the width/height, and shift them so that the vector 0 0 is at the center. ( \u2373 5 5 ) \u00f7 5 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0.2 0.2 \u2502 0.2 0.4 \u2502 0.2 0.6 \u2502 0.2 0.8 \u2502 0.2 1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0.4 0.2 \u2502 0.4 0.4 \u2502 0.4 0.6 \u2502 0.4 0.8 \u2502 0.4 1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0.6 0.2 \u2502 0.6 0.4 \u2502 0.6 0.6 \u2502 0.6 0.8 \u2502 0.6 1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0.8 0.2 \u2502 0.8 0.4 \u2502 0.8 0.6 \u2502 0.8 0.8 \u2502 0.8 1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 0.2 \u2502 1 0.4 \u2502 1 0.6 \u2502 1 0.8 \u2502 1 1 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 (( \u2373 5 5 ) \u00f7 5 ) -\u2282 0.6 0.6 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u00af0.4 \u00af0.4 \u2502 \u00af0.4 \u00af0.2 \u2502 \u00af0.4 0 \u2502 \u00af0.4 0.2 \u2502 \u00af0.4 0.4 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u00af0.2 \u00af0.4 \u2502 \u00af0.2 \u00af0.2 \u2502 \u00af0.2 0 \u2502 \u00af0.2 0.2 \u2502 \u00af0.2 0.4 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 \u00af0.4 \u2502 0 \u00af0.2 \u2502 0 0 \u2502 0 0.2 \u2502 0 0.4 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0.2 \u00af0.4 \u2502 0.2 \u00af0.2 \u2502 0.2 0 \u2502 0.2 0.2 \u2502 0.2 0.4 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0.4 \u00af0.4 \u2502 0.4 \u00af0.2 \u2502 0.4 0 \u2502 0.4 0.2 \u2502 0.4 0.4 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 pxl_directions \u2190 ( pxl_coords \u00f7\u2262 pxl_coords ) -\u2282 0.6 0.6 If we picture the image as being in front of the camera, with the camera facing the center of the image, we divide the values by the width/height, and shift them so that the vector 0 0 is at the center. , \u2218 1 \u00a8 ((( \u2373 5 5 ) \u00f7 5 ) -\u2282 0.6 0.6 ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u00af0.4 \u00af0.4 1 \u2502 \u00af0.4 \u00af0.2 1 \u2502 \u00af0.4 0 1 \u2502 \u00af0.4 0.2 1 \u2502 \u00af0.4 0.4 1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u00af0.2 \u00af0.4 1 \u2502 \u00af0.2 \u00af0.2 1 \u2502 \u00af0.2 0 1 \u2502 \u00af0.2 0.2 1 \u2502 \u00af0.2 0.4 1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 \u00af0.4 1 \u2502 0 \u00af0.2 1 \u2502 0 0 1 \u2502 0 0.2 1 \u2502 0 0.4 1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0.2 \u00af0.4 1 \u2502 0.2 \u00af0.2 1 \u2502 0.2 0 1 \u2502 0.2 0.2 1 \u2502 0.2 0.4 1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0.4 \u00af0.4 1 \u2502 0.4 \u00af0.2 1 \u2502 0.4 0 1 \u2502 0.4 0.2 1 \u2502 0.4 0.4 1 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 pxl_directions \u2190 , \u2218 1 \u00a8 pxl_directions Where here, the each \u00a8 operator is used to apply the function (,\u22181) to each element of the array. Remember, (,\u22181) is binding the value 1 to the function (,), which means (,\u22181)x is the same as (x,1). Next, we have to calculate the intersection of our rays with the environment. One way is to do this is to keep moving along our rays in small steps until we are close enough to an object in the environment, which we detect using a function that returns the distance to the nearest object. This function should also return negative values for being inside the object, this function is usually called a signed distance function. A more efficient solution is to use this distance function to move along our rays by the distance to the nearest object, guaranteeing first that we do not accidentally move beyond the nearest object while moving along our rays, and second that we approach these objects as quickly as possible. This approach is called \u201csphere tracing\u201d. Teadrinker , Visualization of SDF ray marching algorithm , CC BY-SA 4.0 We first setup the environment. The function for getting the distance between two points \u237a and \u2375 in 3D space can be obtained using the Pythagorean theorem: dist \u2190 { 0.5 * \u2368 + / ( \u237a - \u2375 ) * 2 } 1 2 3 dist 4 6 3 5 The signed distance function for a sphere is immediate from the definition of a sphere as the set of points a distance R away from some center point C. sphere \u2190 { \u2375 [ 3 ] - \u2368 \u2375 [ 1 ] dist \u2375 [ 2 ] } R \u2190 2 C \u2190 0 0 0 P \u2190 0 0 4 sphere P C R 2 P \u2190 0 3 4 sphere P C R 3 Defining our environment as a sphere at the origin, we define the distance function for the environment. env \u2190 { C \u2190 0 0 0 \u22c4 R \u2190 2 \u22c4 sphere \u2375 C R } P \u2190 0 3 4 env P 3 Let\u2019s define the other functions we need and leave the marching function for last. When a point on an object is hit by a ray, the color of that point needs to be calculated in order to make it into the final image. The main insight is that, at every point on the surface of an object, the lighting at that point depends on the angle between the light ray and the surface. For example, if the light ray hits the surface directly, so that it is parallel to the normal at that point, that point will be at the maximum brightness compared to points where the light ray does not hit exactly. If the light ray is perpendicular or makes a negative angle with the surface, then that part of the object is obscured. We first normalise the vectors then take their dot product, this gives us the cosine of the angle between the two. Mathematically, We will use the cosine of the angle for shading, instead of using the angle explicitly. length \u2190 0 \u2218 dist normalize \u2190 \u22a2\u00f7 length normalize 3 4 0 0.6 0.8 0 The last function we will need is one which returns the normal to the environment at some point. Consider a point on the sphere. Intuitively, the vector orthogonal to the sphere will be the direction which makes the distance to the sphere increase the fastest, since every other direction either takes us towards the center of the sphere or away from the sphere at a slower rate We can construct this vector by calculating how much the distance function changes with a small variation in the x, y, and z directions, and normalizing the resulting vector. Small variations are needed so that we only consider points close to the surface point. In vector analysis terms, we are calculating the gradient of the distance function at that point. small \u2190 0.0001 0 0 P \u2190 2 0 0 \u0394env_x \u2190 ( env ( P + small )) - env ( P - small ) \u0394env_x 0.0002 We can use the rotate \u233d operator to make the small vector in the y and z direction too. 1 \u233d small 0 0 0.0001 ( \u233d \u2218 ( 0.0001 0 0 )) \u00a8 3 2 1 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0.0001 0 0 \u2502 0 0.0001 0 \u2502 0 0 0.0001 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u233d\u2373 3 3 2 1 ( \u233d \u2218 small ) \u00a8 \u233d\u2373 3 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0.0001 0 0 \u2502 0 0.0001 0 \u2502 0 0 0.0001 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 P (( env + ) - ( env - )) \u2368 small 0.0002 P (( env + ) - ( env - )) \u2368 (( \u233d \u2218 ( 0.0001 0 0 )) \u00a8 \u233d\u2373 3 ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0.0002 0 0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2283 P (( env + ) - ( env - )) \u2368 (( \u233d \u2218 ( 0.0001 0 0 )) \u00a8 \u233d\u2373 3 ) 0.0002 0 0 norm \u2190 { normalize \u2283 \u2375 (( env + ) - ( env - )) \u2368 (( \u233d \u2218 ( 0.0001 0 0 )) \u00a8 \u233d\u2373 3 ) } norm P 1 0 0 Finally, we are now ready to write the ray marching function. The marching function should take the camera\u2019s initial position, and move it along a ray according to the distance function for either a maximum number of marches or a point is hit, and for the latter return the dot product of the normal at that point with the vector from that point to the light source. march \u2190 ( { cur_pos \u2190 \u2283 \u2375 \u22c4 ray \u2190 2 \u2283 \u2375 \u22c4 i \u2190 3 \u2283 \u2375 \u22c4 cur_pos \u2190 cur_pos + ( env cur_pos ) \u00d7 ray \u22c4 ( env cur_pos ) < 0.0001 : 0 \u2308 ( norm cur_pos )( + . \u00d7 )( normalize cur_pos - light ) \u22c4 cur_pos ray ( i + 1 ) } \u2363 { ( 1 =\u2262 \u237a ) \u2228 (( \u237a , 0 0 ) [ 3 ] > 32 ) } ) camera \u2190 0 0 \u00af10 ray \u2190 0 0 1 light \u2190 2 3 4 march camera ray 0 0.8571428571 march camera ( 0 1 0 ) 0 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2510 \u2502 0 3.969795284E10 \u00af10 \u2502 0 1 0 \u2502 33 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2518 Let\u2019s go through the above code step by step. The function takes in a three element nested array, the first being the camera position, the second is the ray to march along, and the third is a counter variable. It starts from the camera position and adds to it the distance to the environment times the ray. If the distance to the environment is less than a small value, then it returns the dot product of the vector to the light source with the normal to the environment at that point, or zero, depending on which is greater. If not, then it returns the current position, ray, and counter incremented by one. The power operator f\u2363g allows us to evaluate the function f until the function g returns a value of 1. The function g takes in the previous return value of f, and the current return value of f, as left and right arguments. Here, the march function keeps moving the current position along the ray until either the result is a single value, that is, if the if statement in the march function returns either 0 or the dot product, by checking the number of elements (1=\u2262\u237a), or if the number of iterations exceeds 32, \u237a[3]>32. Wrapping the march function in a function that returns zero if the result is not a single number, we apply the function to the pixel coordinates and store the result. color \u2190 { i \u2190 march camera \u2375 0 \u22c4 1 =\u2262 i : i \u22c4 0 } color ( 0 1 0 ) 0 color \u00a8 ( , \u2218 1 \u00a8 (( \u2373 5 5 ) \u00f7 5 ) -\u2282 0.6 0.6 ) 0 0 0 0 0 0 0 0.7893982995 0 0 0 0.8900597217 0.8571428571 0.145402276 0 0 0 0.3004347993 0 0 0 0 0 0 0 image \u2190 color \u00a8 pxl_directions This calculation might take a couple seconds. To actually see our rendered image, we need to export our array as an image file. We will be using the very simple PPM file format, in which images are plain text files. The header of a PPM file consists of a format indicator \u201cP3\u201d, the size of the image (5 5), the maximum value for each color (255), and the colors in RGB format. Using the \u2395NPUT function with the append (2) argument, we write to a file called \u201cimage.ppm\u201d. We use the encode \u2355 operator to convert between numerical arrays to character arrays. 'P3' \u2395NPUT 'image.ppm' 2 ( \u2355\u2374 image ) \u2395NPUT 'image.ppm' 2 '255' \u2395NPUT 'image.ppm' 2 test \u2190 color \u00a8 ( , \u2218 1 \u00a8 (( \u2373 5 5 ) \u00f7 5 ) -\u2282 0.6 0.6 ) test 0 0 0 0 0 0 0 0.7893982995 0 0 0 0.8900597217 0.8571428571 0.145402276 0 0 0 0.3004347993 0 0 0 0 0 0 0 test \u2190 \u2308 \u00a8 255 \u00d7 ( test ) test 0 0 0 0 0 0 0 202 0 0 0 227 219 38 0 0 0 77 0 0 0 0 0 0 0 , \u2218 ( 0 0 ) \u00a8 test \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 0 0 \u2502 0 0 0 \u2502 202 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 0 0 \u2502 227 0 0 \u2502 219 0 0 \u2502 38 0 0 \u2502 0 0 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 0 0 \u2502 0 0 0 \u2502 77 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 , / test \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0 0 0 0 0 \u2502 0 0 202 0 0 \u2502 0 227 219 38 0 \u2502 0 0 77 0 0 \u2502 0 0 0 0 0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 image \u2190 , \u2218 ( 0 0 ) \u00a8 ( \u2308 \u00a8 255 \u00d7 image ) (( 'image.ppm' 2 ) \u2218 ( \u2395NPUT \u2368 ) \u2355 ) \u00a8 , / image Opening the file in a compatible program, such as the GIMP image editor, we see the beautifully shaded sphere. By changing the distance function of the world, it is possible to render more complex objects. Take for example, the distance function for a torus. torus \u2190 { r \u2190 \u237a \u22c4 p \u2190 \u2375 \u22c4 q \u2190 ( r [ 1 ] - \u2368 length p [ 1 ] , p [ 3 ] ) , p [ 2 ] \u22c4 r [ 2 ] - \u2368 length q } env \u2190 { 1 0.5 torus \u2375 } There are also ways of combining distance functions to create more complex scenes, such as taking the minimum of two distance functions. However, we will leave the creation of more complex 3D scenes to the interested reader.","title":"Bonus content: Computer Graphics"},{"location":"course/ch3/part1/","text":"Fun for everyone Programming languages provide structured methods of storing and operating on data. Now that we know how data is structured in APL, it\u2019s time to look at how operations on data are structured, more specifically, how to make your own operations from already existing ones. One of the ways of defining a function, taking in array arguments and outputting an array result, is using direct functions, abbreviated dfn. (\u201ddee-fun\u201d) A dfn is a series of statements, where the special characters \u237a and \u2375 represent the left and right arguments to the function. Functions always require a right argument. Let\u2019s look at some simple examples. F_to_C \u2190 { ( 5 \u00d7 \u2375 - 32 ) \u00f7 9 } F_to_C 451 232.7777778 C_to_F \u2190 { 32 + ( 9 \u00d7 \u2375 ) \u00f7 5 } C_to_F \u00af273.15 \u00af459.67 C_to_F F_to_C 100 100 dB_to_B \u2190 { \u2375 \u00f7 10 } \u235d From decibels to bels dB_to_ratio \u2190 { 10 * dB_to_B \u2375 } \u235d From decibels back to a power ratio dB_to_ratio 60 1000000 dB_to_ratio 3 1.995262315 PHI \u2190 0.5 \u00d7 1 + 5 * .5 \u235d golden ratio fibonacci \u2190 { (( PHI * \u2375 ) - ( - PHI ) *- \u2375 ) \u00f7 ( \u00af1 + 2 \u00d7 PHI ) } fibonacci \u2373 7 1 1 2 3 5 8 13 fibonacci 10 55 hypotenuse \u2190 { (( \u237a * 2 ) + \u2375 * 2 ) * 0.5 } \u235d Pythagorean theorem 3 hypotenuse 4 5 6 hypotenuse 8 10 5 hypotenuse 12 13 1 hypotenuse 3 * .5 2 Note that for the Fibonacci function, a constant value phi for the golden ratio was used. If the value of phi is changed, the Fibonacci function will use the updated value. APL allows any number of assignment statements inside a function before the statement which evaluates the result, using the diamond-shaped statement separator \u22c4, or placing the statements on new lines. The following two functions are equivalent. fibonacci \u2190 { PHI \u2190 0.5 \u00d7 1 + 5 * .5 \u22c4 (( PHI * \u2375 ) - ( - PHI ) *- \u2375 ) \u00f7 ( \u00af1 + 2 \u00d7 PHI ) } fibonacci \u2190 { PHI \u2190 0.5 \u00d7 1 + 5 * .5 (( PHI * \u2375 ) - ( - PHI ) *- \u2375 ) \u00f7 ( \u00af1 + 2 \u00d7 PHI ) } Multiline support in RIDE In order to write multiline functions in the Dyalog RIDE, \"Extended Multiline Input\" needs to be enabled. It can be found in the Session tab under Options>Configure. Any code beyond the first statement which produces a value is not evaluated number \u2190 { 1 \u22c4 2 \u22c4 3 \u22c4 4 } number \u236c \u235d The empty vector character \u236c is added here as filler since functions always require a right argument 1 separator_test \u2190 { a \u2190 1 \u22c4 a + a \u22c4 a - a } separator_test \u236c 2","title":"3.1 - Fun for everyone"},{"location":"course/ch3/part1/#fun-for-everyone","text":"Programming languages provide structured methods of storing and operating on data. Now that we know how data is structured in APL, it\u2019s time to look at how operations on data are structured, more specifically, how to make your own operations from already existing ones. One of the ways of defining a function, taking in array arguments and outputting an array result, is using direct functions, abbreviated dfn. (\u201ddee-fun\u201d) A dfn is a series of statements, where the special characters \u237a and \u2375 represent the left and right arguments to the function. Functions always require a right argument. Let\u2019s look at some simple examples. F_to_C \u2190 { ( 5 \u00d7 \u2375 - 32 ) \u00f7 9 } F_to_C 451 232.7777778 C_to_F \u2190 { 32 + ( 9 \u00d7 \u2375 ) \u00f7 5 } C_to_F \u00af273.15 \u00af459.67 C_to_F F_to_C 100 100 dB_to_B \u2190 { \u2375 \u00f7 10 } \u235d From decibels to bels dB_to_ratio \u2190 { 10 * dB_to_B \u2375 } \u235d From decibels back to a power ratio dB_to_ratio 60 1000000 dB_to_ratio 3 1.995262315 PHI \u2190 0.5 \u00d7 1 + 5 * .5 \u235d golden ratio fibonacci \u2190 { (( PHI * \u2375 ) - ( - PHI ) *- \u2375 ) \u00f7 ( \u00af1 + 2 \u00d7 PHI ) } fibonacci \u2373 7 1 1 2 3 5 8 13 fibonacci 10 55 hypotenuse \u2190 { (( \u237a * 2 ) + \u2375 * 2 ) * 0.5 } \u235d Pythagorean theorem 3 hypotenuse 4 5 6 hypotenuse 8 10 5 hypotenuse 12 13 1 hypotenuse 3 * .5 2 Note that for the Fibonacci function, a constant value phi for the golden ratio was used. If the value of phi is changed, the Fibonacci function will use the updated value. APL allows any number of assignment statements inside a function before the statement which evaluates the result, using the diamond-shaped statement separator \u22c4, or placing the statements on new lines. The following two functions are equivalent. fibonacci \u2190 { PHI \u2190 0.5 \u00d7 1 + 5 * .5 \u22c4 (( PHI * \u2375 ) - ( - PHI ) *- \u2375 ) \u00f7 ( \u00af1 + 2 \u00d7 PHI ) } fibonacci \u2190 { PHI \u2190 0.5 \u00d7 1 + 5 * .5 (( PHI * \u2375 ) - ( - PHI ) *- \u2375 ) \u00f7 ( \u00af1 + 2 \u00d7 PHI ) } Multiline support in RIDE In order to write multiline functions in the Dyalog RIDE, \"Extended Multiline Input\" needs to be enabled. It can be found in the Session tab under Options>Configure. Any code beyond the first statement which produces a value is not evaluated number \u2190 { 1 \u22c4 2 \u22c4 3 \u22c4 4 } number \u236c \u235d The empty vector character \u236c is added here as filler since functions always require a right argument 1 separator_test \u2190 { a \u2190 1 \u22c4 a + a \u22c4 a - a } separator_test \u236c 2","title":"Fun for everyone"},{"location":"course/ch3/part2/","text":"All the math APL comes with a lot of math functions! Here we go through a bunch of them, so you can always come back to check. Remember to also check the toolbar in TryAPL and RIDE, they come with very helpful tooltips to remind you what an operator does! Dyadic \u2308 & \u230a : Max & Min 4 \u2308 5 \u235d This simply returns the larger argument 5 4 \u230a 5 \u235d This is for the smaller one 4 4 \u2308 1 3 5 7 9 8 6 4 2 0 \u235d \"Clips\" the value of elements to a minimum 4 4 5 7 9 8 6 4 4 4 4 \u230a 1 3 5 7 9 8 6 4 2 0 \u235d Similarly \"clips\" down 1 3 4 4 4 4 4 4 2 0 Monadic \u2308 & \u230a : Ceil & Floor \u2308 2.5 2.6 \u00af2.5 \u00af2.6 \u235d Rounds up to the closest integer 3 3 \u00af2 \u00af2 \u230a 2.5 2.6 \u00af2.5 \u00af2.6 \u235d Rounds down to the closest integer 2 2 \u00af3 \u00af3 Monadic | : Absolute value | \u00af1 \u235d Absolute value of \u00af1 is ... 1 | 0j1 3j4 \u235d Applying to complex numbers 1 5 Dyadic | : Residue 13 | 100 \u235d 13 \u00d7 7 = 91, note this is in reverse order as `%` operator in C 9 13 | \u00af100 \u235d 13 \u00d7 \u00af8 = \u00af104 4 \u00af13 | 100 \u235d The result has the same sign as the divisor. Here, \u00af13 \u00d7 \u00af8 = 104 \u00af4 \u00af13 | \u00af100 \u235d \u00af13 \u00d7 7 = \u00af91 \u00af9 3.3 | 10 \u235d Also works for non-integer! 0.1 0 | 3 \u235d 0 as a divisor is treated as 1 here 3 This residue operation respects \u201cfloored\u201d division. The defining equation is X | Y \u2190 Y - X \u00d7\u230a Y \u00f7 X + 0 = X \u235d where, X+0=X means if X is 0 then 1, else X. \u235d if X is not 0, this is simply (Y - X * floor(Y / X)). If you want to get \u201ceuclidean\u201d remainder, simply subtract divisor back if the result is negative. mod \u2190 { ( \u2375 | \u237a ) < 0 : ( \u2375 | \u237a ) - \u2375 \u22c4 \u2375 | \u237a } \u00af13 mod \u00af3 2 \u00af14 mod \u00af3 1 \u00af15 mod \u00af3 0 Dyadic \u2228 & \u2227 : GCD and LCM 12 \u2228 10 \u235d Greatest Common Divisor... 2 12 \u2227 10 \u235d Least Common Mutiple... 60 \u00af2 \u2228 \u00af15 \u235d The result is non-negative for GCD 1 \u00af4 \u2227 10 \u235d But the LCM is defined as product of two numbers divided by their GCD, so it could be negative \u00af20 Curiously, as suggested by the choice of glyphs for these two operations, these two operations are also used for the boolean logic \u201cor\u201d and \u201cand\u201d operations. This is because 0 is divisible by everything, as the remainder is always 0. So the Greatest Common Divisor of 0 and x is just x, since x divides both 0 and x. Dually, 0 is also a multiple of everything, so the Least Common Multiple of 0 and x is just 0, since 0 is a multiple of both x and 0 (and it\u2019s the smallest!). Monadic + : Complex Conjugate + 0j1 1j\u00af1 3j4 0J\u00af1 1J1 3J\u00af4 Monadic - : Negate - 4 \u00af5 6 \u00af4 5 \u00af6 - 4 - 5 - 6 \u235d Remember this is different from \u00af, since it could be monadic and also applies to the whole array \u00af5 Monadic \u00d7 : Signum/Direction \u00d7 0 3 \u00af3 0 1 \u00af1 \u00d7 3J4 \u00af6J8 7J24 0.6J0.8 \u00af0.6J0.8 0.28J0.96 Monadic \u25cb : Pi Times \u25cb 1 3.141592654 \u25cb 2 6.283185307 \u25cb 0.5 1.570796327 \u25cb 0J1 0J3.141592654 Dyadic \u25cb : Trigonometric Functions The dyadic circle \u25cb function applies a trigonometric function to its right argument depending on its left argument. \u235d Sine of an approximation to PI 1 \u25cb \u25cb 1 1.224646799E\u00af16 \u235d Cosine of zero 2 \u25cb 0 1 \u235d Tangent of 0.5 3 \u25cb 0 0.5463024898 \u235d Cosine of I 2 \u25cb 0J1 1.543080635","title":"3.2 - All the math"},{"location":"course/ch3/part2/#all-the-math","text":"APL comes with a lot of math functions! Here we go through a bunch of them, so you can always come back to check. Remember to also check the toolbar in TryAPL and RIDE, they come with very helpful tooltips to remind you what an operator does! Dyadic \u2308 & \u230a : Max & Min 4 \u2308 5 \u235d This simply returns the larger argument 5 4 \u230a 5 \u235d This is for the smaller one 4 4 \u2308 1 3 5 7 9 8 6 4 2 0 \u235d \"Clips\" the value of elements to a minimum 4 4 5 7 9 8 6 4 4 4 4 \u230a 1 3 5 7 9 8 6 4 2 0 \u235d Similarly \"clips\" down 1 3 4 4 4 4 4 4 2 0 Monadic \u2308 & \u230a : Ceil & Floor \u2308 2.5 2.6 \u00af2.5 \u00af2.6 \u235d Rounds up to the closest integer 3 3 \u00af2 \u00af2 \u230a 2.5 2.6 \u00af2.5 \u00af2.6 \u235d Rounds down to the closest integer 2 2 \u00af3 \u00af3 Monadic | : Absolute value | \u00af1 \u235d Absolute value of \u00af1 is ... 1 | 0j1 3j4 \u235d Applying to complex numbers 1 5 Dyadic | : Residue 13 | 100 \u235d 13 \u00d7 7 = 91, note this is in reverse order as `%` operator in C 9 13 | \u00af100 \u235d 13 \u00d7 \u00af8 = \u00af104 4 \u00af13 | 100 \u235d The result has the same sign as the divisor. Here, \u00af13 \u00d7 \u00af8 = 104 \u00af4 \u00af13 | \u00af100 \u235d \u00af13 \u00d7 7 = \u00af91 \u00af9 3.3 | 10 \u235d Also works for non-integer! 0.1 0 | 3 \u235d 0 as a divisor is treated as 1 here 3 This residue operation respects \u201cfloored\u201d division. The defining equation is X | Y \u2190 Y - X \u00d7\u230a Y \u00f7 X + 0 = X \u235d where, X+0=X means if X is 0 then 1, else X. \u235d if X is not 0, this is simply (Y - X * floor(Y / X)). If you want to get \u201ceuclidean\u201d remainder, simply subtract divisor back if the result is negative. mod \u2190 { ( \u2375 | \u237a ) < 0 : ( \u2375 | \u237a ) - \u2375 \u22c4 \u2375 | \u237a } \u00af13 mod \u00af3 2 \u00af14 mod \u00af3 1 \u00af15 mod \u00af3 0 Dyadic \u2228 & \u2227 : GCD and LCM 12 \u2228 10 \u235d Greatest Common Divisor... 2 12 \u2227 10 \u235d Least Common Mutiple... 60 \u00af2 \u2228 \u00af15 \u235d The result is non-negative for GCD 1 \u00af4 \u2227 10 \u235d But the LCM is defined as product of two numbers divided by their GCD, so it could be negative \u00af20 Curiously, as suggested by the choice of glyphs for these two operations, these two operations are also used for the boolean logic \u201cor\u201d and \u201cand\u201d operations. This is because 0 is divisible by everything, as the remainder is always 0. So the Greatest Common Divisor of 0 and x is just x, since x divides both 0 and x. Dually, 0 is also a multiple of everything, so the Least Common Multiple of 0 and x is just 0, since 0 is a multiple of both x and 0 (and it\u2019s the smallest!). Monadic + : Complex Conjugate + 0j1 1j\u00af1 3j4 0J\u00af1 1J1 3J\u00af4 Monadic - : Negate - 4 \u00af5 6 \u00af4 5 \u00af6 - 4 - 5 - 6 \u235d Remember this is different from \u00af, since it could be monadic and also applies to the whole array \u00af5 Monadic \u00d7 : Signum/Direction \u00d7 0 3 \u00af3 0 1 \u00af1 \u00d7 3J4 \u00af6J8 7J24 0.6J0.8 \u00af0.6J0.8 0.28J0.96 Monadic \u25cb : Pi Times \u25cb 1 3.141592654 \u25cb 2 6.283185307 \u25cb 0.5 1.570796327 \u25cb 0J1 0J3.141592654 Dyadic \u25cb : Trigonometric Functions The dyadic circle \u25cb function applies a trigonometric function to its right argument depending on its left argument. \u235d Sine of an approximation to PI 1 \u25cb \u25cb 1 1.224646799E\u00af16 \u235d Cosine of zero 2 \u25cb 0 1 \u235d Tangent of 0.5 3 \u25cb 0 0.5463024898 \u235d Cosine of I 2 \u25cb 0J1 1.543080635","title":"All the math"},{"location":"course/ch3/part3/","text":"Relational functions Dyadic =, \u2260, \u2264, <, >, \u2265 : Comparison Functions 0 = 0 1 0 \u2260 0 0 3 \u2264 3 1 3 < 3 0 2 = 1 2 3 4 5 2 3 2 4 2 \u235d Getting a \"bit mask\" for elements equal to 2 0 1 0 0 0 1 0 1 0 1 Note that when you use these functions over two vectors, the result is a vector, denoting the function element wise . 1 2 1 4 5 2 5 2 3 2 = 1 2 3 4 5 2 3 2 4 2 1 1 0 1 1 1 0 1 0 1 1 2 1 4 5 2 5 2 3 2 \u2264 1 2 3 4 5 2 3 2 4 2 1 1 1 1 1 1 0 1 1 1 We will learn about how to collect these result into one scalar in the next section.","title":"3.3 - Relational functions"},{"location":"course/ch3/part3/#relational-functions","text":"Dyadic =, \u2260, \u2264, <, >, \u2265 : Comparison Functions 0 = 0 1 0 \u2260 0 0 3 \u2264 3 1 3 < 3 0 2 = 1 2 3 4 5 2 3 2 4 2 \u235d Getting a \"bit mask\" for elements equal to 2 0 1 0 0 0 1 0 1 0 1 Note that when you use these functions over two vectors, the result is a vector, denoting the function element wise . 1 2 1 4 5 2 5 2 3 2 = 1 2 3 4 5 2 3 2 4 2 1 1 0 1 1 1 0 1 0 1 1 2 1 4 5 2 5 2 3 2 \u2264 1 2 3 4 5 2 3 2 4 2 1 1 1 1 1 1 0 1 1 1 We will learn about how to collect these result into one scalar in the next section.","title":"Relational functions"},{"location":"course/ch3/part4/","text":"Logical functions 3 \u2227 0 0 0 \u2228 3 3 1 1 0 1 1 \u2227 1 0 1 0 1 \u235d If the arguments are \"bit mask\"s, this is a bitwise and 1 0 0 0 1 1 1 0 1 1 \u2228 1 0 1 0 1 \u235d This is a bitwise or 1 1 1 1 1 Monadic ~ : Logical Not Dyadic \u2372 & \u2371 : Logical Nand and Logical Nor ~ 1 1 0 1 1 0 0 1 0 0 ~ 3 \u235d However, this operator is truly logical, so you cannot take the not of a non-0 non-1 number DOMAIN ERROR ~ 3 \u2227 1 1 0 1 1 \u2372 1 0 1 0 1 \u235d This is just ~ 1 1 0 1 1 \u2227 1 0 1 0 1 0 1 1 1 0 1 1 0 1 1 \u2371 1 0 1 0 1 \u235d Similarly this is just ~ 1 1 0 1 1 \u2228 1 0 1 0 1 1 1 1 1 1","title":"3.4 - Logical functions"},{"location":"course/ch3/part4/#logical-functions","text":"3 \u2227 0 0 0 \u2228 3 3 1 1 0 1 1 \u2227 1 0 1 0 1 \u235d If the arguments are \"bit mask\"s, this is a bitwise and 1 0 0 0 1 1 1 0 1 1 \u2228 1 0 1 0 1 \u235d This is a bitwise or 1 1 1 1 1 Monadic ~ : Logical Not Dyadic \u2372 & \u2371 : Logical Nand and Logical Nor ~ 1 1 0 1 1 0 0 1 0 0 ~ 3 \u235d However, this operator is truly logical, so you cannot take the not of a non-0 non-1 number DOMAIN ERROR ~ 3 \u2227 1 1 0 1 1 \u2372 1 0 1 0 1 \u235d This is just ~ 1 1 0 1 1 \u2227 1 0 1 0 1 0 1 1 1 0 1 1 0 1 1 \u2371 1 0 1 0 1 \u235d Similarly this is just ~ 1 1 0 1 1 \u2228 1 0 1 0 1 1 1 1 1 1","title":"Logical functions"},{"location":"course/ch3/part5/","text":"Quad functions This part will cover: - What quad functions are - Common quad functions: - DT - A - etc","title":"3.5 - Quad functions"},{"location":"course/ch3/part5/#quad-functions","text":"This part will cover: - What quad functions are - Common quad functions: - DT - A - etc","title":"Quad functions"},{"location":"course/ch3/part6/","text":"Installing Dyalog This part will cover: - Instructions on installing the Dyalog IDE, Dyalog RIDE, and Dyalogscript - Basic usage instructions","title":"3.6 - Installing Dyalog"},{"location":"course/ch3/part6/#installing-dyalog","text":"This part will cover: - Instructions on installing the Dyalog IDE, Dyalog RIDE, and Dyalogscript - Basic usage instructions","title":"Installing Dyalog"},{"location":"course/ch3/part7/","text":"Traditional fun This part will cover: - How to write tradfns in the Dyalog IDE - Assigning temporary variables - Basic workspace management Another way of defining functions is using traditional functions, abbreviated tradfn. (\u201dtrad-fun\u201d) These functions look a lot more similar to functions in imperative programming languages. \u2207 ( R1 R2 ) \u2190 solve_quadratic A B C ; root ; vertex root \u2190 (( B * 2 ) - 4 \u00d7 A \u00d7 C ) * 1 \u00f7 2 vertex \u2190 - B \u00f7 2 \u00d7 A R1 \u2190 vertex + root \u00f7 2 \u00d7 A R2 \u2190 vertex - root \u00f7 2 \u00d7 A \u2207 solve_quadratic 1 \u00af1 \u00af1 1.618033989 \u00af0.6180339887 \u235d \u2207 results \u2190 name arguments;local_variable1;local_variable2 \u235d ... \u235d Instructions \u235d ... \u235d results \u2190 values \u235d \u2207 Tradfns are delimited by dels \u2207 and consist of a header and body. The header defines the (left or right) arguments, the variables which are local to that function (variables which do not affect the rest of the workspace), and the values that are returned. If we try to access any of the local variables of the function outside the function, we will encounter an error. R1 VALUE ERROR : Undefined name : R1 vertex VALUE ERROR : Undefined name : vertex Instead of guarded expressions, there are control flow structures like :If and :For, we will see these structures in Chapter 7. Variable Scope In tradfns, variables outside the function can be accessed and modified unless specified to be local. In dfns however, while it is possible to access variables outside the function, it is not possible to assign to them. i \u2190 10 d_increment \u2190 { i \u2190 i + 1 \u22c4 i } i 10 increment \u236c 11 i 10 \u2207 res \u2190 t_increment i \u2190 i + 1 res \u2190 i \u2207 i 10 t_increment 11 i 11 The follwing code gets the final velocities of a one-dimensional perfectly elastic collision of two objects with initial velocities u1 and u2 and masses m1 and m2. \u2207 ( v1 v2 ) \u2190 collision ( u1 u2 m1 m2 ) ; rsumM ; diffM rsumM \u2190 \u00f7 m1 + m2 diffM \u2190 m1 - m2 v1 \u2190 ( diffM \u00d7 rsumM \u00d7 u1 ) + 2 \u00d7 m2 \u00d7 rsumM \u00d7 u2 v2 \u2190 ( 2 \u00d7 m1 \u00d7 rsumM \u00d7 u1 ) - diffM \u00d7 rsumM \u00d7 u2 \u2207 \u235d Collision of two object moving with opposite velocities towards each other \u235d where one object is twice as massive \u235d \u2218\u2192 \u2190\u25cb collision 1 \u00af1 1 2 \u00af1.666666667 0.3333333333","title":"3.7 - Traditional fun"},{"location":"course/ch3/part7/#traditional-fun","text":"This part will cover: - How to write tradfns in the Dyalog IDE - Assigning temporary variables - Basic workspace management Another way of defining functions is using traditional functions, abbreviated tradfn. (\u201dtrad-fun\u201d) These functions look a lot more similar to functions in imperative programming languages. \u2207 ( R1 R2 ) \u2190 solve_quadratic A B C ; root ; vertex root \u2190 (( B * 2 ) - 4 \u00d7 A \u00d7 C ) * 1 \u00f7 2 vertex \u2190 - B \u00f7 2 \u00d7 A R1 \u2190 vertex + root \u00f7 2 \u00d7 A R2 \u2190 vertex - root \u00f7 2 \u00d7 A \u2207 solve_quadratic 1 \u00af1 \u00af1 1.618033989 \u00af0.6180339887 \u235d \u2207 results \u2190 name arguments;local_variable1;local_variable2 \u235d ... \u235d Instructions \u235d ... \u235d results \u2190 values \u235d \u2207 Tradfns are delimited by dels \u2207 and consist of a header and body. The header defines the (left or right) arguments, the variables which are local to that function (variables which do not affect the rest of the workspace), and the values that are returned. If we try to access any of the local variables of the function outside the function, we will encounter an error. R1 VALUE ERROR : Undefined name : R1 vertex VALUE ERROR : Undefined name : vertex Instead of guarded expressions, there are control flow structures like :If and :For, we will see these structures in Chapter 7. Variable Scope In tradfns, variables outside the function can be accessed and modified unless specified to be local. In dfns however, while it is possible to access variables outside the function, it is not possible to assign to them. i \u2190 10 d_increment \u2190 { i \u2190 i + 1 \u22c4 i } i 10 increment \u236c 11 i 10 \u2207 res \u2190 t_increment i \u2190 i + 1 res \u2190 i \u2207 i 10 t_increment 11 i 11 The follwing code gets the final velocities of a one-dimensional perfectly elastic collision of two objects with initial velocities u1 and u2 and masses m1 and m2. \u2207 ( v1 v2 ) \u2190 collision ( u1 u2 m1 m2 ) ; rsumM ; diffM rsumM \u2190 \u00f7 m1 + m2 diffM \u2190 m1 - m2 v1 \u2190 ( diffM \u00d7 rsumM \u00d7 u1 ) + 2 \u00d7 m2 \u00d7 rsumM \u00d7 u2 v2 \u2190 ( 2 \u00d7 m1 \u00d7 rsumM \u00d7 u1 ) - diffM \u00d7 rsumM \u00d7 u2 \u2207 \u235d Collision of two object moving with opposite velocities towards each other \u235d where one object is twice as massive \u235d \u2218\u2192 \u2190\u25cb collision 1 \u00af1 1 2 \u00af1.666666667 0.3333333333","title":"Traditional fun"},{"location":"course/ch3/part8/","text":"Fun(Fun(Fun(Fun(Fun(...))))) This part will cover: - How to define recursive dfns and tradfns - Guard syntax in dfns Recursive functions can be implemented using guarded expressions and the self \u2207 function. Guarded expressions consist of a boolean/logical expression followed by a colon \u201d:\u201d, and another expression. For example, \u2375=0: 1. A guarded expression in a function specifies a condition for whether a statement is evaluated; if the boolean expression evaluates to 1, the function evaluates the statement and the value of the expression is returned. In the above example, if we create a function {\u2375=0: 1}, if \u2375 (the right argument) is 0, then the function will return 1. The self function \u2207 stands for the function it is contained in, allowing calling the function from within itself, that is, allowing recursion. Alternatively, the function name can be used within the function itself. For example, the factorial function is typically defined as f(n) = n * f(n-1), such that f(0)=1. Thinking in terms of guarded expressions, if the argument of the function is 0 the result should be 1 (in symbols, \u2375=0: 1), otherwise multiply the right argument (\u2375) by the result of the function itself (\u2207) evaluated for the right argument minus 1 (\u2375 - 1). Putting it together, factorial \u2190 { \u2375 = 0 : 1 \u22c4 \u2375 \u00d7 \u2207 \u2375 - 1 } This function consists of two statements, separated by the separator \u22c4. The first statement in this function is an example of a guarded expression, if \u2375=0 evaluates to true, that is, when \u2375 is equal to 0, the expression 1 is evaluated. Otherwise, the expression \u2375 \u00d7 \u2207 \u2375 - 1 is evaluated. For example, the evaluation of factorial 2 can be visualised as: { \u2375 = 0 : 1 \u22c4 \u2375 \u00d7 \u2207 \u2375 - 1 } 2 \u235d Since 2=0 is 0, the guarded statement is not evaluated. \u235d 2 \u00d7 \u2207 1 \u235d 2 \u00d7 {\u2375=0: 1 \u22c4 \u2375 \u00d7 \u2207 \u2375 - 1} 1 \u235d Since 1=0 is 0, the guarded statement is not evaluated. \u235d 2 \u00d7 1 \u00d7 \u2207 0 \u235d 2 \u00d7 1 \u00d7 {\u2375=0: 1 \u22c4 \u2375 \u00d7 \u2207 \u2375 - 1} 0 \u235d Since 0=0 is 1, the guarded statement is evaluated. \u235d 2 \u00d7 1 \u00d7 1 factorial 2 2 factorial 3 6 factorial 4 24 collatz \u2190 { \u2375 = 1 : 1 \u22c4 0 = 2 | \u2375: \u2375 , \u2207 \u2375 \u00f7 2 \u22c4 \u2375 , \u2207 1 + 3 \u00d7 \u2375 } This function keeps track of the evaluation of the following procedure. If the \u2375 is even (see more examples of the dyadic modulo | function), divide it by two. If it is odd, multiply it by three and add one. Evaluate this function until \u2375 reaches 1. \u235d Example: \u235d collatz 3 \u235d 3 , \u2207 1+3\u00d73 \u235d 3 , collatz 1+3\u00d73 \u235d 3 , collatz 10 \u235d 3 , 10 , \u2207 10\u00f72 \u235d 3 10 , collatz 10\u00f72 \u235d 3 10 , collatz 5 \u235d and so on collatz 3 3 10 5 16 8 4 2 1 collatz 100 100 50 25 76 38 19 58 29 88 44 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1 collatz 2 * 10 1024 512 256 128 64 32 16 8 4 2 1","title":"3.8 - Fun(Fun(Fun(Fun(Fun(...)))))"},{"location":"course/ch3/part8/#funfunfunfunfun","text":"This part will cover: - How to define recursive dfns and tradfns - Guard syntax in dfns Recursive functions can be implemented using guarded expressions and the self \u2207 function. Guarded expressions consist of a boolean/logical expression followed by a colon \u201d:\u201d, and another expression. For example, \u2375=0: 1. A guarded expression in a function specifies a condition for whether a statement is evaluated; if the boolean expression evaluates to 1, the function evaluates the statement and the value of the expression is returned. In the above example, if we create a function {\u2375=0: 1}, if \u2375 (the right argument) is 0, then the function will return 1. The self function \u2207 stands for the function it is contained in, allowing calling the function from within itself, that is, allowing recursion. Alternatively, the function name can be used within the function itself. For example, the factorial function is typically defined as f(n) = n * f(n-1), such that f(0)=1. Thinking in terms of guarded expressions, if the argument of the function is 0 the result should be 1 (in symbols, \u2375=0: 1), otherwise multiply the right argument (\u2375) by the result of the function itself (\u2207) evaluated for the right argument minus 1 (\u2375 - 1). Putting it together, factorial \u2190 { \u2375 = 0 : 1 \u22c4 \u2375 \u00d7 \u2207 \u2375 - 1 } This function consists of two statements, separated by the separator \u22c4. The first statement in this function is an example of a guarded expression, if \u2375=0 evaluates to true, that is, when \u2375 is equal to 0, the expression 1 is evaluated. Otherwise, the expression \u2375 \u00d7 \u2207 \u2375 - 1 is evaluated. For example, the evaluation of factorial 2 can be visualised as: { \u2375 = 0 : 1 \u22c4 \u2375 \u00d7 \u2207 \u2375 - 1 } 2 \u235d Since 2=0 is 0, the guarded statement is not evaluated. \u235d 2 \u00d7 \u2207 1 \u235d 2 \u00d7 {\u2375=0: 1 \u22c4 \u2375 \u00d7 \u2207 \u2375 - 1} 1 \u235d Since 1=0 is 0, the guarded statement is not evaluated. \u235d 2 \u00d7 1 \u00d7 \u2207 0 \u235d 2 \u00d7 1 \u00d7 {\u2375=0: 1 \u22c4 \u2375 \u00d7 \u2207 \u2375 - 1} 0 \u235d Since 0=0 is 1, the guarded statement is evaluated. \u235d 2 \u00d7 1 \u00d7 1 factorial 2 2 factorial 3 6 factorial 4 24 collatz \u2190 { \u2375 = 1 : 1 \u22c4 0 = 2 | \u2375: \u2375 , \u2207 \u2375 \u00f7 2 \u22c4 \u2375 , \u2207 1 + 3 \u00d7 \u2375 } This function keeps track of the evaluation of the following procedure. If the \u2375 is even (see more examples of the dyadic modulo | function), divide it by two. If it is odd, multiply it by three and add one. Evaluate this function until \u2375 reaches 1. \u235d Example: \u235d collatz 3 \u235d 3 , \u2207 1+3\u00d73 \u235d 3 , collatz 1+3\u00d73 \u235d 3 , collatz 10 \u235d 3 , 10 , \u2207 10\u00f72 \u235d 3 10 , collatz 10\u00f72 \u235d 3 10 , collatz 5 \u235d and so on collatz 3 3 10 5 16 8 4 2 1 collatz 100 100 50 25 76 38 19 58 29 88 44 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1 collatz 2 * 10 1024 512 256 128 64 32 16 8 4 2 1","title":"Fun(Fun(Fun(Fun(Fun(...)))))"},{"location":"course/ch3/read/","text":"Read exercises For each of the following exercises, try to figure out what the input will produce in the TryAPL terminal. Check your answers by opening the \"Output\" tab. If you think an error will occur, try to predict which error it will be and where the arrow will point to. The exercises are not checked or graded: use them to check your knowledge!","title":"3.R - Read exercises"},{"location":"course/ch3/read/#read-exercises","text":"For each of the following exercises, try to figure out what the input will produce in the TryAPL terminal. Check your answers by opening the \"Output\" tab. If you think an error will occur, try to predict which error it will be and where the arrow will point to. The exercises are not checked or graded: use them to check your knowledge!","title":"Read exercises"},{"location":"course/ch3/summary/","text":"Function index Here is a table of symbols we have used and how to type them in TryAPL. It might be useful to review this page as you are doing the read and write exercises in the next sections. New functions Symbol Name Function Key combination Old functions Symbol Name Function Key combination + Plus Addition + - Minus Subtraction - \u00d7 Times Multiplication PREFIX - \u00f7 Divide Division PREFIX = * Power Exponentiation * \u00af Negative sign Negation of a number PREFIX 2 \u235d Lamp Comment PREFIX , \u2190 Assignment operator Assigning variables < - Tab \u2395 Quad Printing PREFIX L","title":"3.S - Summary"},{"location":"course/ch3/summary/#function-index","text":"Here is a table of symbols we have used and how to type them in TryAPL. It might be useful to review this page as you are doing the read and write exercises in the next sections.","title":"Function index"},{"location":"course/ch3/summary/#new-functions","text":"Symbol Name Function Key combination","title":"New functions"},{"location":"course/ch3/summary/#old-functions","text":"Symbol Name Function Key combination + Plus Addition + - Minus Subtraction - \u00d7 Times Multiplication PREFIX - \u00f7 Divide Division PREFIX = * Power Exponentiation * \u00af Negative sign Negation of a number PREFIX 2 \u235d Lamp Comment PREFIX , \u2190 Assignment operator Assigning variables < - Tab \u2395 Quad Printing PREFIX L","title":"Old functions"},{"location":"course/ch3/write/","text":"Write exercises Submit APL code for the following exercises. Your submissions are graded using TMC. Make sure to log in to be able to submit your work! Remember, you can test out ideas and develop you solution at TryAPL before submitting it here. You can submit as many solutions as you like. If you submit a correct solution at least once, you will receive points on the TMC server and be able to see the model solution. If the write problem is red, it is unsolved. If it it green, you have solved it and received points for it on the server.","title":"3.W - Write exercises"},{"location":"course/ch3/write/#write-exercises","text":"Submit APL code for the following exercises. Your submissions are graded using TMC. Make sure to log in to be able to submit your work! Remember, you can test out ideas and develop you solution at TryAPL before submitting it here. You can submit as many solutions as you like. If you submit a correct solution at least once, you will receive points on the TMC server and be able to see the model solution. If the write problem is red, it is unsolved. If it it green, you have solved it and received points for it on the server.","title":"Write exercises"},{"location":"course/ch4/part1/","text":"Creating vectors This part will cover: - Vector generating functions - iota - rho - replicate - catenate - roll/deal - index origin, Quad IO","title":"4.1 - Creating vectors"},{"location":"course/ch4/part1/#creating-vectors","text":"This part will cover: - Vector generating functions - iota - rho - replicate - catenate - roll/deal - index origin, Quad IO","title":"Creating vectors"},{"location":"course/ch4/part2/","text":"Reductions and scans This part will cover: - The six useful reduction functions - The six useful scan functions","title":"4.2 - Reductions and scans"},{"location":"course/ch4/part2/#reductions-and-scans","text":"This part will cover: - The six useful reduction functions - The six useful scan functions","title":"Reductions and scans"},{"location":"course/ch4/part3/","text":"Selecting from a vector This part will cover: - Choosing the first or last N numbers. (\u2191) - Choosing all but the first or last N numbers. (\u2193) - Choosing the numbers at positions A, B, C,... ([]) / squad indexing (\u2337) - Choosing the numbers that satisfy certain conditions. (/) - Choosing the item at position A. (\u2283)","title":"4.3 - Selecting from a vector"},{"location":"course/ch4/part3/#selecting-from-a-vector","text":"This part will cover: - Choosing the first or last N numbers. (\u2191) - Choosing all but the first or last N numbers. (\u2193) - Choosing the numbers at positions A, B, C,... ([]) / squad indexing (\u2337) - Choosing the numbers that satisfy certain conditions. (/) - Choosing the item at position A. (\u2283)","title":"Selecting from a vector"},{"location":"course/ch4/part4/","text":"Sorting This part will cover: - Sorting - Grade up - Grade down","title":"4.4 - Sorting"},{"location":"course/ch4/part4/#sorting","text":"This part will cover: - Sorting - Grade up - Grade down","title":"Sorting"},{"location":"course/ch4/part5/","text":"I'm in Spain without the \"a\" This part will cover: - Reflections - Rotations - Transpose","title":"4.5 - I'm in Spain without the \"a\""},{"location":"course/ch4/part5/#im-in-spain-without-the-a","text":"This part will cover: - Reflections - Rotations - Transpose","title":"I'm in Spain without the \"a\""},{"location":"course/ch4/part6/","text":"Searching This part will cover: - Different search methods on 1D arrays - Iota - Iota underbar - Epsilon - Epsilon underbar - Example: changing a certain value to another","title":"4.6 - Searching"},{"location":"course/ch4/part6/#searching","text":"This part will cover: - Different search methods on 1D arrays - Iota - Iota underbar - Epsilon - Epsilon underbar - Example: changing a certain value to another","title":"Searching"},{"location":"course/ch4/part7/","text":"Elements of set theory This part will cover: - Set operations - Union - Intersection - Unique - Without","title":"4.7 - Elements of set theory"},{"location":"course/ch4/part7/#elements-of-set-theory","text":"This part will cover: - Set operations - Union - Intersection - Unique - Without","title":"Elements of set theory"},{"location":"course/ch4/read/","text":"Read exercises For each of the following exercises, try to figure out what the input will produce in the TryAPL terminal. Check your answers by opening the \"Output\" tab. If you think an error will occur, try to predict which error it will be and where the arrow will point to. The exercises are not checked or graded: use them to check your knowledge!","title":"4.R - Read exercises"},{"location":"course/ch4/read/#read-exercises","text":"For each of the following exercises, try to figure out what the input will produce in the TryAPL terminal. Check your answers by opening the \"Output\" tab. If you think an error will occur, try to predict which error it will be and where the arrow will point to. The exercises are not checked or graded: use them to check your knowledge!","title":"Read exercises"},{"location":"course/ch4/summary/","text":"Function index Here is a table of symbols we have used and how to type them in TryAPL. It might be useful to review this page as you are doing the read and write exercises in the next sections. New functions Symbol Name Function Key combination Old functions Symbol Name Function Key combination + Plus Addition + - Minus Subtraction - \u00d7 Times Multiplication PREFIX - \u00f7 Divide Division PREFIX = * Power Exponentiation * \u00af Negative sign Negation of a number PREFIX 2 \u235d Lamp Comment PREFIX , \u2190 Assignment operator Assigning variables < - Tab \u2395 Quad Printing PREFIX L","title":"4.S - Summary"},{"location":"course/ch4/summary/#function-index","text":"Here is a table of symbols we have used and how to type them in TryAPL. It might be useful to review this page as you are doing the read and write exercises in the next sections.","title":"Function index"},{"location":"course/ch4/summary/#new-functions","text":"Symbol Name Function Key combination","title":"New functions"},{"location":"course/ch4/summary/#old-functions","text":"Symbol Name Function Key combination + Plus Addition + - Minus Subtraction - \u00d7 Times Multiplication PREFIX - \u00f7 Divide Division PREFIX = * Power Exponentiation * \u00af Negative sign Negation of a number PREFIX 2 \u235d Lamp Comment PREFIX , \u2190 Assignment operator Assigning variables < - Tab \u2395 Quad Printing PREFIX L","title":"Old functions"},{"location":"course/ch4/write/","text":"Write exercises Submit APL code for the following exercises. Your submissions are graded using TMC. Make sure to log in to be able to submit your work! Remember, you can test out ideas and develop you solution at TryAPL before submitting it here. You can submit as many solutions as you like. If you submit a correct solution at least once, you will receive points on the TMC server and be able to see the model solution. If the write problem is red, it is unsolved. If it it green, you have solved it and received points for it on the server.","title":"4.W - Write exercises"},{"location":"course/ch4/write/#write-exercises","text":"Submit APL code for the following exercises. Your submissions are graded using TMC. Make sure to log in to be able to submit your work! Remember, you can test out ideas and develop you solution at TryAPL before submitting it here. You can submit as many solutions as you like. If you submit a correct solution at least once, you will receive points on the TMC server and be able to see the model solution. If the write problem is red, it is unsolved. If it it green, you have solved it and received points for it on the server.","title":"Write exercises"},{"location":"course/ch5/part1/","text":"Choose your axis! This part will cover: - The axis operator - Applications to reverse, catenate, rotate, replicate, - Reverse - Rotate - Catenate - Replicate - Take - Drop","title":"5.1 - Choose your axis!"},{"location":"course/ch5/part1/#choose-your-axis","text":"This part will cover: - The axis operator - Applications to reverse, catenate, rotate, replicate, - Reverse - Rotate - Catenate - Replicate - Take - Drop","title":"Choose your axis!"},{"location":"course/ch5/part2/","text":"Anything can be a scalar This part will cover: - Nested arrays - Enclose - Disclose - Nest - Each - Tally","title":"5.2 - Anything can be a scalar"},{"location":"course/ch5/part2/#anything-can-be-a-scalar","text":"This part will cover: - Nested arrays - Enclose - Disclose - Nest - Each - Tally","title":"Anything can be a scalar"},{"location":"course/ch5/part3/","text":"(Un)matrixification This part will cover: - Mix - Split - Ravel","title":"5.3 - (Un)matrixification"},{"location":"course/ch5/part3/#unmatrixification","text":"This part will cover: - Mix - Split - Ravel","title":"(Un)matrixification"},{"location":"course/ch5/part4/","text":"Selections and reductions This part will cover: - The reduction and scan functions on matrices - Selecting on different axes","title":"Selections and reductions"},{"location":"course/ch5/part4/#selections-and-reductions","text":"This part will cover: - The reduction and scan functions on matrices - Selecting on different axes","title":"Selections and reductions"},{"location":"course/ch5/part5/","text":"Cross-tabulation This part will cover: - Cross-tabulation - Reducing and selecting in higher dimensions - Applying this to data storage and analysis","title":"Cross-tabulation"},{"location":"course/ch5/part5/#cross-tabulation","text":"This part will cover: - Cross-tabulation - Reducing and selecting in higher dimensions - Applying this to data storage and analysis","title":"Cross-tabulation"},{"location":"course/ch5/read/","text":"Read exercises For each of the following exercises, try to figure out what the input will produce in the TryAPL terminal. Check your answers by opening the \"Output\" tab. If you think an error will occur, try to predict which error it will be and where the arrow will point to. The exercises are not checked or graded: use them to check your knowledge!","title":"4.R - Read exercises"},{"location":"course/ch5/read/#read-exercises","text":"For each of the following exercises, try to figure out what the input will produce in the TryAPL terminal. Check your answers by opening the \"Output\" tab. If you think an error will occur, try to predict which error it will be and where the arrow will point to. The exercises are not checked or graded: use them to check your knowledge!","title":"Read exercises"},{"location":"course/ch5/summary/","text":"Function index Here is a table of symbols we have used and how to type them in TryAPL. It might be useful to review this page as you are doing the read and write exercises in the next sections. New functions Symbol Name Function Key combination Old functions Symbol Name Function Key combination + Plus Addition + - Minus Subtraction - \u00d7 Times Multiplication PREFIX - \u00f7 Divide Division PREFIX = * Power Exponentiation * \u00af Negative sign Negation of a number PREFIX 2 \u235d Lamp Comment PREFIX , \u2190 Assignment operator Assigning variables < - Tab \u2395 Quad Printing PREFIX L","title":"4.S - Summary"},{"location":"course/ch5/summary/#function-index","text":"Here is a table of symbols we have used and how to type them in TryAPL. It might be useful to review this page as you are doing the read and write exercises in the next sections.","title":"Function index"},{"location":"course/ch5/summary/#new-functions","text":"Symbol Name Function Key combination","title":"New functions"},{"location":"course/ch5/summary/#old-functions","text":"Symbol Name Function Key combination + Plus Addition + - Minus Subtraction - \u00d7 Times Multiplication PREFIX - \u00f7 Divide Division PREFIX = * Power Exponentiation * \u00af Negative sign Negation of a number PREFIX 2 \u235d Lamp Comment PREFIX , \u2190 Assignment operator Assigning variables < - Tab \u2395 Quad Printing PREFIX L","title":"Old functions"},{"location":"course/ch5/write/","text":"Write exercises Submit APL code for the following exercises. Your submissions are graded using TMC. Make sure to log in to be able to submit your work! Remember, you can test out ideas and develop you solution at TryAPL before submitting it here. You can submit as many solutions as you like. If you submit a correct solution at least once, you will receive points on the TMC server and be able to see the model solution. If the write problem is red, it is unsolved. If it it green, you have solved it and received points for it on the server.","title":"4.W - Write exercises"},{"location":"course/ch5/write/#write-exercises","text":"Submit APL code for the following exercises. Your submissions are graded using TMC. Make sure to log in to be able to submit your work! Remember, you can test out ideas and develop you solution at TryAPL before submitting it here. You can submit as many solutions as you like. If you submit a correct solution at least once, you will receive points on the TMC server and be able to see the model solution. If the write problem is red, it is unsolved. If it it green, you have solved it and received points for it on the server.","title":"Write exercises"},{"location":"course/ch6/bonus/","text":"Bonus content: Minesweeper in APL and Python This part will cover: - The Python-APL bridge - Stencils - Developing a minesweeper project","title":"6.B - Bonus content"},{"location":"course/ch6/bonus/#bonus-content-minesweeper-in-apl-and-python","text":"This part will cover: - The Python-APL bridge - Stencils - Developing a minesweeper project","title":"Bonus content: Minesweeper in APL and Python"},{"location":"course/ch6/part1/","text":"String manipulation This part will cover: - Partition - Partitioned enclose - Character vector considerations","title":"6.1 - String manipulation"},{"location":"course/ch6/part1/#string-manipulation","text":"This part will cover: - Partition - Partitioned enclose - Character vector considerations","title":"String manipulation"},{"location":"course/ch6/part2/","text":"Inner and outer products This part will cover: - Inner products - Outer products - Matrix inverse","title":"6.2 - Inner and outer products"},{"location":"course/ch6/part2/#inner-and-outer-products","text":"This part will cover: - Inner products - Outer products - Matrix inverse","title":"Inner and outer products"},{"location":"course/ch6/part3/","text":"Encoding and decoding This part will cover: - Encode - Decode - Numbers in different bases","title":"6.3 - Encoding and decoding"},{"location":"course/ch6/part3/#encoding-and-decoding","text":"This part will cover: - Encode - Decode - Numbers in different bases","title":"Encoding and decoding"},{"location":"course/ch6/part4/","text":"Operators This part will cover: - Swap - Repeat - Atop - Over - Left - Right - Masking","title":"6.4 - Operators"},{"location":"course/ch6/part4/#operators","text":"This part will cover: - Swap - Repeat - Atop - Over - Left - Right - Masking","title":"Operators"},{"location":"course/ch6/part5/","text":"ALL ABOARD! At this point, we feel compelled to apologize to the reader for not introducing another way of defining functions which is generally more concise, does not explicitly refer to any of the function arguments, and may have already been encountered accidentally. In order to make full use of this method of creation function trains , we briefly introduce the commonly used / symbol. The dyadic replicate / function repeats elements of its right hand argument array by a specified left hand argument array. This allows the use of boolean masks, which makes it commonly used to filter arrays. ( 2 |\u2373 9 ) / 'ballooned' blond ( ~ 2 |\u2373 9 ) / 'ballooned' aloe 2 1 1 1 1 1 / 'elfish' eelfish ( 5 = 8 |\u2373 26 ) / \u2395A EMU 0 0 0 1 1 0 0 0 1 1 0 0 / 'flamethrower' meow The monadic reduce / operator applies its left function argument between every element of a vector, or more generally, column of an array, and reduces the rank of the array by one. More on axis operations in Chapter 6. \u2373 10 1 2 3 4 5 6 7 8 9 10 + / \u2373 10 55 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 55 - / \u2373 10 \u00af5 1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 9 - 10 \u00af5 \u2227 / \u2373 20 \u235d LCM of numbers from 1 to 20 2520 3 3 \u2374\u2373 9 1 2 3 4 5 6 7 8 9 + / 3 3 \u2374\u2373 9 6 15 24 3 3 3 \u2374\u2373 27 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 + / 3 3 3 \u2374\u2373 27 6 15 24 33 42 51 60 69 78 Some other important functions are the dyadic right and left identity/\u201ctack\u201d functions which return their right or left arguments. \"True\" \u22a3 \"False\" True \"True\" \u22a2 \"False\" False When applied monadically, they return their only argument. Consider the following pairs of functions, implemented using dfns first, and trains second. range_average \u2190 { (( \u2308 / \u2375 ) -\u230a / \u2375 ) , ( + / \u2375 ) \u00f7\u2262 \u2375 } range_average 5.48 6 5.63 6.02 5.37 0.65 5.7 range_average \u2190 ( \u2308 / -\u230a / ) ,+ / \u00f7\u2262 range_average 5.48 6 5.63 6.02 5.37 0.65 5.7 plusminus \u2190 { ( \u237a - \u2375 ) , \u237a , \u237a + \u2375 } 5.7 plusminus 0.65 5.05 5.7 6.35 plusminus \u2190 -,\u22a3,+ 5.7 plusminus 0.2 5.5 5.7 5.9 Notice that the arguments of the function were not referred to in the function trains, this style of programming is called tacit or \u201cpoint-free\u201d programming, borrowed from mathematics where it means taking data that can be described using points to be more fundamental than the points themselves, avoiding the need to refer to points explicitly. In this case, taking functions to be more fundamental than their description in terms of explicit arguments, w The most basic train is the 2-train (fg), in operator form f\u2364g, called an atop. The atop evaluates the function f monadically on the result of g applied to the arguments of the train. The following image is composed of three parts, the first being the APL syntax for the atop, the second being a tree-like representation of the atop where the evaluation happens from bottom to top, and the third is the atop in traditional mathematical notation. !!! info \u201cTrains in RIDE\u201d It is possible to make sense of trains by rendering them in various forms in the RIDE editor using the -trains option to the Box user command. For example, it is possible to render trains as trees using the following command. ] Box on - trains = tree You can use the help ]? command to get help for any user command in RIDE. Floored division can be conveniently expressed as an atop. 12 \u00f7 5 2.4 \u230a 2.4 2 12 ( \u230a\u00f7 ) 5 2 A very similar composition is achieved using the Beside operator, f\u2218g. More simply, the expression \u237a(f\u2218g)\u2375 evaluates to \u237afg\u2375, and recalling that APL is right associative, is \u237af(g\u2375). matrix \u2190 3 3 \u2374 ( 3 |\u2373 9 ) matrix 1 2 0 1 2 0 1 2 0 \u2349 matrix \u235d Transpose 1 1 1 2 2 2 0 0 0 \u235d Beside of matrix multiplication (+.\u00d7) and transpose (\u2349) matrix ( + . \u00d7 ) \u2218 \u2349 matrix 5 5 5 5 5 5 5 5 5 matrix ( + . \u00d7 ) \u2349 matrix 5 5 5 5 5 5 5 5 5 1 2 ( - / \u00d7 ) \u2218 \u2296 3 1 \u235d Cross product \u00af5 \u235d A beside of an atop and a function 1 2 ( - / \u00d7 ) \u2296 3 1 \u00af5 Notice that in the last statement, the atop -/\u00d7 and function \u2296 were composed into an atop. Since the atop -/\u00d7 is a functions in its own right, it can be used as part of larger trains. The Over \u2365 operator, f\u2365g, applies f to the value of g applied to each of its arguments. The decibel conversion from the start of this chapter can be easily written in this form. dB_to_ratio \u2190 { 10 * \u2375 \u00f7 10 } ratio_to_dB \u2190 { 10 \u00d7 10 \u235f \u2375 } \u235dOver of an atop and a function 60 ( ratio_to_dB \u00f7 ) \u2365 dB_to_ratio 30 30 ratio_to_dB (( dB_to_ratio 60 ) \u00f7 dB_to_ratio 30 ) 13.01029996 reciprocal_sum \u2190 { \u00f7 ( \u00f7 \u237a ) +\u00f7 \u2375 } 1 reciprocal_sum 2 0.6666666667 reciprocal_sum \u2190 ( \u00f7+ ) \u2365 \u00f7 1 reciprocal_sum 2 0.6666666667 hypotenuse \u2190 { (( \u237a * 2 ) + \u2375 * 2 ) * 0.5 } 3 hypotenuse 4 5 hypotenuse \u2190 ( * 0.5 + ) \u2365 ( * 2 ) SYNTAX ERROR hypotenuse \u2190 ( * 0.5 + ) \u2365 ( * 2 ) \u2227 When trying to adapt the hypotenuse function to point-free programming, a seemingly strange error appears complaining about syntax of our train. However, this error should not seem so bizzare after some thought, because the expression ( 0.5 +) is not a function, in fact, ( 0.5 +) evaluates to (1.648721271+) since the * function here is interpreted to act monadically on 0.5. In order to attach the value 0.5 to * and turn the dyadic * into a monadic {\u2375*0.5}, the bind \u2218 operator can be used. hypotenuse \u2190 ( * \u2218 0.5 + ) \u2365 ( * \u2218 2 ) 3 hypotenuse 4 5 Another form of the hypotenuse function is obtained by taking the magnitude of a complex number, with real and imaginary parts the arguments of the function. complex \u2190 + / ( 1 0J1 ) \u2218 \u00d7 complex 3 4 3J4 hypotenuse \u2190 | complex hypotenuse 3 4 5 hypotenuse \u2190 | ( + / ( 1 0J1 ) \u2218 \u00d7 ) hypotenuse 3 4 5 hypotenuse \u2190 | \u2364 + / ( 1 0J1 ) \u2218 \u00d7 hypotenuse 3 4 5 Another form of the hypotenuse function is obtained by taking the magnitude of a complex number, with real and imaginary parts the arguments of the function. Let\u2019s take a closer look at the trains at the beginning of this section, applied to vector values. range_average \u2190 ( \u2308 / -\u230a / ) ,+ / \u00f7\u2262 plusminus \u2190 -,\u22a3,+ Starting with range_average, we start reading from right to left identifying forks and atops. We first identify the 3-train +/\u00f7\u2262, which takes the sum +/ of the elements of a vector and divides \u00f7 by the length \u2262 of the vector, {(+/\u2375)\u00f7(\u2262\u2375)} as a function which takes an average. avg \u2190 + / \u00f7\u2262 range_average \u2190 ( \u2308 / -\u230a / ) , avg Then, the 3-train (\u2308/-\u230a/) takes the maximum \u2308/ and subtracts - by the minimum \u230a/, {(\u2308/\u2375)-(\u230a/\u2375)}, which gives the range of a series of values. avg \u2190 + / \u00f7\u2262 range \u2190 \u2308 / -\u230a / range_average \u2190 range , avg Then it\u2019s clear in this form that the function range_average takes the range and average of a series of values and returns both values in the form of a vector. The plus_minus function can be analysed similarly. plusminus \u2190 -,\u22a3,+ plusminus \u2190 -, ( \u22a3,+ ) plusminus \u2190 -, { \u2375 , \u237a + \u2375 } plusminus \u2190 { ( \u237a - \u2375 ) , ( \u2375 , \u237a + \u2375 ) } More generally, for an n-train of functions (f g h k l m \u2026 w x y z), (f g h k l m \u2026 t u v w x y z) is interpreted as (f g h k l m \u2026 t u v w (x y z)), which can be interpreted again as (f g h k l m \u2026 t u (v w (x y z))), and further recursively. If the number of functions is odd, then the result is of the form of forks over forks (f g (h k (l m \u2026 (t u (v w (x y z))))\u2026) If the number of functions is even, then the result is an atop over forks (f (g h (k l (m \u2026 (t u (v w (x y z))))\u2026)","title":"6.5 - ALL ABOARD!"},{"location":"course/ch6/part5/#all-aboard","text":"At this point, we feel compelled to apologize to the reader for not introducing another way of defining functions which is generally more concise, does not explicitly refer to any of the function arguments, and may have already been encountered accidentally. In order to make full use of this method of creation function trains , we briefly introduce the commonly used / symbol. The dyadic replicate / function repeats elements of its right hand argument array by a specified left hand argument array. This allows the use of boolean masks, which makes it commonly used to filter arrays. ( 2 |\u2373 9 ) / 'ballooned' blond ( ~ 2 |\u2373 9 ) / 'ballooned' aloe 2 1 1 1 1 1 / 'elfish' eelfish ( 5 = 8 |\u2373 26 ) / \u2395A EMU 0 0 0 1 1 0 0 0 1 1 0 0 / 'flamethrower' meow The monadic reduce / operator applies its left function argument between every element of a vector, or more generally, column of an array, and reduces the rank of the array by one. More on axis operations in Chapter 6. \u2373 10 1 2 3 4 5 6 7 8 9 10 + / \u2373 10 55 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 55 - / \u2373 10 \u00af5 1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 9 - 10 \u00af5 \u2227 / \u2373 20 \u235d LCM of numbers from 1 to 20 2520 3 3 \u2374\u2373 9 1 2 3 4 5 6 7 8 9 + / 3 3 \u2374\u2373 9 6 15 24 3 3 3 \u2374\u2373 27 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 + / 3 3 3 \u2374\u2373 27 6 15 24 33 42 51 60 69 78 Some other important functions are the dyadic right and left identity/\u201ctack\u201d functions which return their right or left arguments. \"True\" \u22a3 \"False\" True \"True\" \u22a2 \"False\" False When applied monadically, they return their only argument. Consider the following pairs of functions, implemented using dfns first, and trains second. range_average \u2190 { (( \u2308 / \u2375 ) -\u230a / \u2375 ) , ( + / \u2375 ) \u00f7\u2262 \u2375 } range_average 5.48 6 5.63 6.02 5.37 0.65 5.7 range_average \u2190 ( \u2308 / -\u230a / ) ,+ / \u00f7\u2262 range_average 5.48 6 5.63 6.02 5.37 0.65 5.7 plusminus \u2190 { ( \u237a - \u2375 ) , \u237a , \u237a + \u2375 } 5.7 plusminus 0.65 5.05 5.7 6.35 plusminus \u2190 -,\u22a3,+ 5.7 plusminus 0.2 5.5 5.7 5.9 Notice that the arguments of the function were not referred to in the function trains, this style of programming is called tacit or \u201cpoint-free\u201d programming, borrowed from mathematics where it means taking data that can be described using points to be more fundamental than the points themselves, avoiding the need to refer to points explicitly. In this case, taking functions to be more fundamental than their description in terms of explicit arguments, w The most basic train is the 2-train (fg), in operator form f\u2364g, called an atop. The atop evaluates the function f monadically on the result of g applied to the arguments of the train. The following image is composed of three parts, the first being the APL syntax for the atop, the second being a tree-like representation of the atop where the evaluation happens from bottom to top, and the third is the atop in traditional mathematical notation. !!! info \u201cTrains in RIDE\u201d It is possible to make sense of trains by rendering them in various forms in the RIDE editor using the -trains option to the Box user command. For example, it is possible to render trains as trees using the following command. ] Box on - trains = tree You can use the help ]? command to get help for any user command in RIDE. Floored division can be conveniently expressed as an atop. 12 \u00f7 5 2.4 \u230a 2.4 2 12 ( \u230a\u00f7 ) 5 2 A very similar composition is achieved using the Beside operator, f\u2218g. More simply, the expression \u237a(f\u2218g)\u2375 evaluates to \u237afg\u2375, and recalling that APL is right associative, is \u237af(g\u2375). matrix \u2190 3 3 \u2374 ( 3 |\u2373 9 ) matrix 1 2 0 1 2 0 1 2 0 \u2349 matrix \u235d Transpose 1 1 1 2 2 2 0 0 0 \u235d Beside of matrix multiplication (+.\u00d7) and transpose (\u2349) matrix ( + . \u00d7 ) \u2218 \u2349 matrix 5 5 5 5 5 5 5 5 5 matrix ( + . \u00d7 ) \u2349 matrix 5 5 5 5 5 5 5 5 5 1 2 ( - / \u00d7 ) \u2218 \u2296 3 1 \u235d Cross product \u00af5 \u235d A beside of an atop and a function 1 2 ( - / \u00d7 ) \u2296 3 1 \u00af5 Notice that in the last statement, the atop -/\u00d7 and function \u2296 were composed into an atop. Since the atop -/\u00d7 is a functions in its own right, it can be used as part of larger trains. The Over \u2365 operator, f\u2365g, applies f to the value of g applied to each of its arguments. The decibel conversion from the start of this chapter can be easily written in this form. dB_to_ratio \u2190 { 10 * \u2375 \u00f7 10 } ratio_to_dB \u2190 { 10 \u00d7 10 \u235f \u2375 } \u235dOver of an atop and a function 60 ( ratio_to_dB \u00f7 ) \u2365 dB_to_ratio 30 30 ratio_to_dB (( dB_to_ratio 60 ) \u00f7 dB_to_ratio 30 ) 13.01029996 reciprocal_sum \u2190 { \u00f7 ( \u00f7 \u237a ) +\u00f7 \u2375 } 1 reciprocal_sum 2 0.6666666667 reciprocal_sum \u2190 ( \u00f7+ ) \u2365 \u00f7 1 reciprocal_sum 2 0.6666666667 hypotenuse \u2190 { (( \u237a * 2 ) + \u2375 * 2 ) * 0.5 } 3 hypotenuse 4 5 hypotenuse \u2190 ( * 0.5 + ) \u2365 ( * 2 ) SYNTAX ERROR hypotenuse \u2190 ( * 0.5 + ) \u2365 ( * 2 ) \u2227 When trying to adapt the hypotenuse function to point-free programming, a seemingly strange error appears complaining about syntax of our train. However, this error should not seem so bizzare after some thought, because the expression ( 0.5 +) is not a function, in fact, ( 0.5 +) evaluates to (1.648721271+) since the * function here is interpreted to act monadically on 0.5. In order to attach the value 0.5 to * and turn the dyadic * into a monadic {\u2375*0.5}, the bind \u2218 operator can be used. hypotenuse \u2190 ( * \u2218 0.5 + ) \u2365 ( * \u2218 2 ) 3 hypotenuse 4 5 Another form of the hypotenuse function is obtained by taking the magnitude of a complex number, with real and imaginary parts the arguments of the function. complex \u2190 + / ( 1 0J1 ) \u2218 \u00d7 complex 3 4 3J4 hypotenuse \u2190 | complex hypotenuse 3 4 5 hypotenuse \u2190 | ( + / ( 1 0J1 ) \u2218 \u00d7 ) hypotenuse 3 4 5 hypotenuse \u2190 | \u2364 + / ( 1 0J1 ) \u2218 \u00d7 hypotenuse 3 4 5 Another form of the hypotenuse function is obtained by taking the magnitude of a complex number, with real and imaginary parts the arguments of the function. Let\u2019s take a closer look at the trains at the beginning of this section, applied to vector values. range_average \u2190 ( \u2308 / -\u230a / ) ,+ / \u00f7\u2262 plusminus \u2190 -,\u22a3,+ Starting with range_average, we start reading from right to left identifying forks and atops. We first identify the 3-train +/\u00f7\u2262, which takes the sum +/ of the elements of a vector and divides \u00f7 by the length \u2262 of the vector, {(+/\u2375)\u00f7(\u2262\u2375)} as a function which takes an average. avg \u2190 + / \u00f7\u2262 range_average \u2190 ( \u2308 / -\u230a / ) , avg Then, the 3-train (\u2308/-\u230a/) takes the maximum \u2308/ and subtracts - by the minimum \u230a/, {(\u2308/\u2375)-(\u230a/\u2375)}, which gives the range of a series of values. avg \u2190 + / \u00f7\u2262 range \u2190 \u2308 / -\u230a / range_average \u2190 range , avg Then it\u2019s clear in this form that the function range_average takes the range and average of a series of values and returns both values in the form of a vector. The plus_minus function can be analysed similarly. plusminus \u2190 -,\u22a3,+ plusminus \u2190 -, ( \u22a3,+ ) plusminus \u2190 -, { \u2375 , \u237a + \u2375 } plusminus \u2190 { ( \u237a - \u2375 ) , ( \u2375 , \u237a + \u2375 ) } More generally, for an n-train of functions (f g h k l m \u2026 w x y z), (f g h k l m \u2026 t u v w x y z) is interpreted as (f g h k l m \u2026 t u v w (x y z)), which can be interpreted again as (f g h k l m \u2026 t u (v w (x y z))), and further recursively. If the number of functions is odd, then the result is of the form of forks over forks (f g (h k (l m \u2026 (t u (v w (x y z))))\u2026) If the number of functions is even, then the result is an atop over forks (f (g h (k l (m \u2026 (t u (v w (x y z))))\u2026)","title":"ALL ABOARD!"},{"location":"course/ch6/read/","text":"Read exercises For each of the following exercises, try to figure out what the input will produce in the TryAPL terminal. Check your answers by opening the \"Output\" tab. If you think an error will occur, try to predict which error it will be and where the arrow will point to. The exercises are not checked or graded: use them to check your knowledge!","title":"6.R - Read exercises"},{"location":"course/ch6/read/#read-exercises","text":"For each of the following exercises, try to figure out what the input will produce in the TryAPL terminal. Check your answers by opening the \"Output\" tab. If you think an error will occur, try to predict which error it will be and where the arrow will point to. The exercises are not checked or graded: use them to check your knowledge!","title":"Read exercises"},{"location":"course/ch6/summary/","text":"Function index Here is a table of symbols we have used and how to type them in TryAPL. It might be useful to review this page as you are doing the read and write exercises in the next sections. New functions Symbol Name Function Key combination Old functions Symbol Name Function Key combination + Plus Addition + - Minus Subtraction - \u00d7 Times Multiplication PREFIX - \u00f7 Divide Division PREFIX = * Power Exponentiation * \u00af Negative sign Negation of a number PREFIX 2 \u235d Lamp Comment PREFIX , \u2190 Assignment operator Assigning variables < - Tab \u2395 Quad Printing PREFIX L","title":"6.S - Summary"},{"location":"course/ch6/summary/#function-index","text":"Here is a table of symbols we have used and how to type them in TryAPL. It might be useful to review this page as you are doing the read and write exercises in the next sections.","title":"Function index"},{"location":"course/ch6/summary/#new-functions","text":"Symbol Name Function Key combination","title":"New functions"},{"location":"course/ch6/summary/#old-functions","text":"Symbol Name Function Key combination + Plus Addition + - Minus Subtraction - \u00d7 Times Multiplication PREFIX - \u00f7 Divide Division PREFIX = * Power Exponentiation * \u00af Negative sign Negation of a number PREFIX 2 \u235d Lamp Comment PREFIX , \u2190 Assignment operator Assigning variables < - Tab \u2395 Quad Printing PREFIX L","title":"Old functions"},{"location":"course/ch6/write/","text":"Write exercises Submit APL code for the following exercises. Your submissions are graded using TMC. Make sure to log in to be able to submit your work! Remember, you can test out ideas and develop you solution at TryAPL before submitting it here. You can submit as many solutions as you like. If you submit a correct solution at least once, you will receive points on the TMC server and be able to see the model solution. If the write problem is red, it is unsolved. If it it green, you have solved it and received points for it on the server.","title":"6.W - Write exercises"},{"location":"course/ch6/write/#write-exercises","text":"Submit APL code for the following exercises. Your submissions are graded using TMC. Make sure to log in to be able to submit your work! Remember, you can test out ideas and develop you solution at TryAPL before submitting it here. You can submit as many solutions as you like. If you submit a correct solution at least once, you will receive points on the TMC server and be able to see the model solution. If the write problem is red, it is unsolved. If it it green, you have solved it and received points for it on the server.","title":"Write exercises"},{"location":"course/ch7/part1/","text":"Development environment This part will cover: - Setting up your development environment - Dyalog LINK","title":"7.1 - Development environment"},{"location":"course/ch7/part1/#development-environment","text":"This part will cover: - Setting up your development environment - Dyalog LINK","title":"Development environment"},{"location":"course/ch7/part2/","text":"Branching and looping This part will cover: - If, else if, else - For, while","title":"7.2 - Branching and looping"},{"location":"course/ch7/part2/#branching-and-looping","text":"This part will cover: - If, else if, else - For, while","title":"Branching and looping"},{"location":"course/ch7/part3/","text":"Execute and format This part will cover: - Execute - Format","title":"7.3 - Execute and format"},{"location":"course/ch7/part3/#execute-and-format","text":"This part will cover: - Execute - Format","title":"Execute and format"},{"location":"course/ch7/part4/","text":"Writing interactive programs This part will cover: - Writing interactive programs - Input and output - Configurability","title":"7.4 - Writing interactive programs"},{"location":"course/ch7/part4/#writing-interactive-programs","text":"This part will cover: - Writing interactive programs - Input and output - Configurability","title":"Writing interactive programs"},{"location":"course/ch7/part5/","text":"File I/O This part will cover: - File reading and writing - Quad CSV","title":"7.5 - File I/O"},{"location":"course/ch7/part5/#file-io","text":"This part will cover: - File reading and writing - Quad CSV","title":"File I/O"},{"location":"course/ch7/project/","text":"Project work This section will contain the final exercises students need to submit. The exercises will be long and require students to write longer, more involved programs and submit them to the test server.","title":"7.P - Programming project"},{"location":"course/ch7/project/#project-work","text":"This section will contain the final exercises students need to submit. The exercises will be long and require students to write longer, more involved programs and submit them to the test server.","title":"Project work"},{"location":"course/ch7/summary/","text":"Function index Here is a table of symbols we have used and how to type them in TryAPL. It might be useful to review this page as you are doing the read and write exercises in the next sections. New functions Symbol Name Function Key combination Old functions Symbol Name Function Key combination + Plus Addition + - Minus Subtraction - \u00d7 Times Multiplication PREFIX - \u00f7 Divide Division PREFIX = * Power Exponentiation * \u00af Negative sign Negation of a number PREFIX 2 \u235d Lamp Comment PREFIX , \u2190 Assignment operator Assigning variables < - Tab \u2395 Quad Printing PREFIX L","title":"7.S - Summary"},{"location":"course/ch7/summary/#function-index","text":"Here is a table of symbols we have used and how to type them in TryAPL. It might be useful to review this page as you are doing the read and write exercises in the next sections.","title":"Function index"},{"location":"course/ch7/summary/#new-functions","text":"Symbol Name Function Key combination","title":"New functions"},{"location":"course/ch7/summary/#old-functions","text":"Symbol Name Function Key combination + Plus Addition + - Minus Subtraction - \u00d7 Times Multiplication PREFIX - \u00f7 Divide Division PREFIX = * Power Exponentiation * \u00af Negative sign Negation of a number PREFIX 2 \u235d Lamp Comment PREFIX , \u2190 Assignment operator Assigning variables < - Tab \u2395 Quad Printing PREFIX L","title":"Old functions"}]}