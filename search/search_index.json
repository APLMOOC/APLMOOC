{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"APL MOOC This is an online course on array programming in APL. No prior array programming knowledge is required; however, being familiar with at least one other programming language is highly recommended. This course is a work-in-progress. When complete, it is intended to be an official 5 ECTS credit course at the University of Helsinki. Course developed and written by Sergey Ichtchenko (sergey.ichtchenko[at]helsinki.fi), Dani Adham (dani.adham[at]helsinki.fi), and Hex. Thank you to Dyalog Ltd. for collaborating on this MOOC. What are you waiting for? Get started!","title":"Home"},{"location":"#apl-mooc","text":"This is an online course on array programming in APL. No prior array programming knowledge is required; however, being familiar with at least one other programming language is highly recommended. This course is a work-in-progress. When complete, it is intended to be an official 5 ECTS credit course at the University of Helsinki. Course developed and written by Sergey Ichtchenko (sergey.ichtchenko[at]helsinki.fi), Dani Adham (dani.adham[at]helsinki.fi), and Hex. Thank you to Dyalog Ltd. for collaborating on this MOOC. What are you waiting for? Get started!","title":"APL MOOC"},{"location":"account/","text":"Account Sign in with your mooc.fi credentials to be able to submit write problems to TMC and receive problem points. Log in Log out $=>document.querySelector","title":"Account"},{"location":"account/#account","text":"Sign in with your mooc.fi credentials to be able to submit write problems to TMC and receive problem points. Log in Log out $=>document.querySelector","title":"Account"},{"location":"progress/","text":"Progress After you have completed at least 60% of the graded exercises, you can use the credits request form to request ECTS credits for the course. Your progress Table There will be a table here tracking which exercises you've done and your current grade. Statistics Table There will be a table here showing how many people have done each exercise in the course. Request credits Once you have successfully completed at least 60% of the write exercises in each chapter , you can get 5 ECTS credits for completion. If you solve at least 60% of the exercises, you get a grade of 1. If you solve at least 90% of the exercises, you get a grade of 4. If you solve at least 99% of the exercises, you get a grade of 5. Please use the below form to submit a request for credits once you have completed enough exercises. Note This form is not currently available, as the course has not been registered as a University of Helsinki MOOC yet.","title":"Progress"},{"location":"progress/#progress","text":"After you have completed at least 60% of the graded exercises, you can use the credits request form to request ECTS credits for the course.","title":"Progress"},{"location":"progress/#your-progress","text":"Table There will be a table here tracking which exercises you've done and your current grade.","title":"Your progress"},{"location":"progress/#statistics","text":"Table There will be a table here showing how many people have done each exercise in the course.","title":"Statistics"},{"location":"progress/#request-credits","text":"Once you have successfully completed at least 60% of the write exercises in each chapter , you can get 5 ECTS credits for completion. If you solve at least 60% of the exercises, you get a grade of 1. If you solve at least 90% of the exercises, you get a grade of 4. If you solve at least 99% of the exercises, you get a grade of 5. Please use the below form to submit a request for credits once you have completed enough exercises. Note This form is not currently available, as the course has not been registered as a University of Helsinki MOOC yet.","title":"Request credits"},{"location":"course/ch0/part1/","text":"Welcome to the wonderful world of APL programming! APL is quirky, different, and not like the other programming languages. One December, I was doing the Advent of Code (AoC) challenges. These are fun, small programming projects that are given to you in the form of a Christmas advent calendar. There are 2 challenges per day, for a grand total of 50 throughout December. Throughout the month, text like this was posted on forums: east \u2190 \u22a2 { ( \u237a + \u00af1 \u233d \u2375 ) - \u2375 } 0 \u2218 <\u2227 0 = 1 \u2218 \u233d \u235d (1)! Example taken from https://github.com/pitr/aoc/blob/main/2021/25.apl I was very confused. These were meant to be solutions to the AoC problems. However, I couldn't see how in the world these could represent any sort of algorithm, much less a solution. Were these... Encrypted solutions? Solutions encoded in some weird format? Trolls meant to confuse me? My computer bugging out? Turns out, it was none of these. After a bit more research, I found out that it was something called APL . APL APL stands for... A P rogramming L anguage. Great naming, right? Out of curiosity, I tried finding APL solutions to the AoC challenges after Christmas passed. At one point, I found a solution that spanned just 50 lines. As a note, a Python solution for one challenge (towards the end of the month) is usually about 150-200 lines long. In its 50 lines, the APL solution apparently solved all the problems. That was cool. APL looks different, feels different, and it challenges your normal way of thinking about programming. I hope that this course will expand your mind and let you approach programming from a whole new perspective.","title":"0.1 - Quirky and different"},{"location":"course/ch0/part1/#welcome-to-the-wonderful-world-of-apl-programming","text":"APL is quirky, different, and not like the other programming languages. One December, I was doing the Advent of Code (AoC) challenges. These are fun, small programming projects that are given to you in the form of a Christmas advent calendar. There are 2 challenges per day, for a grand total of 50 throughout December. Throughout the month, text like this was posted on forums: east \u2190 \u22a2 { ( \u237a + \u00af1 \u233d \u2375 ) - \u2375 } 0 \u2218 <\u2227 0 = 1 \u2218 \u233d \u235d (1)! Example taken from https://github.com/pitr/aoc/blob/main/2021/25.apl I was very confused. These were meant to be solutions to the AoC problems. However, I couldn't see how in the world these could represent any sort of algorithm, much less a solution. Were these... Encrypted solutions? Solutions encoded in some weird format? Trolls meant to confuse me? My computer bugging out? Turns out, it was none of these. After a bit more research, I found out that it was something called APL . APL APL stands for... A P rogramming L anguage. Great naming, right? Out of curiosity, I tried finding APL solutions to the AoC challenges after Christmas passed. At one point, I found a solution that spanned just 50 lines. As a note, a Python solution for one challenge (towards the end of the month) is usually about 150-200 lines long. In its 50 lines, the APL solution apparently solved all the problems. That was cool. APL looks different, feels different, and it challenges your normal way of thinking about programming. I hope that this course will expand your mind and let you approach programming from a whole new perspective.","title":"Welcome to the wonderful world of APL programming!"},{"location":"course/ch0/part2/","text":"What's the big idea? APL... ...is an array language. Another (unofficial) name for APL is \"Array Programming Language\". All operations in the language work on lists, matrices, and higher dimensional arrays. Many tasks that require data processing and operations on large amounts of structured data work really well in APL. You might have heard that programming languages can be classified into a few different types: Imperative languages (Python, Java, C, R, etc.) Functional languages (Haskell, Clojure, etc.) A new addition to this list, which you might not have heard of, is Array languages (APL and its derivatives, Fortran, etc.) Array languages are considered separate from the previous two categories, as they operate differently. Instead of having variables and operations (imperative) or functions (functional) as primitive objects, array languages use arrays and array algorithms as primitives. This requires a separate form of thinking from how you would program in other languages, which makes it interesting to learn even if you already know an imperative language like Python. ...uses special characters. Look at the top of the screen: that long bar with characters is the APL language! Don't be afraid: while mysterious at first, you'll grow to learn and love them. ...is untyped. There is no concept of type in APL. The underlying interpreter abstracts it all away from you and lets you focus on processing data, not its types. ...is high-level. In fact, APL abstracts a lot of normal operations from you. There are no concepts of memory, pointers, loops (in their traditional sense), or other primitives that, as a traditional (imperative) programmer, one needs to think about and understand when writing algorithms and code. The power of APL Some people say that APL is \"confusing\" and \"difficult to read\" due to its special characters. However, I disagree. APL is just as readable as any language. An English person can't read Finnish either without a little practice! On the contrary, APL is sometimes easier to read than imperative languages. Consider the following problem: Example problem Write a program that takes in a list of numbers. Is the product of all the numbers positive, negative, or zero? Return the sign of the product (1 if it is positive, -1 if it is negative, and 0 if it is zero). There are many ways to solve this problem (try it in Python or a language you are already familiar with!). The na\u00efve way - multiplying all the numbers together - is inefficient and may cause integer overflow for big lists or big numbers in some languages. Consider the following efficient solution in Python. Python solution Solution: def solution ( values ): result = 1 for value in values : if value == 0 : result = 0 break elif value > 0 : continue else : result *= - 1 print ( result ) Execution: solution ([ 1 , 3 , 5 , - 4 ]) Result: - 1 Sure, this solution could definitely be optimised and shortened. However, this is also how beginner Python programmers are often taught to approach problems such as this. You'll notice that there is a lot of overhead in this solution: the programmer manually go through the list using a loop, handle all of the different cases (making sure they are exhaustive), and print the result to the screen themselves. New students have to understand that functions are called using parentheses, while square brackets and commas are used for lists. Compare this to the equivalent APL solution. APL solution Solution: solution \u2190 \u00d7 / \u00d7 Execution: solution 1 3 5 \u00af4 Result: \u00af1 This isn't just part of the solution, this isn't a little section thereof, this is the whole solution . To an APL thinker, this is perfectly clear and legible! The symbols essentially tell the interpreter the following: \"Take the signs of all the elements of the input list, and multiply them together\". There is no mention of types, no mention of loops, just operations acting on a structured list of data. This is the power of APL: you can express simple constructs simply and effectively, with the rest abstracted away!","title":"0.2 - What's the big idea?"},{"location":"course/ch0/part2/#whats-the-big-idea","text":"","title":"What's the big idea?"},{"location":"course/ch0/part2/#apl","text":"","title":"APL..."},{"location":"course/ch0/part2/#is-an-array-language","text":"Another (unofficial) name for APL is \"Array Programming Language\". All operations in the language work on lists, matrices, and higher dimensional arrays. Many tasks that require data processing and operations on large amounts of structured data work really well in APL. You might have heard that programming languages can be classified into a few different types: Imperative languages (Python, Java, C, R, etc.) Functional languages (Haskell, Clojure, etc.) A new addition to this list, which you might not have heard of, is Array languages (APL and its derivatives, Fortran, etc.) Array languages are considered separate from the previous two categories, as they operate differently. Instead of having variables and operations (imperative) or functions (functional) as primitive objects, array languages use arrays and array algorithms as primitives. This requires a separate form of thinking from how you would program in other languages, which makes it interesting to learn even if you already know an imperative language like Python.","title":"...is an array language."},{"location":"course/ch0/part2/#uses-special-characters","text":"Look at the top of the screen: that long bar with characters is the APL language! Don't be afraid: while mysterious at first, you'll grow to learn and love them.","title":"...uses special characters."},{"location":"course/ch0/part2/#is-untyped","text":"There is no concept of type in APL. The underlying interpreter abstracts it all away from you and lets you focus on processing data, not its types.","title":"...is untyped."},{"location":"course/ch0/part2/#is-high-level","text":"In fact, APL abstracts a lot of normal operations from you. There are no concepts of memory, pointers, loops (in their traditional sense), or other primitives that, as a traditional (imperative) programmer, one needs to think about and understand when writing algorithms and code.","title":"...is high-level."},{"location":"course/ch0/part2/#the-power-of-apl","text":"Some people say that APL is \"confusing\" and \"difficult to read\" due to its special characters. However, I disagree. APL is just as readable as any language. An English person can't read Finnish either without a little practice! On the contrary, APL is sometimes easier to read than imperative languages. Consider the following problem: Example problem Write a program that takes in a list of numbers. Is the product of all the numbers positive, negative, or zero? Return the sign of the product (1 if it is positive, -1 if it is negative, and 0 if it is zero). There are many ways to solve this problem (try it in Python or a language you are already familiar with!). The na\u00efve way - multiplying all the numbers together - is inefficient and may cause integer overflow for big lists or big numbers in some languages. Consider the following efficient solution in Python. Python solution Solution: def solution ( values ): result = 1 for value in values : if value == 0 : result = 0 break elif value > 0 : continue else : result *= - 1 print ( result ) Execution: solution ([ 1 , 3 , 5 , - 4 ]) Result: - 1 Sure, this solution could definitely be optimised and shortened. However, this is also how beginner Python programmers are often taught to approach problems such as this. You'll notice that there is a lot of overhead in this solution: the programmer manually go through the list using a loop, handle all of the different cases (making sure they are exhaustive), and print the result to the screen themselves. New students have to understand that functions are called using parentheses, while square brackets and commas are used for lists. Compare this to the equivalent APL solution. APL solution Solution: solution \u2190 \u00d7 / \u00d7 Execution: solution 1 3 5 \u00af4 Result: \u00af1 This isn't just part of the solution, this isn't a little section thereof, this is the whole solution . To an APL thinker, this is perfectly clear and legible! The symbols essentially tell the interpreter the following: \"Take the signs of all the elements of the input list, and multiply them together\". There is no mention of types, no mention of loops, just operations acting on a structured list of data. This is the power of APL: you can express simple constructs simply and effectively, with the rest abstracted away!","title":"The power of APL"},{"location":"course/ch0/part3/","text":"Resources For some extra practice and information, check out the following resources: APL Practice Problems APL Problem Solving Competition , held every year Dyalog , the developer of the APL interpreter","title":"0.3 - Useful resources"},{"location":"course/ch0/part3/#resources","text":"For some extra practice and information, check out the following resources: APL Practice Problems APL Problem Solving Competition , held every year Dyalog , the developer of the APL interpreter","title":"Resources"},{"location":"course/ch0/part4/","text":"About the course Chapters This course consists of 7 chapters. Each chapter has multiple parts with material. At the end of each chapter, you can find the following parts: Summary , which contains a recap of the symbols used in the chapter material Read exercises , which are ungraded problems you can use to test your knowledge of the material by reading Write exercises , which are graded programming exercises you need to submit to the server Bonus content , which is additional content you might find interesting but which is fully optional and not assessed. These pages cover slightly larger projects and may use topics that have not yet been discussed in the course. Grading Once you have successfully completed at least 60% of the write exercises in each chapter , you can get 5 ECTS credits for completion. If you solve at least 60% of the exercises, you get a grade of 1. If you solve at least 90% of the exercises, you get a grade of 4. If you solve at least 99% of the exercises, you get a grade of 5. Please see the progress page for instructions on getting study credits for this course. Note ECTS credits are not currently available, as the course has not been registered as a University of Helsinki MOOC yet.","title":"0.4 - About the course"},{"location":"course/ch0/part4/#about-the-course","text":"","title":"About the course"},{"location":"course/ch0/part4/#chapters","text":"This course consists of 7 chapters. Each chapter has multiple parts with material. At the end of each chapter, you can find the following parts: Summary , which contains a recap of the symbols used in the chapter material Read exercises , which are ungraded problems you can use to test your knowledge of the material by reading Write exercises , which are graded programming exercises you need to submit to the server Bonus content , which is additional content you might find interesting but which is fully optional and not assessed. These pages cover slightly larger projects and may use topics that have not yet been discussed in the course.","title":"Chapters"},{"location":"course/ch0/part4/#grading","text":"Once you have successfully completed at least 60% of the write exercises in each chapter , you can get 5 ECTS credits for completion. If you solve at least 60% of the exercises, you get a grade of 1. If you solve at least 90% of the exercises, you get a grade of 4. If you solve at least 99% of the exercises, you get a grade of 5. Please see the progress page for instructions on getting study credits for this course. Note ECTS credits are not currently available, as the course has not been registered as a University of Helsinki MOOC yet.","title":"Grading"},{"location":"course/ch1/part1/","text":"Immediate execution mode Let's get started with some basic APL! For the first few chapters, we will be working with the REPL available at TryAPL . If you've ever tried running python3 ( py for W*ndows users) or the IDLE editor on your computer, this is the same thing. The REPL will wait for you to enter a command, then evaluate and print the result (if your command resulted in a result), after which it will return control back to you. This will repeat for as long as your heart desires. Try it yourself You can run APL code at tryapl.org Try running the commands in this chapter yourself. You can also use the REPL for playing around, testing out ideas, and working on the write exercises at the end of the chapter. The mode you land in by default is called Immediate Execution mode (because it immediately executes whatever you give it). Other modes include Execution mode, Function Editing mode, Character Input mode, Evaluated Input mode, and GUI Input Form mode. We will get back to these modes in future chapters. Surprisingly enough, this style of prompt is how APL code has been written for the longest time! By using the different modes outlined above, alongside APL workspaces and an APL IDE, you can write any programs you like. Thankfully, since we live in the 2000s, some APL developers have realised that it might be smart to finally get with the times and let programmers write their code in text files that are executed by an APL interpreter. This is fairly straightforward to do but requires some configuration, so we will get back to this in a later chapter. For now, the TryAPL interpreter will be enough.","title":"1.1 - Immediate execution mode"},{"location":"course/ch1/part1/#immediate-execution-mode","text":"Let's get started with some basic APL! For the first few chapters, we will be working with the REPL available at TryAPL . If you've ever tried running python3 ( py for W*ndows users) or the IDLE editor on your computer, this is the same thing. The REPL will wait for you to enter a command, then evaluate and print the result (if your command resulted in a result), after which it will return control back to you. This will repeat for as long as your heart desires. Try it yourself You can run APL code at tryapl.org Try running the commands in this chapter yourself. You can also use the REPL for playing around, testing out ideas, and working on the write exercises at the end of the chapter. The mode you land in by default is called Immediate Execution mode (because it immediately executes whatever you give it). Other modes include Execution mode, Function Editing mode, Character Input mode, Evaluated Input mode, and GUI Input Form mode. We will get back to these modes in future chapters. Surprisingly enough, this style of prompt is how APL code has been written for the longest time! By using the different modes outlined above, alongside APL workspaces and an APL IDE, you can write any programs you like. Thankfully, since we live in the 2000s, some APL developers have realised that it might be smart to finally get with the times and let programmers write their code in text files that are executed by an APL interpreter. This is fairly straightforward to do but requires some configuration, so we will get back to this in a later chapter. For now, the TryAPL interpreter will be enough.","title":"Immediate execution mode"},{"location":"course/ch1/part2/","text":"Basic operations and input This part will cover Basic operations in APL Monadic and dyadic functions Some pitfalls Okay, so we have TryAPL open. Now what? APL is a programming language, so it would make sense if it could, at least, do some basic arithmetic. Let's try it out! How about addition? 2 + 2 4 Okay, it seems to be able to handle that. Great start! You'll notice that the programmer's input is indented, while the interpreter's output is not. You can think of it as a conversation, where you are on the right and the interpreter is on the left. Keep this in mind. It will be important for later. Time to try subtraction... 8 - 5 3 5 - 8 \u00af3 Okay, so that seems to work as well. But wait, why is the negative sign before the number 3 rendered weirdly? It looks different from the minus sign we typed. As it turns out, there are two signs for negation in APL. One of them is a minus function ( - ), that subtracts two numbers. The other is a negative sign ( \u00af ), which is slightly higher and tells APL that a number is negative. The negative sign is not a function! In the same way that a full stop ( . ) decorates a number ( 3.14159 ) to show that it has a decimal part, the negative sign ( \u00af ) decorates a number ( \u00af1337 ) to show that it's negative. Functions In APL, functions take in arguments and produce results . Most APL symbols are functions . You will get familiar with them in the next chapters. Functions can have arguments to their left and right. If a function has both left and right arguments , it is called dyadic (di = two). If a function has only one argument on the right , it is called monadic (mono = one). If a function doesn't take arguments (quite rare!), it is called niladic (nil = zero). Functions with only one argument on the left do not exist in APL. Results are what a function \"spits out\". You can imagine the result of the function replacing the function after its execution is done, just like in any other programming language. There are also functions that do not return any results. Multiplication should work just as intuitively. 2 * 2 4 2 * 5 32 Wait, what? 2*2 evaluated to 4 , while 2*5 evaluated to 32 ?! This isn't multiplication, it's exponentiation! What's going on here? Warning APL was created by mathematicians in the 1960s. Mathematicians love weird and funny symbols. This was the time before Unicode, the standard way in which we encode characters today, was invented. As such, the creators were free to invent any typewriter symbols they wanted (yes, APL was written on a typewriter), and added a lot of special symbols that look really cool but aren't found on any modern keyboards. There are lots of symbols implemented in Unicode even today just because they were invented by APL'ers before any proper standards were written. You will learn how to type them shortly! In fact, the creators of APL added a special multiplication cross ( \u00d7 ) to do multiplication. Not to be confused with the letter x ! Similarly, division is done with the dedicated mathematical division symbol ( \u00f7 ). Let's try them out: 2 \u00d7 2 4 2 \u00d7 5 10 7 \u00f7 2 3.5 2 \u00f7 7 0.2857142857 123 \u00d7 \u00af456 \u00af56088 Funkar som den ska. Significant figures APL will display results of your calculations to 10 significant figures. Internally, APL calculates all floating-point operations to 16 or 17 significant figures, which is a suitable level of accuracy for most (if not all) applications.","title":"1.2 - Basic operations and input"},{"location":"course/ch1/part2/#basic-operations-and-input","text":"This part will cover Basic operations in APL Monadic and dyadic functions Some pitfalls Okay, so we have TryAPL open. Now what? APL is a programming language, so it would make sense if it could, at least, do some basic arithmetic. Let's try it out! How about addition? 2 + 2 4 Okay, it seems to be able to handle that. Great start! You'll notice that the programmer's input is indented, while the interpreter's output is not. You can think of it as a conversation, where you are on the right and the interpreter is on the left. Keep this in mind. It will be important for later. Time to try subtraction... 8 - 5 3 5 - 8 \u00af3 Okay, so that seems to work as well. But wait, why is the negative sign before the number 3 rendered weirdly? It looks different from the minus sign we typed. As it turns out, there are two signs for negation in APL. One of them is a minus function ( - ), that subtracts two numbers. The other is a negative sign ( \u00af ), which is slightly higher and tells APL that a number is negative. The negative sign is not a function! In the same way that a full stop ( . ) decorates a number ( 3.14159 ) to show that it has a decimal part, the negative sign ( \u00af ) decorates a number ( \u00af1337 ) to show that it's negative. Functions In APL, functions take in arguments and produce results . Most APL symbols are functions . You will get familiar with them in the next chapters. Functions can have arguments to their left and right. If a function has both left and right arguments , it is called dyadic (di = two). If a function has only one argument on the right , it is called monadic (mono = one). If a function doesn't take arguments (quite rare!), it is called niladic (nil = zero). Functions with only one argument on the left do not exist in APL. Results are what a function \"spits out\". You can imagine the result of the function replacing the function after its execution is done, just like in any other programming language. There are also functions that do not return any results. Multiplication should work just as intuitively. 2 * 2 4 2 * 5 32 Wait, what? 2*2 evaluated to 4 , while 2*5 evaluated to 32 ?! This isn't multiplication, it's exponentiation! What's going on here? Warning APL was created by mathematicians in the 1960s. Mathematicians love weird and funny symbols. This was the time before Unicode, the standard way in which we encode characters today, was invented. As such, the creators were free to invent any typewriter symbols they wanted (yes, APL was written on a typewriter), and added a lot of special symbols that look really cool but aren't found on any modern keyboards. There are lots of symbols implemented in Unicode even today just because they were invented by APL'ers before any proper standards were written. You will learn how to type them shortly! In fact, the creators of APL added a special multiplication cross ( \u00d7 ) to do multiplication. Not to be confused with the letter x ! Similarly, division is done with the dedicated mathematical division symbol ( \u00f7 ). Let's try them out: 2 \u00d7 2 4 2 \u00d7 5 10 7 \u00f7 2 3.5 2 \u00f7 7 0.2857142857 123 \u00d7 \u00af456 \u00af56088 Funkar som den ska. Significant figures APL will display results of your calculations to 10 significant figures. Internally, APL calculates all floating-point operations to 16 or 17 significant figures, which is a suitable level of accuracy for most (if not all) applications.","title":"Basic operations and input"},{"location":"course/ch1/part3/","text":"How do I type these characters?!?!?!? Step 1: go to Amazon and buy a special APL typewriter keyboard... Just kidding (thankfully). In the modern day and age, there are way better options: Simplest: Press the buttons in the IDE At the top of the TryAPL page (and this course page) there are symbols you can click. You can also hover over them to get a quick overview of what each symbol does in APL. This is, however, quite slow when you need to write APL code fast . Find some alternatives below. Quickest: Use keyboard shortcuts On TryAPL (and this page), you can use prefixes to insert various special symbols. You can use any of the following keys as a prefix: ` \u00a7 \u00b0 \u00b2 \u00b5 \u00ba \u00bd \u00f9 On Finnish keyboards, the \u00a7 key (located to the left of 1 ) is the easiest to use. On US and UK keyboards, the ` key is preferred. Whichever key you pick we will denote as PREFIX from now on. To use prefixes, hit whatever prefix key you are using, followed by the key you want to type. For example, the multiplication symbol \u00d7 is inserted by typing PREFIX - and division \u00f7 is inserted with PREFIX = . While these might seem unintuitive at first, you'll get used to them fairly quickly. You can see the completion shortcut if you hover over the symbol in the top language bar. For example, hovering over \u00d7 shows tells you the following: Prefix: <prefix> - . These are just instructions telling you to do what we did above. Quickest (alternative): Tab completion Sometimes, if you have a Finnish keyboard, you will be unable to type certain prefix shortcuts that were designed for US keyboards. Thankfully, there is an alternative: tab completions. You can find the keys needed for tab completion in the same tooltip that shows you what keys to use for the prefix shortcuts. For example, hovering over the arrow symbol ( \u2190 ) shows the follwing information: < - <tab> . Just follow the instructions and hit the keys < - Tab . You'll notice that the alternative, PREFIX [ is impossible to type on a Finnish keyboard, as it doesn't have a separate [ key (and using AltGr breaks the APL shortcut). Note! Tab completion is only required for non-US users due to a bug feature in TryAPL, which is that it's designed with only US keyboards in mind. When we install the Dyalog IDE in a future chapter, this will no longer be a concern, as that supports Finnish (and various other non-US) keyboards natively. Excessive: Install the APL Keyboard You can install a dedicated keyboard for APL glyphs. See further instructions on the Dyalog website . This method provides no extra benefits unless you want to type APL outside of TryAPL, this webpage, or the IDE. We will also see in a later chapter how to install a plugin for Visual Studio Code that allows you to type APL characters.","title":"1.3 - How do I type these characters?!?!?!?"},{"location":"course/ch1/part3/#how-do-i-type-these-characters","text":"Step 1: go to Amazon and buy a special APL typewriter keyboard... Just kidding (thankfully). In the modern day and age, there are way better options:","title":"How do I type these characters?!?!?!?"},{"location":"course/ch1/part3/#simplest-press-the-buttons-in-the-ide","text":"At the top of the TryAPL page (and this course page) there are symbols you can click. You can also hover over them to get a quick overview of what each symbol does in APL. This is, however, quite slow when you need to write APL code fast . Find some alternatives below.","title":"Simplest: Press the buttons in the IDE"},{"location":"course/ch1/part3/#quickest-use-keyboard-shortcuts","text":"On TryAPL (and this page), you can use prefixes to insert various special symbols. You can use any of the following keys as a prefix: ` \u00a7 \u00b0 \u00b2 \u00b5 \u00ba \u00bd \u00f9 On Finnish keyboards, the \u00a7 key (located to the left of 1 ) is the easiest to use. On US and UK keyboards, the ` key is preferred. Whichever key you pick we will denote as PREFIX from now on. To use prefixes, hit whatever prefix key you are using, followed by the key you want to type. For example, the multiplication symbol \u00d7 is inserted by typing PREFIX - and division \u00f7 is inserted with PREFIX = . While these might seem unintuitive at first, you'll get used to them fairly quickly. You can see the completion shortcut if you hover over the symbol in the top language bar. For example, hovering over \u00d7 shows tells you the following: Prefix: <prefix> - . These are just instructions telling you to do what we did above.","title":"Quickest: Use keyboard shortcuts"},{"location":"course/ch1/part3/#quickest-alternative-tab-completion","text":"Sometimes, if you have a Finnish keyboard, you will be unable to type certain prefix shortcuts that were designed for US keyboards. Thankfully, there is an alternative: tab completions. You can find the keys needed for tab completion in the same tooltip that shows you what keys to use for the prefix shortcuts. For example, hovering over the arrow symbol ( \u2190 ) shows the follwing information: < - <tab> . Just follow the instructions and hit the keys < - Tab . You'll notice that the alternative, PREFIX [ is impossible to type on a Finnish keyboard, as it doesn't have a separate [ key (and using AltGr breaks the APL shortcut). Note! Tab completion is only required for non-US users due to a bug feature in TryAPL, which is that it's designed with only US keyboards in mind. When we install the Dyalog IDE in a future chapter, this will no longer be a concern, as that supports Finnish (and various other non-US) keyboards natively.","title":"Quickest (alternative): Tab completion"},{"location":"course/ch1/part3/#excessive-install-the-apl-keyboard","text":"You can install a dedicated keyboard for APL glyphs. See further instructions on the Dyalog website . This method provides no extra benefits unless you want to type APL outside of TryAPL, this webpage, or the IDE. We will also see in a later chapter how to install a plugin for Visual Studio Code that allows you to type APL characters.","title":"Excessive: Install the APL Keyboard"},{"location":"course/ch1/part4/","text":"Order of execution This part will cover Right-to-left execution Using parentheses Comments Okay, we've tried adding and multiplying two numbers together. What if we try adding and multiplying three numbers at the same time? 2 \u00d7 2 4 2 \u00d7 2 + 1 6 Oops. What happened here? Instead of doing the arithmetic operations in the normal order, 2 times 2 and add 1 (PEMDAS, remember?) APL seems to have done them in the reverse order, 2 plus 1 and the whole thing times 2. Let's see why that is. The creators of APL were faced with a dillemma. Every new symbol they added to the language was to be considered a function. In other languages, like Python, functions take in arguments inside parentheses. However, in APL, functions only take in arguments from the left and right . Because of this, all functions look and act like the multiplication and addition functions, and it isn't clear in which order they should be executed (e.g. consider the new symbol 1\u230a2+2 : would you perform the addition first or whatever this new \u230a function does first?) So, for every new function they added, the creators would have to decide where to put it in the hierarchy. And this doesn't even take into account functions that programmers can create themselves! \"Screw it,\" the creators decided, and made one, solid, unambiguous, easy-to-remember rule. Order of execution In APL, all operations are executed right-to-left . When APL runs a line of code, it first looks at the rightmost function symbol and executes it with the arguments to its left and right. It then looks at the function symbol to the left of the one just processed, and executes it, treating the result it just got as a right argument. An equivalent formulation of this would be Order of execution In APL, every function takes in the whole expression on its right as a right argument. Can you see why these two formulations are equivalent? Example Suppose you have the expression 3+5\u00f70.25\u00d76*10-8 . This will get evaluated right-to-left as: 3 + 5 \u00f7 0.25 \u00d7 6 * 10 - 8 3 + 5 \u00f7 0.25 \u00d7 6 * 2 3 + 5 \u00f7 0.25 \u00d7 36 3 + 5 \u00f7 9 3 + 0.5555555556 3.555555556 About spaces APL ignores extra spaces when processing statements. For example, all of the following statements will produce the same result: 2 \u00d7 2 + 1 6 2 \u00d7 2 + 1 6 2 \u00d7 2 + 1 6 2 \u00d7 2 + 1 6 Altering the order of execution You can use parentheses, ( and ) , to alter the order of execution in APL. This is the same as in mathematics or any other programming language: statements within parentheses are executed before anything else. Let's look at our previous example once again: 2 \u00d7 2 + 1 6 2 \u00d7 ( 2 + 1 ) \u235d (1)! 6 ( 2 \u00d7 2 ) + 1 \u235d (2)! 5 Same result as before; the parentheses changed nothing Finally, the result we wanted! As a beginner APL programmer, it's easy to want to put parentheses everywhere when your code doesn't work. Resist the urge. Use parentheses for readability, and when needed to change the order of operations. However, your code generally ends up cleaner if you can write it with as few parentheses as possible. In the above case, for example, we could have simply restructured the expression to be the following: 1 + 2 \u00d7 2 5 No parentheses, and we get the correct answer! In general, when you have parentheses on the right, they are redundant. This is easier to understand in context. Consider the following expression: ( 1 + ( 2 \u00d7 ( 3 \u00f7 ( 4 - 5 )))) \u00af5 In this case, all of the parentheses are unnecessary, since it is telling the APL interpreter to execute everything from right to left, which it would do anyway. So, in this case, you could achieve the same result with the shorter and more readable code: 1 + 2 \u00d7 3 \u00f7 4 - 5 \u00af5 Pretty, isn't it? Before we conclude, here are some tips on how to reduce parentheses in your code to avoid a parenthesis jungle: Reducing parentheses No APL expression needs to end with a closing parenthesis. It's redundant. For example, the expression (2\u00d73)+(4\u00d75) can be rewritten as (2\u00d73)+4\u00d75 You never need two consecutive closing parentheses. It's redundant. For example, the expression (2\u00d7(3+4))\u00f75 is equivalent to (2\u00d73+4)\u00f75 If you can easily rewrite the expression to avoid parentheses, do so. For example, the expression ((2\u00f73)+4)\u00d75 can be reversed to give 5\u00d74+2\u00f73 Do not shovel in extra parentheses in a panicked, desperate attempt to fix your code. Do shovel in parentheses if it genuinely helps the readability of your code. This isn't to say that you should avoid using parentheses. They often help your thought process and improve understanding of the code. They do not slow down execution , so feel free to use as many as you'd like (and potentially reduce their amount afterwards)! This funny order of execution and the rules for placing parentheses might take getting used to. Don't worry, as you progress further, you will forget how else computers can execute code! Lamp One last handy symbol: \u235d . Can you figure out what it does from this example? \u235d asdfada (1) \u235d adsfljsakfdjlkdsajflkdsajf \u235d =\u2260\u2228\u00af\u2265>\u2260\u2260=\u2264<\u00af\u00e4\u00f6'j\u2206\u2283\u2282\u2308\u220a\u2191j|\u22a4\u2282\u236aAQWED\u2286A\u2370\u22645\u2265>\u22288\u2227\u00b4\u00a7\u00c4&\u2364\u2368\u233f&\u00a4\u2286\u2261\u234e^\u00c5 2 + 2 \u235d This is addition 4 123 \u00d7 456 \u235d yay 56088 Hint: ong it kinda looks like \u0d9e That's right, it's a comment. It makes the APL interpreter ignore whatever symbols come after it on the same line. You can use it to temporarily remove code from your programs or to add extra information to whatever code you have written. The official name for this symbol is \"lamp\". Why? Because comments illuminate your code.","title":"1.4 - Order of execution"},{"location":"course/ch1/part4/#order-of-execution","text":"This part will cover Right-to-left execution Using parentheses Comments Okay, we've tried adding and multiplying two numbers together. What if we try adding and multiplying three numbers at the same time? 2 \u00d7 2 4 2 \u00d7 2 + 1 6 Oops. What happened here? Instead of doing the arithmetic operations in the normal order, 2 times 2 and add 1 (PEMDAS, remember?) APL seems to have done them in the reverse order, 2 plus 1 and the whole thing times 2. Let's see why that is. The creators of APL were faced with a dillemma. Every new symbol they added to the language was to be considered a function. In other languages, like Python, functions take in arguments inside parentheses. However, in APL, functions only take in arguments from the left and right . Because of this, all functions look and act like the multiplication and addition functions, and it isn't clear in which order they should be executed (e.g. consider the new symbol 1\u230a2+2 : would you perform the addition first or whatever this new \u230a function does first?) So, for every new function they added, the creators would have to decide where to put it in the hierarchy. And this doesn't even take into account functions that programmers can create themselves! \"Screw it,\" the creators decided, and made one, solid, unambiguous, easy-to-remember rule. Order of execution In APL, all operations are executed right-to-left . When APL runs a line of code, it first looks at the rightmost function symbol and executes it with the arguments to its left and right. It then looks at the function symbol to the left of the one just processed, and executes it, treating the result it just got as a right argument. An equivalent formulation of this would be Order of execution In APL, every function takes in the whole expression on its right as a right argument. Can you see why these two formulations are equivalent? Example Suppose you have the expression 3+5\u00f70.25\u00d76*10-8 . This will get evaluated right-to-left as: 3 + 5 \u00f7 0.25 \u00d7 6 * 10 - 8 3 + 5 \u00f7 0.25 \u00d7 6 * 2 3 + 5 \u00f7 0.25 \u00d7 36 3 + 5 \u00f7 9 3 + 0.5555555556 3.555555556 About spaces APL ignores extra spaces when processing statements. For example, all of the following statements will produce the same result: 2 \u00d7 2 + 1 6 2 \u00d7 2 + 1 6 2 \u00d7 2 + 1 6 2 \u00d7 2 + 1 6","title":"Order of execution"},{"location":"course/ch1/part4/#altering-the-order-of-execution","text":"You can use parentheses, ( and ) , to alter the order of execution in APL. This is the same as in mathematics or any other programming language: statements within parentheses are executed before anything else. Let's look at our previous example once again: 2 \u00d7 2 + 1 6 2 \u00d7 ( 2 + 1 ) \u235d (1)! 6 ( 2 \u00d7 2 ) + 1 \u235d (2)! 5 Same result as before; the parentheses changed nothing Finally, the result we wanted! As a beginner APL programmer, it's easy to want to put parentheses everywhere when your code doesn't work. Resist the urge. Use parentheses for readability, and when needed to change the order of operations. However, your code generally ends up cleaner if you can write it with as few parentheses as possible. In the above case, for example, we could have simply restructured the expression to be the following: 1 + 2 \u00d7 2 5 No parentheses, and we get the correct answer! In general, when you have parentheses on the right, they are redundant. This is easier to understand in context. Consider the following expression: ( 1 + ( 2 \u00d7 ( 3 \u00f7 ( 4 - 5 )))) \u00af5 In this case, all of the parentheses are unnecessary, since it is telling the APL interpreter to execute everything from right to left, which it would do anyway. So, in this case, you could achieve the same result with the shorter and more readable code: 1 + 2 \u00d7 3 \u00f7 4 - 5 \u00af5 Pretty, isn't it? Before we conclude, here are some tips on how to reduce parentheses in your code to avoid a parenthesis jungle: Reducing parentheses No APL expression needs to end with a closing parenthesis. It's redundant. For example, the expression (2\u00d73)+(4\u00d75) can be rewritten as (2\u00d73)+4\u00d75 You never need two consecutive closing parentheses. It's redundant. For example, the expression (2\u00d7(3+4))\u00f75 is equivalent to (2\u00d73+4)\u00f75 If you can easily rewrite the expression to avoid parentheses, do so. For example, the expression ((2\u00f73)+4)\u00d75 can be reversed to give 5\u00d74+2\u00f73 Do not shovel in extra parentheses in a panicked, desperate attempt to fix your code. Do shovel in parentheses if it genuinely helps the readability of your code. This isn't to say that you should avoid using parentheses. They often help your thought process and improve understanding of the code. They do not slow down execution , so feel free to use as many as you'd like (and potentially reduce their amount afterwards)! This funny order of execution and the rules for placing parentheses might take getting used to. Don't worry, as you progress further, you will forget how else computers can execute code!","title":"Altering the order of execution"},{"location":"course/ch1/part4/#lamp","text":"One last handy symbol: \u235d . Can you figure out what it does from this example? \u235d asdfada (1) \u235d adsfljsakfdjlkdsajflkdsajf \u235d =\u2260\u2228\u00af\u2265>\u2260\u2260=\u2264<\u00af\u00e4\u00f6'j\u2206\u2283\u2282\u2308\u220a\u2191j|\u22a4\u2282\u236aAQWED\u2286A\u2370\u22645\u2265>\u22288\u2227\u00b4\u00a7\u00c4&\u2364\u2368\u233f&\u00a4\u2286\u2261\u234e^\u00c5 2 + 2 \u235d This is addition 4 123 \u00d7 456 \u235d yay 56088 Hint: ong it kinda looks like \u0d9e That's right, it's a comment. It makes the APL interpreter ignore whatever symbols come after it on the same line. You can use it to temporarily remove code from your programs or to add extra information to whatever code you have written. The official name for this symbol is \"lamp\". Why? Because comments illuminate your code.","title":"Lamp"},{"location":"course/ch1/part5/","text":"When things go wrong This part will cover Error handling Different errors in APL Let's do some more arithmetic: 5 \u00f7 5 1 5 \u00f7 4 1.25 5 \u00f7 3 1.666666667 5 \u00f7 2 2.5 5 \u00f7 1 5 5 \u00f7 0 DOMAIN ERROR : Divide by zero 5 \u00f7 0 \u2227 Like most mathematicians, APL is deathly afraid of dividing by zero. As such, APL doesn't allow zero as a right argument to the division function. In other words, zero is outside the domain of the right argument of \u00f7 . When something like this happens, APL displays that there has been an error of a certain type (in this case, a DOMAIN ERROR), as well as a short description and an arrow pointing to the function that produced the error. So much better than errors in other languages! (looking at Java and Python right now) Here are some examples of error types you will come across in the future. DOMAIN ERROR LENGTH ERROR VALUE ERROR RANK ERROR SYNTAX ERROR INDEX ERROR WS FULL A common fight-or-flight response when seeing an error is ignoring it, smashing your computer screen, and trying to re-run the same line of code with a random modification you don't understand. Don't! Even if you think you might know how to solve the problem immediately, try looking at the error message and figuring out exactly what it's complaining about, and where the error happens. For example, if you see a LENGTH ERROR , APL is trying to tell you that your arguments are of the wrong length. See if you can pinpoint the exact location the error is happening at! If, on the other hand, you see a SYNTAX ERROR , it most likely means that you've either made a typo somewhere or constructed an incomplete APL expression like 3+ (the + function is missing its right argument). When faced with an error Stop, take a breath, read the error message , and analyse the situation.","title":"1.5 - When things go wrong"},{"location":"course/ch1/part5/#when-things-go-wrong","text":"This part will cover Error handling Different errors in APL Let's do some more arithmetic: 5 \u00f7 5 1 5 \u00f7 4 1.25 5 \u00f7 3 1.666666667 5 \u00f7 2 2.5 5 \u00f7 1 5 5 \u00f7 0 DOMAIN ERROR : Divide by zero 5 \u00f7 0 \u2227 Like most mathematicians, APL is deathly afraid of dividing by zero. As such, APL doesn't allow zero as a right argument to the division function. In other words, zero is outside the domain of the right argument of \u00f7 . When something like this happens, APL displays that there has been an error of a certain type (in this case, a DOMAIN ERROR), as well as a short description and an arrow pointing to the function that produced the error. So much better than errors in other languages! (looking at Java and Python right now) Here are some examples of error types you will come across in the future. DOMAIN ERROR LENGTH ERROR VALUE ERROR RANK ERROR SYNTAX ERROR INDEX ERROR WS FULL A common fight-or-flight response when seeing an error is ignoring it, smashing your computer screen, and trying to re-run the same line of code with a random modification you don't understand. Don't! Even if you think you might know how to solve the problem immediately, try looking at the error message and figuring out exactly what it's complaining about, and where the error happens. For example, if you see a LENGTH ERROR , APL is trying to tell you that your arguments are of the wrong length. See if you can pinpoint the exact location the error is happening at! If, on the other hand, you see a SYNTAX ERROR , it most likely means that you've either made a typo somewhere or constructed an incomplete APL expression like 3+ (the + function is missing its right argument). When faced with an error Stop, take a breath, read the error message , and analyse the situation.","title":"When things go wrong"},{"location":"course/ch1/read/","text":"Read exercises For each of the following exercises, try to figure out what the input will produce in the TryAPL terminal. Check your answers by opening the \"Output\" tab. If you think an error will occur, try to predict which error it will be and where the arrow will point to. The exercises are not checked or graded: use them to check your knowledge! Number manipulation Read problem 1 Input Output 2 + 3 5 Read problem 2 Input Output 2 - 3 \u00af1 The negative sign ( \u00af ) is different from the minus function ( - ) Read problem 3 Input Output 3 * 3 27 * is used for exponentiation, not multiplication Read problem 4 Input Output 3 \u00d7 3 9 Read problem 5 Input Output 3 \u00f7 2 1.5 Read problem 6 Input Output 2\u00af7 SYNTAX ERROR 2\u00af 7 \u2227 The negative sign ( \u00af ) is not a function. Use the - function instead. Read problem 7 Input Output 1 + 2 \u00f7 SYNTAX ERROR 1 + 2 \u00f7 \u2227 The divide function is missing its right argument. Read problem 8 Input Output 100 \u00f7 0 DOMAIN ERROR : Divide by zero 100 \u00f7 0 \u2227 Can't divide by zero! Read problem 9 Input Output 0 \u00f7 100 0 Read problem 10 Input Output 0 \u00f7 0 1 Ah, the age-old dilemma! Were you expecting a DOMAIN ERROR ? The APL developers decided to add this feature since it is useful in some contexts. There is the option to change this if it really upsets you. Read problem 11 Input Output \u00af2 \u00d7 \u00af3 6 Order of execution Read problem 12 Input Output 4 \u00d7 2 + 3 20 Right-to-left. Read problem 13 Input Output 5 \u00d7 2 + 3 \u00d7 2 40 Still right-to-left, regardless of spaces. Read problem 14 Input Output 24 \u00f7 8 \u00f7 2 6 Read problem 15 Input Output 3 \u00f7 12 + 4 \u00d7 \u00af3 DOMAIN ERROR : Divide by zero 3 \u00f7 12 + 4 \u00d7 \u00af3 \u2227 The 12 + \u00af12 results in zero, which is outside of the domain of the divide function's right argument. Read problem 16 Input Output ((( 2 + 3 ))) 5 Extra parentheses never hurt anyone. Read problem 17 Input Output ((( 5 )) + (((( 3 ))) \u00d7 ( 2 ))) 11 Very readable! Is this LISP ? Read problem 18 Input Output 4 \u00d7 24 \u00f7 3 32 Read problem 19 Input Output 24 \u00f7 4 \u00d7 3 2 Read problem 20 Input Output 6 \u00d7 3 - SYNTAX ERROR 6 \u00d7 3 - \u2227 Typo.","title":"1.R - Read exercises"},{"location":"course/ch1/read/#read-exercises","text":"For each of the following exercises, try to figure out what the input will produce in the TryAPL terminal. Check your answers by opening the \"Output\" tab. If you think an error will occur, try to predict which error it will be and where the arrow will point to. The exercises are not checked or graded: use them to check your knowledge!","title":"Read exercises"},{"location":"course/ch1/read/#number-manipulation","text":"Read problem 1 Input Output 2 + 3 5 Read problem 2 Input Output 2 - 3 \u00af1 The negative sign ( \u00af ) is different from the minus function ( - ) Read problem 3 Input Output 3 * 3 27 * is used for exponentiation, not multiplication Read problem 4 Input Output 3 \u00d7 3 9 Read problem 5 Input Output 3 \u00f7 2 1.5 Read problem 6 Input Output 2\u00af7 SYNTAX ERROR 2\u00af 7 \u2227 The negative sign ( \u00af ) is not a function. Use the - function instead. Read problem 7 Input Output 1 + 2 \u00f7 SYNTAX ERROR 1 + 2 \u00f7 \u2227 The divide function is missing its right argument. Read problem 8 Input Output 100 \u00f7 0 DOMAIN ERROR : Divide by zero 100 \u00f7 0 \u2227 Can't divide by zero! Read problem 9 Input Output 0 \u00f7 100 0 Read problem 10 Input Output 0 \u00f7 0 1 Ah, the age-old dilemma! Were you expecting a DOMAIN ERROR ? The APL developers decided to add this feature since it is useful in some contexts. There is the option to change this if it really upsets you. Read problem 11 Input Output \u00af2 \u00d7 \u00af3 6","title":"Number manipulation"},{"location":"course/ch1/read/#order-of-execution","text":"Read problem 12 Input Output 4 \u00d7 2 + 3 20 Right-to-left. Read problem 13 Input Output 5 \u00d7 2 + 3 \u00d7 2 40 Still right-to-left, regardless of spaces. Read problem 14 Input Output 24 \u00f7 8 \u00f7 2 6 Read problem 15 Input Output 3 \u00f7 12 + 4 \u00d7 \u00af3 DOMAIN ERROR : Divide by zero 3 \u00f7 12 + 4 \u00d7 \u00af3 \u2227 The 12 + \u00af12 results in zero, which is outside of the domain of the divide function's right argument. Read problem 16 Input Output ((( 2 + 3 ))) 5 Extra parentheses never hurt anyone. Read problem 17 Input Output ((( 5 )) + (((( 3 ))) \u00d7 ( 2 ))) 11 Very readable! Is this LISP ? Read problem 18 Input Output 4 \u00d7 24 \u00f7 3 32 Read problem 19 Input Output 24 \u00f7 4 \u00d7 3 2 Read problem 20 Input Output 6 \u00d7 3 - SYNTAX ERROR 6 \u00d7 3 - \u2227 Typo.","title":"Order of execution"},{"location":"course/ch1/summary/","text":"Function index Here is a table of symbols we have used and how to type them in TryAPL. It might be useful to review this page as you are doing the read and write exercises in the next sections. Symbol Name Function Key combination + Plus Addition + - Minus Subtraction - \u00d7 Times Multiplication PREFIX - \u00f7 Divide Division PREFIX = * Power Exponentiation * \u00af Negative sign Negation of a number PREFIX 2 \u235d Lamp Comment PREFIX ,","title":"1.S - Summary"},{"location":"course/ch1/summary/#function-index","text":"Here is a table of symbols we have used and how to type them in TryAPL. It might be useful to review this page as you are doing the read and write exercises in the next sections. Symbol Name Function Key combination + Plus Addition + - Minus Subtraction - \u00d7 Times Multiplication PREFIX - \u00f7 Divide Division PREFIX = * Power Exponentiation * \u00af Negative sign Negation of a number PREFIX 2 \u235d Lamp Comment PREFIX ,","title":"Function index"},{"location":"course/ch1/write/","text":"Write exercises Submit APL code for the following exercises. Your submissions are graded using TMC. Make sure to log in to be able to submit your work! Remember, you can test out ideas and develop you solution at TryAPL before submitting it here. You can submit as many solutions as you like. If you submit a correct solution at least once, you will receive points on the TMC server and be able to see the model solution. If the write problem is red, it is unsolved. If it it green, you have solved it and received points for it on the server. Write problem 1 Calculate the area of a room which is 130.7 long and 206.55 wide. \u2395\u2190 A\u2190{ 130.7 206.55 } Submit Write problem 2 A grandpa decreases in height by 2.5cm every year. If he is 150cm tall now, how tall will he be in 15 years? \u2395\u2190 A\u2190{ 150 2.5 15 } Submit Write problem 3 If 12 chairs cost you 200000, what is the price per chair? \u2395\u2190 A\u2190{ 12 200000 } Submit Write problem 4 Your current bank balance is \u00af420\u20ac. You are in big trouble. What will be your balance if you take just another quick loan of 100\u20ac? \u2395\u2190 A\u2190{ \u00af420 100 } Submit Write problem 5 Cause a SYNTAX ERROR using as few symbols as possible. \u2395\u2190 A\u2190{ } Submit Write problem 6 Cause a DOMAIN ERROR . \u2395\u2190 A\u2190{ } Submit Write problem 7 Rewrite the following expression with as few parentheses as possible. ((( x * 2 ) + ( y * 2 )) * .5 ) \u2395\u2190 A\u2190{ } Submit Write problem 8 Compute the mean of the numbers 1, 57, 237, \u00af5, 42. \u2395\u2190 A\u2190{ 1 57 237 \u00af5 42 } Submit Write problem 9 You've got a 5 megawatt laser due in 15 days. If you've already got a 2.5 megawatt laser, how many megawatts a day do you have to add? \u2395\u2190 A\u2190{ 5 15 } Submit Write problem 10 Subtract 7 from 16, divide the result by 3, add 8, multiply by 2.5, and square the result. Use as few parentheses as possible. \u2395\u2190 A\u2190{ } Submit Write problem 11 Write a nonempty line of code that does nothing (doesn't display anything on the screen). \u2395\u2190 A\u2190{ } Submit Write problem 12 Rewrite the following line of code using less than 7 parentheses. (((( x + 3.5 ) \u00d7 ( x + 6 )) - ((( 2 + y ) \u00d7 ( z \u00d7 8.5 )) \u00f7 \u00af20 ) \u235d((()())))()()((()()))()()()()))())))()((( \u2395\u2190 A\u2190{ } Submit","title":"1.W - Write exercises"},{"location":"course/ch1/write/#write-exercises","text":"Submit APL code for the following exercises. Your submissions are graded using TMC. Make sure to log in to be able to submit your work! Remember, you can test out ideas and develop you solution at TryAPL before submitting it here. You can submit as many solutions as you like. If you submit a correct solution at least once, you will receive points on the TMC server and be able to see the model solution. If the write problem is red, it is unsolved. If it it green, you have solved it and received points for it on the server. Write problem 1 Calculate the area of a room which is 130.7 long and 206.55 wide. \u2395\u2190 A\u2190{ 130.7 206.55 } Submit Write problem 2 A grandpa decreases in height by 2.5cm every year. If he is 150cm tall now, how tall will he be in 15 years? \u2395\u2190 A\u2190{ 150 2.5 15 } Submit Write problem 3 If 12 chairs cost you 200000, what is the price per chair? \u2395\u2190 A\u2190{ 12 200000 } Submit Write problem 4 Your current bank balance is \u00af420\u20ac. You are in big trouble. What will be your balance if you take just another quick loan of 100\u20ac? \u2395\u2190 A\u2190{ \u00af420 100 } Submit Write problem 5 Cause a SYNTAX ERROR using as few symbols as possible. \u2395\u2190 A\u2190{ } Submit Write problem 6 Cause a DOMAIN ERROR . \u2395\u2190 A\u2190{ } Submit Write problem 7 Rewrite the following expression with as few parentheses as possible. ((( x * 2 ) + ( y * 2 )) * .5 ) \u2395\u2190 A\u2190{ } Submit Write problem 8 Compute the mean of the numbers 1, 57, 237, \u00af5, 42. \u2395\u2190 A\u2190{ 1 57 237 \u00af5 42 } Submit Write problem 9 You've got a 5 megawatt laser due in 15 days. If you've already got a 2.5 megawatt laser, how many megawatts a day do you have to add? \u2395\u2190 A\u2190{ 5 15 } Submit Write problem 10 Subtract 7 from 16, divide the result by 3, add 8, multiply by 2.5, and square the result. Use as few parentheses as possible. \u2395\u2190 A\u2190{ } Submit Write problem 11 Write a nonempty line of code that does nothing (doesn't display anything on the screen). \u2395\u2190 A\u2190{ } Submit Write problem 12 Rewrite the following line of code using less than 7 parentheses. (((( x + 3.5 ) \u00d7 ( x + 6 )) - ((( 2 + y ) \u00d7 ( z \u00d7 8.5 )) \u00f7 \u00af20 ) \u235d((()())))()()((()()))()()()()))())))()((( \u2395\u2190 A\u2190{ } Submit","title":"Write exercises"},{"location":"course/ch2/part1/","text":"Assignment This part will cover The assignment operator Variables and naming Intermediate assignment Allow me to introduce you to a new symbol; the assignment operator: \u2190 Typing the assignment operator \u2190 Prefix method: PREFIX ] Tab method: < - Tab Here is an example of assignment: BANANA \u2190 3 As you can see, there is no output, because assignment does not return anything. This is what's called a shy operation in APL. It is convention to use capital letters for variable names in APL. You can also use lowercase letters, underscores, and numbers (but a variable name cannot start with a number). In addition, you can use the characters \u2206 and \u2359 , called delta and delta underbar . These have no special meaning, and can be used to separate parts of a variable. For example, all of the following are valid variable names: STATS2020 BalanceDiff _Rate_of_change STATS\u22062020 \u2206Balance _ROC S20 \u2206 \u2359R If you try creating a variable that starts with a number, it will cause a SYNTAX ERROR . We can use variables in place of a number. BANANA \u2190 3 BANANA - 1 2 BANANA \u00f7 2 1.5 BANANA \u00d7 BANANA 9 Note that variables keep their value even if you perform operations with them. The only way to change a variable's value is to use the assignment operator again: BANANA \u2190 3 BANANA 3 BANANA + 1 4 BANANA \u2190 0 BANANA 0 BANANA + 1 1 BANANA \u2190 BANANA + 3 BANANA 4 Notice, at the end there we did a common operation: increasing the value of a variable by some amount. This is such a common operation, that the creators of APL introduced a shorthand: BANANA + \u2190 3 This has the same effect as the earlier BANANA \u2190 BANANA + 3 , but may save you some keystrokes. You can also use this same technique with all other APL functions, some more useful than others. With any function F , the expression VAR F\u2190 X will expand to become VAR \u2190 VAR F X . This is often handy to conserve space. Intermediate assignment One more thing. We saw above that assignment was a shy operation. What if we really wanted to see what was assigned to a variable immediately? This is where intermediate assignment, or chaining assignment operators, comes into play. For an example, say we were trying to solve the equation \"one plus the value of five times six\", and we assigned it to a variable. RES \u2190 1 + 5 * 6 ( nothing is displayed ) Now, something seems wrong. Let's see whether we got the result we wanted... \u2395 \u2190 RES \u2190 1 + 5 * 6 15626 Here, we \"assigned\" to an operator called a quad . All this does is print whatever is assigned to it to the screen. The developers of APL picked this because it looks kinda like a (arguably, vertical) computer monitor. Typing the quad operator \u2395 Prefix method: PREFIX L Tab method: [ ] Tab We also realised that we made a mistake somewhere in our calculation (it should be fairly obvious, but let's pretend we have a very complex program here). To debug what's going on, we can use intermediate assignment in the middle of our calculation as follows: RES \u2190 1 + DEBUG \u2190 5 * 6 ( nothing is displayed ) DEBUG 15625 This makes it easy to identify and debug different parts of our code. We could have also done both the assigning and the printing in one line, using our familiar quad operator: RES \u2190 1 + \u2395 \u2190 5 * 6 15625 With this, we can fix our code to work as it should. \u2395 \u2190 RES \u2190 1 + 5 \u00d7 6 31 Nice! Intermediate quad operator It appears as though currently, TryAPL does not support the intermediate quad operator. That is, the above expression RES \u2190 1 + \u2395 \u2190 5*6 will throw a NOT PERMITTED error. This is rather unfortunate but will not be an issue later, when we install the Dyalog IDE to write bigger programs.","title":"2.1 - Assignment"},{"location":"course/ch2/part1/#assignment","text":"This part will cover The assignment operator Variables and naming Intermediate assignment Allow me to introduce you to a new symbol; the assignment operator: \u2190 Typing the assignment operator \u2190 Prefix method: PREFIX ] Tab method: < - Tab Here is an example of assignment: BANANA \u2190 3 As you can see, there is no output, because assignment does not return anything. This is what's called a shy operation in APL. It is convention to use capital letters for variable names in APL. You can also use lowercase letters, underscores, and numbers (but a variable name cannot start with a number). In addition, you can use the characters \u2206 and \u2359 , called delta and delta underbar . These have no special meaning, and can be used to separate parts of a variable. For example, all of the following are valid variable names: STATS2020 BalanceDiff _Rate_of_change STATS\u22062020 \u2206Balance _ROC S20 \u2206 \u2359R If you try creating a variable that starts with a number, it will cause a SYNTAX ERROR . We can use variables in place of a number. BANANA \u2190 3 BANANA - 1 2 BANANA \u00f7 2 1.5 BANANA \u00d7 BANANA 9 Note that variables keep their value even if you perform operations with them. The only way to change a variable's value is to use the assignment operator again: BANANA \u2190 3 BANANA 3 BANANA + 1 4 BANANA \u2190 0 BANANA 0 BANANA + 1 1 BANANA \u2190 BANANA + 3 BANANA 4 Notice, at the end there we did a common operation: increasing the value of a variable by some amount. This is such a common operation, that the creators of APL introduced a shorthand: BANANA + \u2190 3 This has the same effect as the earlier BANANA \u2190 BANANA + 3 , but may save you some keystrokes. You can also use this same technique with all other APL functions, some more useful than others. With any function F , the expression VAR F\u2190 X will expand to become VAR \u2190 VAR F X . This is often handy to conserve space.","title":"Assignment"},{"location":"course/ch2/part1/#intermediate-assignment","text":"One more thing. We saw above that assignment was a shy operation. What if we really wanted to see what was assigned to a variable immediately? This is where intermediate assignment, or chaining assignment operators, comes into play. For an example, say we were trying to solve the equation \"one plus the value of five times six\", and we assigned it to a variable. RES \u2190 1 + 5 * 6 ( nothing is displayed ) Now, something seems wrong. Let's see whether we got the result we wanted... \u2395 \u2190 RES \u2190 1 + 5 * 6 15626 Here, we \"assigned\" to an operator called a quad . All this does is print whatever is assigned to it to the screen. The developers of APL picked this because it looks kinda like a (arguably, vertical) computer monitor. Typing the quad operator \u2395 Prefix method: PREFIX L Tab method: [ ] Tab We also realised that we made a mistake somewhere in our calculation (it should be fairly obvious, but let's pretend we have a very complex program here). To debug what's going on, we can use intermediate assignment in the middle of our calculation as follows: RES \u2190 1 + DEBUG \u2190 5 * 6 ( nothing is displayed ) DEBUG 15625 This makes it easy to identify and debug different parts of our code. We could have also done both the assigning and the printing in one line, using our familiar quad operator: RES \u2190 1 + \u2395 \u2190 5 * 6 15625 With this, we can fix our code to work as it should. \u2395 \u2190 RES \u2190 1 + 5 \u00d7 6 31 Nice! Intermediate quad operator It appears as though currently, TryAPL does not support the intermediate quad operator. That is, the above expression RES \u2190 1 + \u2395 \u2190 5*6 will throw a NOT PERMITTED error. This is rather unfortunate but will not be an issue later, when we install the Dyalog IDE to write bigger programs.","title":"Intermediate assignment"},{"location":"course/ch2/part2/","text":"Vectors This part will cover Creating vectors Spaces Separate Scalars In the following section, you will play the role of an astronaut aboard the International Space Station . You are currently orbiting the Earth at an altitude of 413km at a speed of 28,013km/h. In brief intervals of time spent waiting between tasks, you enjoy logging temperatures from sensors all around the ship into a small notebook. Unfortunately for you, your notebook\u2019s completely filled, and none of your colleagues seem to share your enthusiasm for data collection. Unfortunately for mission control, you\u2019ve decided to use critical APL machines on board to store your data. Typing as fast as possible without the aid of gravity, you manage to write some data without being caught. TEMPERATURE_PAGE1_YEAR1_DAY2_HOUR7_MINUTE42 \u2190 21.4 TEMPERATURE_PAGE1_YEAR1_DAY2_HOUR8_MINUTE47 \u2190 21.8 TEMPERATURE_PAGE1_YEAR1_DAY2_HOUR10_MINUTE10 \u2190 22.0 TEMPERATURE_PAGE1_YEAR1_DAY2_HOUR12_MINUTE01 \u2190 21.5 TEMPERATURE_PAGE1_YEAR1_DAY2_HOUR14_MINUTE36 \u2190 21.3 TEMPERATURE_PAGE1_YEAR1_DAY2_HOUR16_MINUTE50 \u2190 22.3 TEMPERATURE_PAGE2_YEAR1_DAY2_HOUR18_MINUTE23 \u2190 22.8 TEMPERATURE_PAGE2_YEAR1_DAY2_HOUR19_MINUTE30 \u2190 21.5 TEMPERATURE_PAGE2_YEAR1_DAY2_HOUR21_MINUTE12 \u2190 22.1 TEMPERATURE_PAGE2_YEAR1_DAY3_HOUR7_MINUTE15 \u2190 22.0 TEMPERATURE_PAGE2_YEAR1_DAY3_HOUR8_MINUTE30 \u2190 21.9 TEMPERATURE_PAGE2_YEAR1_DAY3_HOUR9_MINUTE45 \u2190 22.4 This is not the most efficient, or readable, method to input data into your system, and while flicking through your APL notes now crowded with temperatures, you refresh your workspace and instead decide to store your data using vectors. Vectors are lines of values. They are defined by writing values separated by one or more spaces. Vectors are also ordered, it is possible to talk about the element at a specific position, called an index. For example, the first (1) element, the second (2) element, and so on. In code, they can be accessed by adding square brackets to the vector with an index (or multiple indices) in between. \u235d This is a vector FIBB \u2190 1 1 2 3 5 8 13 21 34 55 \u235d This is also a vector KEYA \u2190 9 249 17 2 157 116 227 91 216 65 86 197 99 86 136 192 \u235d The following are all scalars PRIME \u2190 57 NUMERALS \u2190 413 MCBRT7 \u2190 - 7 *\u00f7 3 EPSILON \u2190 2 * \u00af53 MAGIC \u2190 1597463007 \u235d Note that the decimal separator in APL is the dot PI \u2190 11.001001 \u235d This is a scalar PI \u2190 11 , 001001 \u235d This is a vector \u235d This is a vector LIST \u2190 PRIME 100 NUMERALS MCBRT7 0.6 EPSILON MAGIC 31.5 \u235d Selecting a single element using an index LIST [ 2 ] 100 \u235d Selecting multiple values using indices LIST [ 2 1 3 ] 100 57 413 \u235d Selecting multiple values using a vector of indices INDICES \u2190 2 1 3 LIST [ INDICES ] 100 57 413 \u235d The above temperature lists as vectors TEMPERATURE_PAGE1 \u2190 21.4 21.8 22.0 21.5 21.3 22.3 TEMPERATURE_PAGE2 \u2190 22.8 21.5 22.1 22.0 21.9 22.4 TEMPERATURE_PAGE1 [ 1 2 3 ] 21.4 21.8 22.0","title":"2.2 - Vectors"},{"location":"course/ch2/part2/#vectors","text":"This part will cover Creating vectors Spaces Separate Scalars In the following section, you will play the role of an astronaut aboard the International Space Station . You are currently orbiting the Earth at an altitude of 413km at a speed of 28,013km/h. In brief intervals of time spent waiting between tasks, you enjoy logging temperatures from sensors all around the ship into a small notebook. Unfortunately for you, your notebook\u2019s completely filled, and none of your colleagues seem to share your enthusiasm for data collection. Unfortunately for mission control, you\u2019ve decided to use critical APL machines on board to store your data. Typing as fast as possible without the aid of gravity, you manage to write some data without being caught. TEMPERATURE_PAGE1_YEAR1_DAY2_HOUR7_MINUTE42 \u2190 21.4 TEMPERATURE_PAGE1_YEAR1_DAY2_HOUR8_MINUTE47 \u2190 21.8 TEMPERATURE_PAGE1_YEAR1_DAY2_HOUR10_MINUTE10 \u2190 22.0 TEMPERATURE_PAGE1_YEAR1_DAY2_HOUR12_MINUTE01 \u2190 21.5 TEMPERATURE_PAGE1_YEAR1_DAY2_HOUR14_MINUTE36 \u2190 21.3 TEMPERATURE_PAGE1_YEAR1_DAY2_HOUR16_MINUTE50 \u2190 22.3 TEMPERATURE_PAGE2_YEAR1_DAY2_HOUR18_MINUTE23 \u2190 22.8 TEMPERATURE_PAGE2_YEAR1_DAY2_HOUR19_MINUTE30 \u2190 21.5 TEMPERATURE_PAGE2_YEAR1_DAY2_HOUR21_MINUTE12 \u2190 22.1 TEMPERATURE_PAGE2_YEAR1_DAY3_HOUR7_MINUTE15 \u2190 22.0 TEMPERATURE_PAGE2_YEAR1_DAY3_HOUR8_MINUTE30 \u2190 21.9 TEMPERATURE_PAGE2_YEAR1_DAY3_HOUR9_MINUTE45 \u2190 22.4 This is not the most efficient, or readable, method to input data into your system, and while flicking through your APL notes now crowded with temperatures, you refresh your workspace and instead decide to store your data using vectors. Vectors are lines of values. They are defined by writing values separated by one or more spaces. Vectors are also ordered, it is possible to talk about the element at a specific position, called an index. For example, the first (1) element, the second (2) element, and so on. In code, they can be accessed by adding square brackets to the vector with an index (or multiple indices) in between. \u235d This is a vector FIBB \u2190 1 1 2 3 5 8 13 21 34 55 \u235d This is also a vector KEYA \u2190 9 249 17 2 157 116 227 91 216 65 86 197 99 86 136 192 \u235d The following are all scalars PRIME \u2190 57 NUMERALS \u2190 413 MCBRT7 \u2190 - 7 *\u00f7 3 EPSILON \u2190 2 * \u00af53 MAGIC \u2190 1597463007 \u235d Note that the decimal separator in APL is the dot PI \u2190 11.001001 \u235d This is a scalar PI \u2190 11 , 001001 \u235d This is a vector \u235d This is a vector LIST \u2190 PRIME 100 NUMERALS MCBRT7 0.6 EPSILON MAGIC 31.5 \u235d Selecting a single element using an index LIST [ 2 ] 100 \u235d Selecting multiple values using indices LIST [ 2 1 3 ] 100 57 413 \u235d Selecting multiple values using a vector of indices INDICES \u2190 2 1 3 LIST [ INDICES ] 100 57 413 \u235d The above temperature lists as vectors TEMPERATURE_PAGE1 \u2190 21.4 21.8 22.0 21.5 21.3 22.3 TEMPERATURE_PAGE2 \u2190 22.8 21.5 22.1 22.0 21.9 22.4 TEMPERATURE_PAGE1 [ 1 2 3 ] 21.4 21.8 22.0","title":"Vectors"},{"location":"course/ch2/part3/","text":"Arithmetic operations on vectors This part will cover Operations work on vectors all at once Length error So now we have vectors. You might wonder, why do we want to put a bunch of numbers inside a vector? Let\u2019s say you, the astronaut on the ISS, mistakenly bought a bunch of measuring equipment from America, and only found out later that all the readings are in Fahrenheit. Terrible news! After about 2000 milliseconds of googling about it, you found this formula to convert it into Celsius: Celsius = (Fahrenheit - 32) * 5 / 9 To test it out, you looked up the current room temperature reading, which says 72.1. You did the calculation in APL: ( 5 \u00d7 72.1 - 32 ) \u00f7 9 22.27777778 Great! What\u2019s not so great is that, the temperature sensor has been left generating data for the whole week, and there is a bunch of readings to convert to Celsius. TEMP_F \u2190 71.2 71.4 73.3 73.0 73.1 72.8 72.5 You are going to spend ages plugging the data from this one sensor, and you have 200 of them lying around! Fortunately, APL is designed to deal with data assorted in a vector. You can: \u2395 \u2190 TEMP_CELSIUS \u2190 ( 5 \u00d7 TEMP_F - 32 ) \u00f7 9 21.77777778 21.88888889 22.94444444 22.77777778 22.83333333 22.66666667 22.5 There\u2019s all the Celsius! What\u2019s going on here? In APL, all the basic arithmetic functions apply \"component-wise\". If you are familiar with functional programming in Python or maybe Haskell, you might know the map function, which applies another function to each element of a vector. In APL, this is done automatically for all the basic arithmetic functions, if one of the parameters is a scalar: TEMP_F - 32 39.2 39.4 41.3 41 41.1 40.8 40.5 TEMP_F + 32 103.2 103.4 105.3 105 105.1 104.8 104.5 32 - TEMP_F \u00af39.2 \u00af39.4 \u00af41.3 \u00af41 \u00af41.1 \u00af40.8 \u00af40.5 100 + 1 2 3 \u235d The space here takes precedent over + 101 102 103 Now you can do arithmetic to a list of numbers however you like! Just use them in place of a scalar value. After figuring this out, you decided to also check the temperature reading of a sensor outside the ISS: TEMP_OUTSIDE \u2190 118.5 97.1 59.5 30.0 \u00af9.7 \u00af62.3 \u00af113.2 That\u2019s some extreme temperature right there! And it makes you start to wonder, how much temperature difference is the hull bearing? Turns out it\u2019s also very simple in APL: \u2395 \u2190 TEMP_DIFF \u2190 TEMP_OUTSIDE - TEMP_CELSIUS 96.72222222 75.21111111 36.55555556 7.222222222 \u00af32.53333333 \u00af84.96666667 \u00af135.7 So applying a basic arithmetic function to two vectors also just applies them \"component-wise\"! It just applies this function for the first element on the left and the first element on the right, note the result, then the second element on the left and the second element on the right, and so on. This is analogous to map with a binary operation and two iterators in Python, and zipWith in Haskell. There is one serious caveat though: 1 2 3 - 4 5 LENGTH ERROR : Mismatched left and right argument shapes 1 2 3 - 4 5 \u2227 The length of the vectors must match, APL will not silently truncate the longer one or fill in the difference. The length of the vectors must match, APL will not silently truncate the longer one or fill in the difference. 1 2 3 \u00f7 2 2 0 DOMAIN ERROR : Divide by zero 1 2 3 \u00f7 2 2 0 \u2227 Unfortunately, APL doesn\u2019t point out on which element the error occurred. If you get this kind of error in a complex expression, you can use the intermediate assignment and printout to help debug the situation.","title":"2.3 - Arithmetic operations on vectors"},{"location":"course/ch2/part3/#arithmetic-operations-on-vectors","text":"This part will cover Operations work on vectors all at once Length error So now we have vectors. You might wonder, why do we want to put a bunch of numbers inside a vector? Let\u2019s say you, the astronaut on the ISS, mistakenly bought a bunch of measuring equipment from America, and only found out later that all the readings are in Fahrenheit. Terrible news! After about 2000 milliseconds of googling about it, you found this formula to convert it into Celsius: Celsius = (Fahrenheit - 32) * 5 / 9 To test it out, you looked up the current room temperature reading, which says 72.1. You did the calculation in APL: ( 5 \u00d7 72.1 - 32 ) \u00f7 9 22.27777778 Great! What\u2019s not so great is that, the temperature sensor has been left generating data for the whole week, and there is a bunch of readings to convert to Celsius. TEMP_F \u2190 71.2 71.4 73.3 73.0 73.1 72.8 72.5 You are going to spend ages plugging the data from this one sensor, and you have 200 of them lying around! Fortunately, APL is designed to deal with data assorted in a vector. You can: \u2395 \u2190 TEMP_CELSIUS \u2190 ( 5 \u00d7 TEMP_F - 32 ) \u00f7 9 21.77777778 21.88888889 22.94444444 22.77777778 22.83333333 22.66666667 22.5 There\u2019s all the Celsius! What\u2019s going on here? In APL, all the basic arithmetic functions apply \"component-wise\". If you are familiar with functional programming in Python or maybe Haskell, you might know the map function, which applies another function to each element of a vector. In APL, this is done automatically for all the basic arithmetic functions, if one of the parameters is a scalar: TEMP_F - 32 39.2 39.4 41.3 41 41.1 40.8 40.5 TEMP_F + 32 103.2 103.4 105.3 105 105.1 104.8 104.5 32 - TEMP_F \u00af39.2 \u00af39.4 \u00af41.3 \u00af41 \u00af41.1 \u00af40.8 \u00af40.5 100 + 1 2 3 \u235d The space here takes precedent over + 101 102 103 Now you can do arithmetic to a list of numbers however you like! Just use them in place of a scalar value. After figuring this out, you decided to also check the temperature reading of a sensor outside the ISS: TEMP_OUTSIDE \u2190 118.5 97.1 59.5 30.0 \u00af9.7 \u00af62.3 \u00af113.2 That\u2019s some extreme temperature right there! And it makes you start to wonder, how much temperature difference is the hull bearing? Turns out it\u2019s also very simple in APL: \u2395 \u2190 TEMP_DIFF \u2190 TEMP_OUTSIDE - TEMP_CELSIUS 96.72222222 75.21111111 36.55555556 7.222222222 \u00af32.53333333 \u00af84.96666667 \u00af135.7 So applying a basic arithmetic function to two vectors also just applies them \"component-wise\"! It just applies this function for the first element on the left and the first element on the right, note the result, then the second element on the left and the second element on the right, and so on. This is analogous to map with a binary operation and two iterators in Python, and zipWith in Haskell. There is one serious caveat though: 1 2 3 - 4 5 LENGTH ERROR : Mismatched left and right argument shapes 1 2 3 - 4 5 \u2227 The length of the vectors must match, APL will not silently truncate the longer one or fill in the difference. The length of the vectors must match, APL will not silently truncate the longer one or fill in the difference. 1 2 3 \u00f7 2 2 0 DOMAIN ERROR : Divide by zero 1 2 3 \u00f7 2 2 0 \u2227 Unfortunately, APL doesn\u2019t point out on which element the error occurred. If you get this kind of error in a complex expression, you can use the intermediate assignment and printout to help debug the situation.","title":"Arithmetic operations on vectors"},{"location":"course/ch2/part4/","text":"Higher dimensional space This part will cover Constructing matrices Constructing 3D arrays The reshape function The astute reader may have noticed that, although the vector data is much more structured, the dates and times of the measurements have been completely forgotten. One solution is to use more vectors to organize this data, here using floating-point decimal encoded format. This format stores the dates as decimal numbers, where the integer part stores the year, month, and day, and the fractional part stores the hour, minute, and second, yyyymmdd.hhmmss. For example, 00010101.074200 is year 0001, month 01, day 01, hour 05, minute 42, and second 00. TEMPERATURE_PAGE1 \u2190 21.4 21.8 22.0 21.5 21.3 22.3 TEMPERATURE_PAGE1_DATE \u2190 00010101.074200 00010101.084700 00010101.101000 00010101.120100 00010101.143600 00010101.165000 TEMPERATURE_PAGE2 \u2190 22.8 21.5 22.1 22.0 21.9 22.4 TEMPERATURE_PAGE2_DATE \u2190 00010101.182300 00010101.193000 00010101.211200 00010102.071500 00010102.083000 00010102.094500 and access dates and times using the same index; TEMPERATURE_PAGE1 [ 2 ] 21.8 TEMPERATURE_PAGE1_DATE [ 2 ] 00010101.084700 There is a built-in function to deal with dates and times, the \u2395DT command, which will be introduced in chapter 3. However, this lack of structure is exactly what introducing vectors was supposed to solve; two closely related pieces of information, the time of a measurement and the value of the measurement, are kept separate when they should logically be part of the same collection of data. Measurement data of this form are usually stored in tables, and it is only natural to try to store them in the same manner in a computer system. You decide to start over yet again, and decide to store data in a matrix instead TEMPERATURE_PAGE1 \u2190 6 2 \u2374 21.4 00010101.074200 21.8 00010101.084700 22.0 00010101.101000 21.5 00010101.120100 21.3 00010101.143600 22.3 00010101.165000 TEMPERATURE_PAGE2 \u2190 6 2 \u2374 22.8 00010101.182300 21.5 00010101.193000 22.1 00010102.211200 22.0 00010103.071500 21.9 00010103.083000 22.4 00010103.094500 Matrices are rectangles of data. They can be created by reshaping (\u2374) a vector. Typing the reshape function \u2374 Prefix method: PREFIX r Tab method: r r Tab Function Valence The symbol \u2374 actually represents two different functions depending on the manner in which arguments are given. When applied to a single argument, \u2374X, it acts as the shape function; when two arguments are given one on either side, X\u2374Y, it acts as the reshape function. The former function is the monadic function associated to the symbol \u2374, and the latter is the dyadic function associated with the symbol \u2374. The reshape function acts by returning an array whose entries are the entries of its right operand, and whose axes are specified by a vector of integers as its left operand, more concretely, TEMPERATURE_DATA \u2190 21.4 00010101.074200 21.8 00010101.084700 22.0 00010101.101000 21.5 00010101.120100 21.3 00010101.143600 22.3 00010101.165000 6 2 \u2374 TEMPERATURE_DATA 21.4 10101.0742 21.8 10101.0847 22 10101.101 21.5 10101.1201 21.3 10101.1436 22.3 10101.165 \u235d The reshaped matrix has 6 rows and 2 columns turns the vector TEMPERATURE_DATA into a matrix with axes of length six and two, consisting of the entries in TEMPERATURE_DATA. PYRAMID_ENTRIES \u2190 1 1 1 1 1 1 2 2 2 1 1 2 3 2 1 1 2 2 2 1 1 1 1 1 1 1 5 5 \u2374 PYRAMID_ENTRIES \u235d 5 rows and 5 columns 1 1 1 1 1 1 2 2 2 1 1 2 3 2 1 1 2 2 2 1 1 1 1 1 1 Strings in APL are vectors of characters, defined using single quotes. The \u2395A function return the string 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', more on this in Chapter 3. ALPHABET \u2190 \u2395A 26 25 \u2374 ALPHABET ABCDEFGHIJKLMNOPQRSTUVWXY ZABCDEFGHIJKLMNOPQRSTUVWX YZABCDEFGHIJKLMNOPQRSTUVW XYZABCDEFGHIJKLMNOPQRSTUV WXYZABCDEFGHIJKLMNOPQRSTU VWXYZABCDEFGHIJKLMNOPQRST UVWXYZABCDEFGHIJKLMNOPQRS TUVWXYZABCDEFGHIJKLMNOPQR STUVWXYZABCDEFGHIJKLMNOPQ RSTUVWXYZABCDEFGHIJKLMNOP QRSTUVWXYZABCDEFGHIJKLMNO PQRSTUVWXYZABCDEFGHIJKLMN OPQRSTUVWXYZABCDEFGHIJKLM NOPQRSTUVWXYZABCDEFGHIJKL MNOPQRSTUVWXYZABCDEFGHIJK LMNOPQRSTUVWXYZABCDEFGHIJ KLMNOPQRSTUVWXYZABCDEFGHI JKLMNOPQRSTUVWXYZABCDEFGH IJKLMNOPQRSTUVWXYZABCDEFG HIJKLMNOPQRSTUVWXYZABCDEF GHIJKLMNOPQRSTUVWXYZABCDE FGHIJKLMNOPQRSTUVWXYZABCD EFGHIJKLMNOPQRSTUVWXYZABC DEFGHIJKLMNOPQRSTUVWXYZAB CDEFGHIJKLMNOPQRSTUVWXYZA BCDEFGHIJKLMNOPQRSTUVWXYZ If the right operand is too short to fill the array, the reshape (dyadic \u2374) function repeats the right operand's entries. Here, the reshape \u2374 function repeated the alphabet. The shape (monadic \u2374) function acts on one array, its right operand, by returning a vector whose entries are the lengths of the axes. TEMPERATURE_DATA \u2190 21.4 00010101.074200 21.8 00010101.084700 22.0 00010101.101000 21.5 00010101.120100 21.3 00010101.143600 22.3 00010101.165000 TEMPERATURE_PAGE1 \u2190 6 2 \u2374 TEMPERATURE_DATA \u2374 TEMPERATURE_PAGE1 6 2 \u2374 100 \u235d The shape of a scalar is the empty list \u2374 \u2395A \u235d Number of letters in the alphabet 26 Since elements in matrices are ordered along two axes, an element of a matrix can be specified by two position, the row and column. If only a row position (or column position) is specified, the whole row (or column) is returned. TABLE \u2190 5 5 \u2374 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 TABLE 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 TABLE [ 1 ; 1 ] 1 TABLE [ 1 ;] 1 2 3 4 5 TABLE [; 1 ] 1 6 11 16 21 WORD_SQUARE \u2190 5 5 \u2374 \"HEARTEMBERABUSERESINTREND\" WORD_SQUARE HEART EMBER ABUSE RESIN TREND WORD_SQUARE [ 1 ;] HEART WORD_SQUARE [; 1 ] HEART WORD_SQUARE [ 5 ;] TREND WORD_SQUARE [; 5 ] TREND TEMPERATURE_DATA1 \u2190 21.4 00010101.074200 21.8 00010101.084700 22.0 00010101.101000 21.5 00010101.120100 21.3 00010101.143600 22.3 00010101.165000 TEMPERATURE_PAGE1 \u2190 6 2 \u2374 TEMPERATURE_DATA1 TEMPERATURE_PAGE1 21.4 10101.0742 21.8 10101.0847 22 10101.101 21.5 10101.1201 21.3 10101.1436 22.3 10101.165 TEMPERATURE_PAGE1 [ 1 ; 1 ] 21.4 TEMPERATURE_PAGE1 [ 1 ; 2 ] 10101.0742 TEMPERATURE_PAGE1 [ 1 ;] 21.4 10101.0742 TEMPERATURE_PAGE1 [ 3 ; 2 ] 10101.101 TEMPERATURE_PAGE2 \u2190 6 2 \u2374 22.8 00010101.182300 21.5 00010101.193000 22.1 00010102.211200 22.0 00010103.071500 21.9 00010103.083000 22.4 00010103.094500 TEMPERATURE_PAGE2 22.8 10101.1823 21.5 10101.193 22.1 10102.2112 22 10103.0715 21.9 10103.083 22.4 10103.0945 TEMPERATURE_PAGE2 [ 1 ; 2 ] 10101.1823 TEMPERATURE_PAGE2 [ 2 ; 2 ] 10101.193 TEMPERATURE_PAGE2 [ 3 ; 2 ] 10102.2112 TEMPERATURE_PAGE2 [; 2 ] 0101.1823 10101.193 10102.2112 10103.0715 10103.083 10103.0945 Multiple numbers can be specified for both row and column indices. ALPHABET \u2190 5 5 \u2374 \u2395A ALPHABET [ 1 ;] ABCDE ALPHABET [ 1 2 3 ;] ABCDE FGHIJ KLMNO ALPHABET [ 1 2 3 ; 1 2 3 ] ABC FGH KLM However again, the data measurements are separated without reason, the problem that introducing matrices was supposed to solve. Going one dimension further, the data can be arranged in a three-dimensional ordered collection of data: TEMPERATURE_ARRAY \u2190 2 6 2 \u2374 21.4 00010101.074200 21.8 00010101.084700 22.0 00010101.101000 21.5 00010101.120100 21.3 00010101.143600 22.3 00010101.165000 22.8 00010101.182300 21.5 00010101.193000 22.1 00010102.211200 22.0 00010103.071500 21.9 00010103.083000 22.4 00010103.094500 TEMPERATURE_ARRAY 21.4 10101.0742 21.8 10101.0847 22 10101.101 21.5 10101.1201 21.3 10101.1436 22.3 10101.165 22.8 10101.1823 21.5 10101.193 22.1 10102.2112 22 10103.0715 21.9 10103.083 22.4 10103.0945 \u2374 TEMPERATURE_ARRAY 2 6 2 \u2374\u2374 TEMPERATURE_ARRAY 3 TEMPERATURE_ARRAY [ 1 ;;] 21.4 10101.0742 21.8 10101.0847 22 10101.101 21.5 10101.1201 21.3 10101.1436 22.3 10101.165 TEMPERATURE_ARRAY [ 2 ;;] 22.8 10101.1823 21.5 10101.193 22.1 10102.2112 22 10103.0715 21.9 10103.083 22.4 10103.0945 TEMPERATURE_ARRAY [;; 1 ] 21.4 21.8 22 21.5 21.3 22.3 22.8 21.5 22.1 22 21.9 22.4 Rank The number of axes of an array is called the rank of the array. The arrays we\u2019ve constructed so far are of rank 0 (scalars), rank 1 (vectors), rank 2 (matrices), and rank 3. The maximum rank of an array in Dyalog APL is 15. A useful idiom for getting the rank of an array is the shape of the shape of an array, \u2374\u2374X. Now with your temperature table safely stored in your APL workspace, you can only imagine how many more values you can log and maintain. You excitedly gesture at one of your unimpressed coworkers before you notice you\u2019ve accidentally logged the temperature of the cabin as 226 degrees. Before they have a chance to look at your mistake, you quickly and shamefully change the value. TEMPERATURE_ARRAY 21.4 10101.0742 21.8 10101.0847 226 10101.101 21.5 10101.1201 21.3 10101.1436 22.3 10101.165 22.8 10101.1823 21.5 10101.193 22.1 10102.2112 22 10103.0715 21.9 10103.083 22.4 10103.0945 TEMPERATURE_ARRAY [ 1 ; 3 ; 1 ] \u2190 22.6 TEMPERATURE_ARRAY 21.4 10101.0742 21.8 10101.0847 22.6 10101.101 21.5 10101.1201 21.3 10101.1436 22.3 10101.165 22.8 10101.1823 21.5 10101.193 22.1 10102.2112 22 10103.0715 21.9 10103.083 22.4 10103.0945 That was close! Changing values in arrays acts in the same manner as it does for the case of changing variables, specify the element(s) to change and assign a new value. BOX \u2190 '\u2554\u2550\u2550\u2550\u2557\u2551TRY\u2551\u2560\u2550 \u2550\u2563\u2551APL\u2551\u255a\u2550\u2550\u2550\u255d' BOX \u2190 5 5 \u2374 BOX BOX \u2554\u2550\u2550\u2550\u2557 \u2551 TRY \u2551 \u2560\u2550 \u2550\u2563 \u2551 APL \u2551 \u255a\u2550\u2550\u2550\u255d BOX [ 3 ; 3 ] \u2190 '\u2550' BOX \u2554\u2550\u2550\u2550\u2557 \u2551 TRY \u2551 \u2560\u2550\u2550\u2550\u2563 \u2551 APL \u2551 \u255a\u2550\u2550\u2550\u255d BOX [ 3 ;] \u2560\u2550\u2550\u2550\u2563 BOX [ 3 ;] \u2190 '\u2551 \u2551' BOX \u2554\u2550\u2550\u2550\u2557 \u2551 TRY \u2551 \u2551 \u2551 \u2551 APL \u2551 \u255a\u2550\u2550\u2550\u255d BOX [ 3 ;] \u2190 '\u256c' BOX \u2554\u2550\u2550\u2550\u2557 \u2551 TRY \u2551 \u256c\u256c\u256c\u256c\u256c \u2551 APL \u2551 \u255a\u2550\u2550\u2550\u255d","title":"2.4 - Higher dimensional space"},{"location":"course/ch2/part4/#higher-dimensional-space","text":"This part will cover Constructing matrices Constructing 3D arrays The reshape function The astute reader may have noticed that, although the vector data is much more structured, the dates and times of the measurements have been completely forgotten. One solution is to use more vectors to organize this data, here using floating-point decimal encoded format. This format stores the dates as decimal numbers, where the integer part stores the year, month, and day, and the fractional part stores the hour, minute, and second, yyyymmdd.hhmmss. For example, 00010101.074200 is year 0001, month 01, day 01, hour 05, minute 42, and second 00. TEMPERATURE_PAGE1 \u2190 21.4 21.8 22.0 21.5 21.3 22.3 TEMPERATURE_PAGE1_DATE \u2190 00010101.074200 00010101.084700 00010101.101000 00010101.120100 00010101.143600 00010101.165000 TEMPERATURE_PAGE2 \u2190 22.8 21.5 22.1 22.0 21.9 22.4 TEMPERATURE_PAGE2_DATE \u2190 00010101.182300 00010101.193000 00010101.211200 00010102.071500 00010102.083000 00010102.094500 and access dates and times using the same index; TEMPERATURE_PAGE1 [ 2 ] 21.8 TEMPERATURE_PAGE1_DATE [ 2 ] 00010101.084700 There is a built-in function to deal with dates and times, the \u2395DT command, which will be introduced in chapter 3. However, this lack of structure is exactly what introducing vectors was supposed to solve; two closely related pieces of information, the time of a measurement and the value of the measurement, are kept separate when they should logically be part of the same collection of data. Measurement data of this form are usually stored in tables, and it is only natural to try to store them in the same manner in a computer system. You decide to start over yet again, and decide to store data in a matrix instead TEMPERATURE_PAGE1 \u2190 6 2 \u2374 21.4 00010101.074200 21.8 00010101.084700 22.0 00010101.101000 21.5 00010101.120100 21.3 00010101.143600 22.3 00010101.165000 TEMPERATURE_PAGE2 \u2190 6 2 \u2374 22.8 00010101.182300 21.5 00010101.193000 22.1 00010102.211200 22.0 00010103.071500 21.9 00010103.083000 22.4 00010103.094500 Matrices are rectangles of data. They can be created by reshaping (\u2374) a vector. Typing the reshape function \u2374 Prefix method: PREFIX r Tab method: r r Tab Function Valence The symbol \u2374 actually represents two different functions depending on the manner in which arguments are given. When applied to a single argument, \u2374X, it acts as the shape function; when two arguments are given one on either side, X\u2374Y, it acts as the reshape function. The former function is the monadic function associated to the symbol \u2374, and the latter is the dyadic function associated with the symbol \u2374. The reshape function acts by returning an array whose entries are the entries of its right operand, and whose axes are specified by a vector of integers as its left operand, more concretely, TEMPERATURE_DATA \u2190 21.4 00010101.074200 21.8 00010101.084700 22.0 00010101.101000 21.5 00010101.120100 21.3 00010101.143600 22.3 00010101.165000 6 2 \u2374 TEMPERATURE_DATA 21.4 10101.0742 21.8 10101.0847 22 10101.101 21.5 10101.1201 21.3 10101.1436 22.3 10101.165 \u235d The reshaped matrix has 6 rows and 2 columns turns the vector TEMPERATURE_DATA into a matrix with axes of length six and two, consisting of the entries in TEMPERATURE_DATA. PYRAMID_ENTRIES \u2190 1 1 1 1 1 1 2 2 2 1 1 2 3 2 1 1 2 2 2 1 1 1 1 1 1 1 5 5 \u2374 PYRAMID_ENTRIES \u235d 5 rows and 5 columns 1 1 1 1 1 1 2 2 2 1 1 2 3 2 1 1 2 2 2 1 1 1 1 1 1 Strings in APL are vectors of characters, defined using single quotes. The \u2395A function return the string 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', more on this in Chapter 3. ALPHABET \u2190 \u2395A 26 25 \u2374 ALPHABET ABCDEFGHIJKLMNOPQRSTUVWXY ZABCDEFGHIJKLMNOPQRSTUVWX YZABCDEFGHIJKLMNOPQRSTUVW XYZABCDEFGHIJKLMNOPQRSTUV WXYZABCDEFGHIJKLMNOPQRSTU VWXYZABCDEFGHIJKLMNOPQRST UVWXYZABCDEFGHIJKLMNOPQRS TUVWXYZABCDEFGHIJKLMNOPQR STUVWXYZABCDEFGHIJKLMNOPQ RSTUVWXYZABCDEFGHIJKLMNOP QRSTUVWXYZABCDEFGHIJKLMNO PQRSTUVWXYZABCDEFGHIJKLMN OPQRSTUVWXYZABCDEFGHIJKLM NOPQRSTUVWXYZABCDEFGHIJKL MNOPQRSTUVWXYZABCDEFGHIJK LMNOPQRSTUVWXYZABCDEFGHIJ KLMNOPQRSTUVWXYZABCDEFGHI JKLMNOPQRSTUVWXYZABCDEFGH IJKLMNOPQRSTUVWXYZABCDEFG HIJKLMNOPQRSTUVWXYZABCDEF GHIJKLMNOPQRSTUVWXYZABCDE FGHIJKLMNOPQRSTUVWXYZABCD EFGHIJKLMNOPQRSTUVWXYZABC DEFGHIJKLMNOPQRSTUVWXYZAB CDEFGHIJKLMNOPQRSTUVWXYZA BCDEFGHIJKLMNOPQRSTUVWXYZ If the right operand is too short to fill the array, the reshape (dyadic \u2374) function repeats the right operand's entries. Here, the reshape \u2374 function repeated the alphabet. The shape (monadic \u2374) function acts on one array, its right operand, by returning a vector whose entries are the lengths of the axes. TEMPERATURE_DATA \u2190 21.4 00010101.074200 21.8 00010101.084700 22.0 00010101.101000 21.5 00010101.120100 21.3 00010101.143600 22.3 00010101.165000 TEMPERATURE_PAGE1 \u2190 6 2 \u2374 TEMPERATURE_DATA \u2374 TEMPERATURE_PAGE1 6 2 \u2374 100 \u235d The shape of a scalar is the empty list \u2374 \u2395A \u235d Number of letters in the alphabet 26 Since elements in matrices are ordered along two axes, an element of a matrix can be specified by two position, the row and column. If only a row position (or column position) is specified, the whole row (or column) is returned. TABLE \u2190 5 5 \u2374 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 TABLE 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 TABLE [ 1 ; 1 ] 1 TABLE [ 1 ;] 1 2 3 4 5 TABLE [; 1 ] 1 6 11 16 21 WORD_SQUARE \u2190 5 5 \u2374 \"HEARTEMBERABUSERESINTREND\" WORD_SQUARE HEART EMBER ABUSE RESIN TREND WORD_SQUARE [ 1 ;] HEART WORD_SQUARE [; 1 ] HEART WORD_SQUARE [ 5 ;] TREND WORD_SQUARE [; 5 ] TREND TEMPERATURE_DATA1 \u2190 21.4 00010101.074200 21.8 00010101.084700 22.0 00010101.101000 21.5 00010101.120100 21.3 00010101.143600 22.3 00010101.165000 TEMPERATURE_PAGE1 \u2190 6 2 \u2374 TEMPERATURE_DATA1 TEMPERATURE_PAGE1 21.4 10101.0742 21.8 10101.0847 22 10101.101 21.5 10101.1201 21.3 10101.1436 22.3 10101.165 TEMPERATURE_PAGE1 [ 1 ; 1 ] 21.4 TEMPERATURE_PAGE1 [ 1 ; 2 ] 10101.0742 TEMPERATURE_PAGE1 [ 1 ;] 21.4 10101.0742 TEMPERATURE_PAGE1 [ 3 ; 2 ] 10101.101 TEMPERATURE_PAGE2 \u2190 6 2 \u2374 22.8 00010101.182300 21.5 00010101.193000 22.1 00010102.211200 22.0 00010103.071500 21.9 00010103.083000 22.4 00010103.094500 TEMPERATURE_PAGE2 22.8 10101.1823 21.5 10101.193 22.1 10102.2112 22 10103.0715 21.9 10103.083 22.4 10103.0945 TEMPERATURE_PAGE2 [ 1 ; 2 ] 10101.1823 TEMPERATURE_PAGE2 [ 2 ; 2 ] 10101.193 TEMPERATURE_PAGE2 [ 3 ; 2 ] 10102.2112 TEMPERATURE_PAGE2 [; 2 ] 0101.1823 10101.193 10102.2112 10103.0715 10103.083 10103.0945 Multiple numbers can be specified for both row and column indices. ALPHABET \u2190 5 5 \u2374 \u2395A ALPHABET [ 1 ;] ABCDE ALPHABET [ 1 2 3 ;] ABCDE FGHIJ KLMNO ALPHABET [ 1 2 3 ; 1 2 3 ] ABC FGH KLM However again, the data measurements are separated without reason, the problem that introducing matrices was supposed to solve. Going one dimension further, the data can be arranged in a three-dimensional ordered collection of data: TEMPERATURE_ARRAY \u2190 2 6 2 \u2374 21.4 00010101.074200 21.8 00010101.084700 22.0 00010101.101000 21.5 00010101.120100 21.3 00010101.143600 22.3 00010101.165000 22.8 00010101.182300 21.5 00010101.193000 22.1 00010102.211200 22.0 00010103.071500 21.9 00010103.083000 22.4 00010103.094500 TEMPERATURE_ARRAY 21.4 10101.0742 21.8 10101.0847 22 10101.101 21.5 10101.1201 21.3 10101.1436 22.3 10101.165 22.8 10101.1823 21.5 10101.193 22.1 10102.2112 22 10103.0715 21.9 10103.083 22.4 10103.0945 \u2374 TEMPERATURE_ARRAY 2 6 2 \u2374\u2374 TEMPERATURE_ARRAY 3 TEMPERATURE_ARRAY [ 1 ;;] 21.4 10101.0742 21.8 10101.0847 22 10101.101 21.5 10101.1201 21.3 10101.1436 22.3 10101.165 TEMPERATURE_ARRAY [ 2 ;;] 22.8 10101.1823 21.5 10101.193 22.1 10102.2112 22 10103.0715 21.9 10103.083 22.4 10103.0945 TEMPERATURE_ARRAY [;; 1 ] 21.4 21.8 22 21.5 21.3 22.3 22.8 21.5 22.1 22 21.9 22.4 Rank The number of axes of an array is called the rank of the array. The arrays we\u2019ve constructed so far are of rank 0 (scalars), rank 1 (vectors), rank 2 (matrices), and rank 3. The maximum rank of an array in Dyalog APL is 15. A useful idiom for getting the rank of an array is the shape of the shape of an array, \u2374\u2374X. Now with your temperature table safely stored in your APL workspace, you can only imagine how many more values you can log and maintain. You excitedly gesture at one of your unimpressed coworkers before you notice you\u2019ve accidentally logged the temperature of the cabin as 226 degrees. Before they have a chance to look at your mistake, you quickly and shamefully change the value. TEMPERATURE_ARRAY 21.4 10101.0742 21.8 10101.0847 226 10101.101 21.5 10101.1201 21.3 10101.1436 22.3 10101.165 22.8 10101.1823 21.5 10101.193 22.1 10102.2112 22 10103.0715 21.9 10103.083 22.4 10103.0945 TEMPERATURE_ARRAY [ 1 ; 3 ; 1 ] \u2190 22.6 TEMPERATURE_ARRAY 21.4 10101.0742 21.8 10101.0847 22.6 10101.101 21.5 10101.1201 21.3 10101.1436 22.3 10101.165 22.8 10101.1823 21.5 10101.193 22.1 10102.2112 22 10103.0715 21.9 10103.083 22.4 10103.0945 That was close! Changing values in arrays acts in the same manner as it does for the case of changing variables, specify the element(s) to change and assign a new value. BOX \u2190 '\u2554\u2550\u2550\u2550\u2557\u2551TRY\u2551\u2560\u2550 \u2550\u2563\u2551APL\u2551\u255a\u2550\u2550\u2550\u255d' BOX \u2190 5 5 \u2374 BOX BOX \u2554\u2550\u2550\u2550\u2557 \u2551 TRY \u2551 \u2560\u2550 \u2550\u2563 \u2551 APL \u2551 \u255a\u2550\u2550\u2550\u255d BOX [ 3 ; 3 ] \u2190 '\u2550' BOX \u2554\u2550\u2550\u2550\u2557 \u2551 TRY \u2551 \u2560\u2550\u2550\u2550\u2563 \u2551 APL \u2551 \u255a\u2550\u2550\u2550\u255d BOX [ 3 ;] \u2560\u2550\u2550\u2550\u2563 BOX [ 3 ;] \u2190 '\u2551 \u2551' BOX \u2554\u2550\u2550\u2550\u2557 \u2551 TRY \u2551 \u2551 \u2551 \u2551 APL \u2551 \u255a\u2550\u2550\u2550\u255d BOX [ 3 ;] \u2190 '\u256c' BOX \u2554\u2550\u2550\u2550\u2557 \u2551 TRY \u2551 \u256c\u256c\u256c\u256c\u256c \u2551 APL \u2551 \u255a\u2550\u2550\u2550\u255d","title":"Higher dimensional space"},{"location":"course/ch2/part5/","text":"Nested arrays This part will cover Basics of nested arrays How to catenate vectors properly Be warned, elements of arrays can be vectors, or matrices, or arrays of higher rank as well! We will discuss this in depth in Chapter 5. Look what happens when we try to create the new temperature matrix from the already existing temperature vectors TEMPERATURE_DATA1 \u2190 21.4 00010101.074200 21.8 00010101.084700 TEMPERATURE_DATA2 \u2190 22.8 00010101.182300 21.5 00010101.193000 TEMPERATURE_ARRAY \u2190 2 2 2 \u2374 TEMPERATURE_DATA1 TEMPERATURE_DATA2 TEMPERATURE_ARRAY \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 21.4 10101.0742 21.8 10101.0847 \u2502 22.8 10101.1823 21.5 10101.193 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 21.4 10101.0742 21.8 10101.0847 \u2502 22.8 10101.1823 21.5 10101.193 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 21.4 10101.0742 21.8 10101.0847 \u2502 22.8 10101.1823 21.5 10101.193 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 21.4 10101.0742 21.8 10101.0847 \u2502 22.8 10101.1823 21.5 10101.193 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 compared to the expected result, which is 21.4 00010101.074200 21.8 00010101.084700 22.8 00010101.182300 21.5 00010101.193000 Attempting to access the elements of the rank 3 array returns vectors, this is because we\u2019ve accidentally created an array of vectors rather than an array of their elements. If we replace TEMPERATURE_DATA1 and TEMPERATURE_DATA2 with scalars, the situation is a bit more clear. ARRAY \u2190 2 2 2 \u2374 1 2 ARRAY 1 2 1 2 1 2 1 2 The proper way to combine two vectors into a single longer vector is using the catenate , function, generally joining two arrays along a common edge. Monadically, the ravel , function can be used to \"unravel\" a matrix into a vector of its elements in top-down left-right order, called ravel order. ARRAY \u2190 2 2 2 \u2374 1 2 3 4 5 6 7 8 ARRAY 1 2 3 4 5 6 7 8 , ARRAY 1 2 3 4 5 6 7 8 ARRAY , 1 1 2 1 3 4 1 5 6 1 7 8 1 ARRAY , ARRAY 1 2 1 2 3 4 3 4 5 6 5 6 7 8 7 8 TEMPERATURE_DATA1 \u2190 21.4 00010101.074200 21.8 00010101.084700 TEMPERATURE_DATA2 \u2190 22.8 00010101.182300 21.5 00010101.193000 TEMPERATURE_ARRAY \u2190 2 2 2 \u2374 TEMPERATURE_DATA1 , TEMPERATURE_DATA2 21.4 10101.0742 21.8 10101.0847 22.8 10101.1823 21.5 10101.193 Boxing The ]Box user command controls how array output is displayed, with levels of nesting shown as boxes. nested \u2190 2 2 \u2374 ( \u2373 3 ) ( ' ' ) ( ' ' ) ( 2 2 \u2374 ( ' ' ) ( \u2373 3 ) ( 2 2 \u2374 ( \u2373 3 ) ( ' ' ) ( ' ' ) ( \u2373 2 )) ( ' ' )) nested 1 2 3 1 2 3 1 2 3 1 2 ] Box on Was OFF nested \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 3 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502 \u2502\u2502 \u2502 1 2 3 \u2502\u2502 \u2502 \u2502\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502 \u2502\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\u2502 \u2502\u2502 \u2502 \u2502\u2502\u2502 1 2 3 \u2502 \u2502\u2502 \u2502\u2502 \u2502 \u2502\u2502\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 \u2502 \u2502\u2502\u2502 \u2502 1 2 \u2502\u2502 \u2502\u2502 \u2502 \u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\u2502 \u2502\u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"2.5 - Nested arrays"},{"location":"course/ch2/part5/#nested-arrays","text":"This part will cover Basics of nested arrays How to catenate vectors properly Be warned, elements of arrays can be vectors, or matrices, or arrays of higher rank as well! We will discuss this in depth in Chapter 5. Look what happens when we try to create the new temperature matrix from the already existing temperature vectors TEMPERATURE_DATA1 \u2190 21.4 00010101.074200 21.8 00010101.084700 TEMPERATURE_DATA2 \u2190 22.8 00010101.182300 21.5 00010101.193000 TEMPERATURE_ARRAY \u2190 2 2 2 \u2374 TEMPERATURE_DATA1 TEMPERATURE_DATA2 TEMPERATURE_ARRAY \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 21.4 10101.0742 21.8 10101.0847 \u2502 22.8 10101.1823 21.5 10101.193 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 21.4 10101.0742 21.8 10101.0847 \u2502 22.8 10101.1823 21.5 10101.193 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 21.4 10101.0742 21.8 10101.0847 \u2502 22.8 10101.1823 21.5 10101.193 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 21.4 10101.0742 21.8 10101.0847 \u2502 22.8 10101.1823 21.5 10101.193 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 compared to the expected result, which is 21.4 00010101.074200 21.8 00010101.084700 22.8 00010101.182300 21.5 00010101.193000 Attempting to access the elements of the rank 3 array returns vectors, this is because we\u2019ve accidentally created an array of vectors rather than an array of their elements. If we replace TEMPERATURE_DATA1 and TEMPERATURE_DATA2 with scalars, the situation is a bit more clear. ARRAY \u2190 2 2 2 \u2374 1 2 ARRAY 1 2 1 2 1 2 1 2 The proper way to combine two vectors into a single longer vector is using the catenate , function, generally joining two arrays along a common edge. Monadically, the ravel , function can be used to \"unravel\" a matrix into a vector of its elements in top-down left-right order, called ravel order. ARRAY \u2190 2 2 2 \u2374 1 2 3 4 5 6 7 8 ARRAY 1 2 3 4 5 6 7 8 , ARRAY 1 2 3 4 5 6 7 8 ARRAY , 1 1 2 1 3 4 1 5 6 1 7 8 1 ARRAY , ARRAY 1 2 1 2 3 4 3 4 5 6 5 6 7 8 7 8 TEMPERATURE_DATA1 \u2190 21.4 00010101.074200 21.8 00010101.084700 TEMPERATURE_DATA2 \u2190 22.8 00010101.182300 21.5 00010101.193000 TEMPERATURE_ARRAY \u2190 2 2 2 \u2374 TEMPERATURE_DATA1 , TEMPERATURE_DATA2 21.4 10101.0742 21.8 10101.0847 22.8 10101.1823 21.5 10101.193 Boxing The ]Box user command controls how array output is displayed, with levels of nesting shown as boxes. nested \u2190 2 2 \u2374 ( \u2373 3 ) ( ' ' ) ( ' ' ) ( 2 2 \u2374 ( ' ' ) ( \u2373 3 ) ( 2 2 \u2374 ( \u2373 3 ) ( ' ' ) ( ' ' ) ( \u2373 2 )) ( ' ' )) nested 1 2 3 1 2 3 1 2 3 1 2 ] Box on Was OFF nested \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 3 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502 \u2502\u2502 \u2502 1 2 3 \u2502\u2502 \u2502 \u2502\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502 \u2502\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\u2502 \u2502\u2502 \u2502 \u2502\u2502\u2502 1 2 3 \u2502 \u2502\u2502 \u2502\u2502 \u2502 \u2502\u2502\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 \u2502 \u2502\u2502\u2502 \u2502 1 2 \u2502\u2502 \u2502\u2502 \u2502 \u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\u2502 \u2502\u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Nested arrays"},{"location":"course/ch2/read/","text":"Read exercises For each of the following exercises, try to figure out what the input will produce in the TryAPL terminal. Check your answers by opening the \"Output\" tab. If you think an error will occur, try to predict which error it will be and where the arrow will point to. The exercises are not checked or graded: use them to check your knowledge!","title":"2.R - Read exercises"},{"location":"course/ch2/read/#read-exercises","text":"For each of the following exercises, try to figure out what the input will produce in the TryAPL terminal. Check your answers by opening the \"Output\" tab. If you think an error will occur, try to predict which error it will be and where the arrow will point to. The exercises are not checked or graded: use them to check your knowledge!","title":"Read exercises"},{"location":"course/ch2/summary/","text":"Function index Here is a table of symbols we have used and how to type them in TryAPL. It might be useful to review this page as you are doing the read and write exercises in the next sections. New functions Symbol Name Function Key combination \u2190 Assignment operator Assigning variables < - Tab \u2395 Quad Printing PREFIX L Old functions Symbol Name Function Key combination + Plus Addition + - Minus Subtraction - \u00d7 Times Multiplication PREFIX - \u00f7 Divide Division PREFIX = * Power Exponentiation * \u00af Negative sign Negation of a number PREFIX 2 \u235d Lamp Comment PREFIX ,","title":"2.S - Summary"},{"location":"course/ch2/summary/#function-index","text":"Here is a table of symbols we have used and how to type them in TryAPL. It might be useful to review this page as you are doing the read and write exercises in the next sections.","title":"Function index"},{"location":"course/ch2/summary/#new-functions","text":"Symbol Name Function Key combination \u2190 Assignment operator Assigning variables < - Tab \u2395 Quad Printing PREFIX L","title":"New functions"},{"location":"course/ch2/summary/#old-functions","text":"Symbol Name Function Key combination + Plus Addition + - Minus Subtraction - \u00d7 Times Multiplication PREFIX - \u00f7 Divide Division PREFIX = * Power Exponentiation * \u00af Negative sign Negation of a number PREFIX 2 \u235d Lamp Comment PREFIX ,","title":"Old functions"},{"location":"course/ch2/write/","text":"Write exercises Submit APL code for the following exercises. Your submissions are graded using TMC. Make sure to log in to be able to submit your work! Remember, you can test out ideas and develop you solution at TryAPL before submitting it here. You can submit as many solutions as you like. If you submit a correct solution at least once, you will receive points on the TMC server and be able to see the model solution. If the write problem is red, it is unsolved. If it it green, you have solved it and received points for it on the server.","title":"2.W - Write exercises"},{"location":"course/ch2/write/#write-exercises","text":"Submit APL code for the following exercises. Your submissions are graded using TMC. Make sure to log in to be able to submit your work! Remember, you can test out ideas and develop you solution at TryAPL before submitting it here. You can submit as many solutions as you like. If you submit a correct solution at least once, you will receive points on the TMC server and be able to see the model solution. If the write problem is red, it is unsolved. If it it green, you have solved it and received points for it on the server.","title":"Write exercises"},{"location":"course/ch3/bonus/","text":"Bonus content: A Musical Interlude This part is optional This part is considered to be bonus content. It contains some more advanced topics that are not covered in the main course. It can also give some examples of functions and topics that are introuced later in the course. There are no exercises related to this content. Feel free to skim or skip this section for now, and return to it later! In addition to a linear progression of ideas, this course will have several projects that showcase features of the language in a non-linear order. These projects will use ideas or operations that might not have been covered yet, so brief explanations will be given, anticipating more complete explanations in later chapters. In this project, we will use basic music theory to algorithmically generate melodies entirely in APL. The Theoretical Minimum For most people, the sensation of sound is mediated through the ears. The ears achieve this by allowing vibrations in the air to produce waves in the fluids of the inner ear, stimulating the inner ear hair cells whose signals are eventually processed by the brain. The pitch of a sound is the frequency of this vibration. \"Notes\" distinguish sounds by their pitch. In western music, the standard convention is to consider pitches whose ratio is a power of 2 as equivalent notes, this is called \"octave equivalence\". Equivalent notes with higher or lower pitch are said to be an \"octave\" above or below the note, for reasons that will be made clear. The pitch of a sound is the frequency of this vibration. \"Notes\" distinguish sounds by their pitch. In western music, the standard convention is to consider pitches whose ratio is a power of 2 as equivalent notes, this is called \"octave equivalence\". Equivalent notes with higher or lower pitch are said to be an \"octave\" above or below the note, for reasons that will be made clear. \u235d For example, between the pitches 440Hz and 880Hz, \u230a 440 \u00d7 ( 2 * ( \u2373 11 ) \u00f7 12 ) 466 493 523 554 587 622 659 698 739 783 830 \u235d \u230a Floor of \u235d 440\u00d7 440 times \u235d 2* 2 to the power of \u235d (\u237311)\u00f712 the numbers 1,2,3,...,11 divided by 12 Notes are labelled using the seven letters A through G, with sharps (\u266f) and flats (\u266d) to signify the notes in-between by raising or lowering pitch, with redundancy. There are eight letters from A through G back to A, justifying the use of the word \"octave\". Starting from C, the twelve notes are C, C\u266f or D\u266d, D, D\u266f or E\u266d, E, F, F\u266f or G\u266d, G, G\u266f or A\u266d, A, A\u266f or B\u266d, and B. A musical scale is a certain selection of these notes, usually spanning an octave. In our case, we will restrict ourselves to using the C major scale, the notes C, D, E, F, G, A, B. The notes of a major scale are usually referred to using an ordinal number from 1st through 7th, or by roman numerals I, II, III, IV, V, VI, VII. A musical scale is a certain selection of these notes, usually spanning an octave. In our case, we will restrict ourselves to using the C major scale, the notes C, D, E, F, G, A, B. The notes of a major scale are usually referred to using an ordinal number from 1st through 7th, or by roman numerals I, II, III, IV, V, VI, VII. Implementation From the above discussion, the problem is now clear. Given some starting note, we want to generate movements between the notes with some preference for certain special movements. In the table above, red numerals represent a preferred following note. For example, we want VI to resolve to a V more frequently than to move to a VII or down to a IV . Note that the next note depends only on the previous note, so we can represent this data as a graph. Then, the data is a list of triples, consisting of the starting note, the ending note, and the color (or, priority) of the arrow between those notes. We can lay out this data in the form of a table as follows, where the row represents the starting note and the column represents the ending note. For example, the first row says that, for I as the starting note, we can get to I itself, II, or III with equal preference, 1 1 1. We use 1 for standard movements and 2 for preferred movements. Let\u2019s write try to create this matrix in APL using the reshape \u2374 operator, remembering that if the right argument is not long enough, it will repeat it to fill the required dimensions. M \u2190 7 7 \u2374 1 1 1 0 0 0 0 M 1 1 1 0 0 0 0 1 1 1 0 0 0 0 1 1 1 0 0 0 0 1 1 1 0 0 0 0 1 1 1 0 0 0 0 1 1 1 0 0 0 0 1 1 1 0 0 0 0 \u235d Not quite M \u2190 7 7 \u2374 1 1 1 0 0 0 0 0 M 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 \u235d Closer M \u2190 7 7 \u2374 1 1 0 0 0 0 0 1 M 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 \u235d Getting there M \u2190 7 7 \u2374 1 1 1 0 0 0 1 1 M 1 1 1 0 0 0 1 1 1 1 1 0 0 0 1 1 1 1 1 0 0 0 1 1 1 1 1 0 0 0 1 1 1 1 1 0 0 0 1 1 1 1 1 0 0 0 1 1 1 \u235d Almost exactly what we want Our melodies here are restricted to one octave. If we allowed a wider range, we would allow the 7th to go to the 1st of the next octave and vice versa. M [ 7 ; 1 ] \u2190 0 M [ 1 ; 7 ] \u2190 0 M [ 6 ; 5 ] \u2190 2 M [ 4 ; 3 ] \u2190 2 M [ 2 ; 1 ] \u2190 2 M [ 2 ; 3 ] \u2190 2 M 1 1 1 0 0 0 0 2 1 2 1 0 0 0 1 1 1 1 1 0 0 0 1 2 1 1 1 0 0 0 1 1 1 1 1 0 0 0 1 2 1 1 0 0 0 0 1 1 1 \u235d Perfect The next step is to figure out, given a note, what the next possible notes are. This is very easily done using the matrix multiplication +.\u00d7 operator. This operator is actually the inner product operator . applied to the functions + and \u00d7, see [Inner and Outer product section]. Represent a note with scale degree N as a vector with a 1 in the Nth slot, and 0 otherwise, then matrix multiplication with M represents picking out the Nth row, which as we mentioned above corresponds to selecting the edges in the graph where N is the starting note. Recall that \u23737 is 1 2 3 4 5 6 7, this is equivalent to 2=1 2 3 4 5 6 7 The subsequence notes are I (Preferred), II, III (Preferred), and IV II \u2190 2 =\u2373 7 II 0 1 0 0 0 0 0 II + . \u00d7 M 2 1 2 1 0 0 0 Using this, we want to decide on a movement to another note, weighed by priority. One easy way to achieve this is using the roll ? function, which simulates the rolling of a dice with faces numbering 1 to the right argument. We will roll one die from 1 to 10, or 20 for preferred movements, for every possible following note, and pick the largest result. The subsequent notes are I, II, III, and IV Multiplying by 10 to prepare to roll dice with 10, or 20, faces Notice that ? 0 returns a random real number between 0 and 1 The Grade Down operator \u2352 returns the indices of the elements of the list from largest to smallest Getting the index of the largest roll. This is III. N \u2190 II + . \u00d7 M N 2 1 2 1 0 0 0 N \u00d7 \u2190 10 N 20 10 20 10 0 0 0 NR \u2190 ? N NR 3 8 13 0.9740484038 0.3581395503 0.5245918312 \u2352 100 200 0.1 1 2 1 4 3 \u2352 NR 3 2 1 4 6 5 1 \u2337\u2352 NR 3 ( \u2373 7 ) = 1 \u2337\u2352 NR 0 0 1 0 0 0 0 This is the basic algorithm we will use to generate our melodies. Let\u2019s enclose our note generation algorithm in a direct function and generate a melody. A direct function/dfn (pronounced dee-fun) is defined using {curly braces}. The right argument to the function is called \u2375, and the left \u237a. Statements in a dfn can be separated by a \u22c4 diamond. However, only it stops as soon as a statement which returns a value is evaluated The replicate / operator generates copies of its right argument elements depending on their left arguments In this case, it replicates 0 of everything other than one copy of D 10 { \u237a + \u2375 } 2 12 10 { \u237a + \u2375 \u22c4 \u237a - \u2375 } 2 12 NEXT \u2190 { ( \u2373 7 ) = 1 \u2337\u2352? ( \u2375 \u00d7 10 ) + . \u00d7 M } NEXT 1 0 0 0 0 0 0 0 1 0 0 0 0 0 NOTES \u2190 'CDEFGAB' ( 0 1 0 0 0 0 0 ) / NOTES D MELODY \u2190 { res \u2190 NEXT \u2375 \u22c4 \u235e \u2190 res / NOTES \u22c4 MELODY res } MELODY 1 0 0 0 0 0 0 CDCECEGBGAGGGBBAAGBGEDEDFFEDCDCDECCDCECDECECEFEFEEGEGECEFEDEGBBBGBG This function will run forever, generating notes until interrupted. One way of running the defun for a fixed number of steps is to add a variable representing the number of steps. We will use the left argument \u237a as this variable. MELODY \u2190 { \u237a \u2190 0 \u22c4 \u237a > 20 : '\u266b' \u22c4 res \u2190 NEXT \u2375 \u22c4 \u235e \u2190 res / NOTES \u22c4 ( \u237a + 1 ) MELODY res } MELODY 1 0 0 0 0 0 0 CCDEGAFDCEGFDEDCDCECC \u266b Assigning a value to the left argument \u237a gives a dfns a default left argument. The assignment is only executed if the function is called monadically, that is, if there is no supplied left argument. In this case, the left argument \u237a starts at 0. The generation of the next note, the \"(\u237a+1) MELODY res\" statement, is executed with an incremented left argument. The guarded expression \u237a>20: '\u266b' states that \u266b is returned when \u237a is becomes greater than 20. Since the execution of a dfn stops as soon as a statement returns a value, the code to generate the next note is no longer executed. This is the result we were after! With just a couple lines of APL, we were able to encode general guidelines for melodic composition and write a function generating random melodies according to these principles algorithmically by tracing out a random walk through a graph. These random graph processes are more generally known as Markov Processes and have a much broader range of applicability than our case here. Applications include the Google PageRank algorithm which powered the Google search engine, particle physics simulations of quantum field theory on a lattice, and speech recognition systems. There is clearly so much more we could add to our program, from generating rhythm to accompany the melody, to adding chord progressions and harmony, and there will always be more to add. We will however stop here to enjoy the melodies our program has generated, and leave it up to the interested reader to write their own digital musicians. Some of the generated melodies are included below. Your browser does not support the audio element. Your browser does not support the audio element. Your browser does not support the audio element.","title":"3.B - A Musical Interlude"},{"location":"course/ch3/bonus/#bonus-content-a-musical-interlude","text":"This part is optional This part is considered to be bonus content. It contains some more advanced topics that are not covered in the main course. It can also give some examples of functions and topics that are introuced later in the course. There are no exercises related to this content. Feel free to skim or skip this section for now, and return to it later! In addition to a linear progression of ideas, this course will have several projects that showcase features of the language in a non-linear order. These projects will use ideas or operations that might not have been covered yet, so brief explanations will be given, anticipating more complete explanations in later chapters. In this project, we will use basic music theory to algorithmically generate melodies entirely in APL.","title":"Bonus content: A Musical Interlude"},{"location":"course/ch3/bonus/#the-theoretical-minimum","text":"For most people, the sensation of sound is mediated through the ears. The ears achieve this by allowing vibrations in the air to produce waves in the fluids of the inner ear, stimulating the inner ear hair cells whose signals are eventually processed by the brain. The pitch of a sound is the frequency of this vibration. \"Notes\" distinguish sounds by their pitch. In western music, the standard convention is to consider pitches whose ratio is a power of 2 as equivalent notes, this is called \"octave equivalence\". Equivalent notes with higher or lower pitch are said to be an \"octave\" above or below the note, for reasons that will be made clear. The pitch of a sound is the frequency of this vibration. \"Notes\" distinguish sounds by their pitch. In western music, the standard convention is to consider pitches whose ratio is a power of 2 as equivalent notes, this is called \"octave equivalence\". Equivalent notes with higher or lower pitch are said to be an \"octave\" above or below the note, for reasons that will be made clear. \u235d For example, between the pitches 440Hz and 880Hz, \u230a 440 \u00d7 ( 2 * ( \u2373 11 ) \u00f7 12 ) 466 493 523 554 587 622 659 698 739 783 830 \u235d \u230a Floor of \u235d 440\u00d7 440 times \u235d 2* 2 to the power of \u235d (\u237311)\u00f712 the numbers 1,2,3,...,11 divided by 12 Notes are labelled using the seven letters A through G, with sharps (\u266f) and flats (\u266d) to signify the notes in-between by raising or lowering pitch, with redundancy. There are eight letters from A through G back to A, justifying the use of the word \"octave\". Starting from C, the twelve notes are C, C\u266f or D\u266d, D, D\u266f or E\u266d, E, F, F\u266f or G\u266d, G, G\u266f or A\u266d, A, A\u266f or B\u266d, and B. A musical scale is a certain selection of these notes, usually spanning an octave. In our case, we will restrict ourselves to using the C major scale, the notes C, D, E, F, G, A, B. The notes of a major scale are usually referred to using an ordinal number from 1st through 7th, or by roman numerals I, II, III, IV, V, VI, VII. A musical scale is a certain selection of these notes, usually spanning an octave. In our case, we will restrict ourselves to using the C major scale, the notes C, D, E, F, G, A, B. The notes of a major scale are usually referred to using an ordinal number from 1st through 7th, or by roman numerals I, II, III, IV, V, VI, VII.","title":"The Theoretical Minimum"},{"location":"course/ch3/bonus/#implementation","text":"From the above discussion, the problem is now clear. Given some starting note, we want to generate movements between the notes with some preference for certain special movements. In the table above, red numerals represent a preferred following note. For example, we want VI to resolve to a V more frequently than to move to a VII or down to a IV . Note that the next note depends only on the previous note, so we can represent this data as a graph. Then, the data is a list of triples, consisting of the starting note, the ending note, and the color (or, priority) of the arrow between those notes. We can lay out this data in the form of a table as follows, where the row represents the starting note and the column represents the ending note. For example, the first row says that, for I as the starting note, we can get to I itself, II, or III with equal preference, 1 1 1. We use 1 for standard movements and 2 for preferred movements. Let\u2019s write try to create this matrix in APL using the reshape \u2374 operator, remembering that if the right argument is not long enough, it will repeat it to fill the required dimensions. M \u2190 7 7 \u2374 1 1 1 0 0 0 0 M 1 1 1 0 0 0 0 1 1 1 0 0 0 0 1 1 1 0 0 0 0 1 1 1 0 0 0 0 1 1 1 0 0 0 0 1 1 1 0 0 0 0 1 1 1 0 0 0 0 \u235d Not quite M \u2190 7 7 \u2374 1 1 1 0 0 0 0 0 M 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 \u235d Closer M \u2190 7 7 \u2374 1 1 0 0 0 0 0 1 M 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 \u235d Getting there M \u2190 7 7 \u2374 1 1 1 0 0 0 1 1 M 1 1 1 0 0 0 1 1 1 1 1 0 0 0 1 1 1 1 1 0 0 0 1 1 1 1 1 0 0 0 1 1 1 1 1 0 0 0 1 1 1 1 1 0 0 0 1 1 1 \u235d Almost exactly what we want Our melodies here are restricted to one octave. If we allowed a wider range, we would allow the 7th to go to the 1st of the next octave and vice versa. M [ 7 ; 1 ] \u2190 0 M [ 1 ; 7 ] \u2190 0 M [ 6 ; 5 ] \u2190 2 M [ 4 ; 3 ] \u2190 2 M [ 2 ; 1 ] \u2190 2 M [ 2 ; 3 ] \u2190 2 M 1 1 1 0 0 0 0 2 1 2 1 0 0 0 1 1 1 1 1 0 0 0 1 2 1 1 1 0 0 0 1 1 1 1 1 0 0 0 1 2 1 1 0 0 0 0 1 1 1 \u235d Perfect The next step is to figure out, given a note, what the next possible notes are. This is very easily done using the matrix multiplication +.\u00d7 operator. This operator is actually the inner product operator . applied to the functions + and \u00d7, see [Inner and Outer product section]. Represent a note with scale degree N as a vector with a 1 in the Nth slot, and 0 otherwise, then matrix multiplication with M represents picking out the Nth row, which as we mentioned above corresponds to selecting the edges in the graph where N is the starting note. Recall that \u23737 is 1 2 3 4 5 6 7, this is equivalent to 2=1 2 3 4 5 6 7 The subsequence notes are I (Preferred), II, III (Preferred), and IV II \u2190 2 =\u2373 7 II 0 1 0 0 0 0 0 II + . \u00d7 M 2 1 2 1 0 0 0 Using this, we want to decide on a movement to another note, weighed by priority. One easy way to achieve this is using the roll ? function, which simulates the rolling of a dice with faces numbering 1 to the right argument. We will roll one die from 1 to 10, or 20 for preferred movements, for every possible following note, and pick the largest result. The subsequent notes are I, II, III, and IV Multiplying by 10 to prepare to roll dice with 10, or 20, faces Notice that ? 0 returns a random real number between 0 and 1 The Grade Down operator \u2352 returns the indices of the elements of the list from largest to smallest Getting the index of the largest roll. This is III. N \u2190 II + . \u00d7 M N 2 1 2 1 0 0 0 N \u00d7 \u2190 10 N 20 10 20 10 0 0 0 NR \u2190 ? N NR 3 8 13 0.9740484038 0.3581395503 0.5245918312 \u2352 100 200 0.1 1 2 1 4 3 \u2352 NR 3 2 1 4 6 5 1 \u2337\u2352 NR 3 ( \u2373 7 ) = 1 \u2337\u2352 NR 0 0 1 0 0 0 0 This is the basic algorithm we will use to generate our melodies. Let\u2019s enclose our note generation algorithm in a direct function and generate a melody. A direct function/dfn (pronounced dee-fun) is defined using {curly braces}. The right argument to the function is called \u2375, and the left \u237a. Statements in a dfn can be separated by a \u22c4 diamond. However, only it stops as soon as a statement which returns a value is evaluated The replicate / operator generates copies of its right argument elements depending on their left arguments In this case, it replicates 0 of everything other than one copy of D 10 { \u237a + \u2375 } 2 12 10 { \u237a + \u2375 \u22c4 \u237a - \u2375 } 2 12 NEXT \u2190 { ( \u2373 7 ) = 1 \u2337\u2352? ( \u2375 \u00d7 10 ) + . \u00d7 M } NEXT 1 0 0 0 0 0 0 0 1 0 0 0 0 0 NOTES \u2190 'CDEFGAB' ( 0 1 0 0 0 0 0 ) / NOTES D MELODY \u2190 { res \u2190 NEXT \u2375 \u22c4 \u235e \u2190 res / NOTES \u22c4 MELODY res } MELODY 1 0 0 0 0 0 0 CDCECEGBGAGGGBBAAGBGEDEDFFEDCDCDECCDCECDECECEFEFEEGEGECEFEDEGBBBGBG This function will run forever, generating notes until interrupted. One way of running the defun for a fixed number of steps is to add a variable representing the number of steps. We will use the left argument \u237a as this variable. MELODY \u2190 { \u237a \u2190 0 \u22c4 \u237a > 20 : '\u266b' \u22c4 res \u2190 NEXT \u2375 \u22c4 \u235e \u2190 res / NOTES \u22c4 ( \u237a + 1 ) MELODY res } MELODY 1 0 0 0 0 0 0 CCDEGAFDCEGFDEDCDCECC \u266b Assigning a value to the left argument \u237a gives a dfns a default left argument. The assignment is only executed if the function is called monadically, that is, if there is no supplied left argument. In this case, the left argument \u237a starts at 0. The generation of the next note, the \"(\u237a+1) MELODY res\" statement, is executed with an incremented left argument. The guarded expression \u237a>20: '\u266b' states that \u266b is returned when \u237a is becomes greater than 20. Since the execution of a dfn stops as soon as a statement returns a value, the code to generate the next note is no longer executed. This is the result we were after! With just a couple lines of APL, we were able to encode general guidelines for melodic composition and write a function generating random melodies according to these principles algorithmically by tracing out a random walk through a graph. These random graph processes are more generally known as Markov Processes and have a much broader range of applicability than our case here. Applications include the Google PageRank algorithm which powered the Google search engine, particle physics simulations of quantum field theory on a lattice, and speech recognition systems. There is clearly so much more we could add to our program, from generating rhythm to accompany the melody, to adding chord progressions and harmony, and there will always be more to add. We will however stop here to enjoy the melodies our program has generated, and leave it up to the interested reader to write their own digital musicians. Some of the generated melodies are included below. Your browser does not support the audio element. Your browser does not support the audio element. Your browser does not support the audio element.","title":"Implementation"},{"location":"course/ch3/part1/","text":"Fun for everyone This part will cover Defining your own functions using dfns The alpha and omega parameters Programming languages provide structured methods of storing and operating on data. Now that we know how data is structured in APL, it\u2019s time to look at how operations on data are structured, more specifically, how to make your own operations from already existing ones. One of the ways of defining a function, taking in array arguments and outputting an array result, is using direct functions, abbreviated dfn. (\"dee-fun\") A dfn is a series of statements, where the special characters \u237a and \u2375 represent the left and right arguments to the function. Functions always require a right argument. Let\u2019s look at some simple examples. F_to_C \u2190 { ( 5 \u00d7 \u2375 - 32 ) \u00f7 9 } F_to_C 451 232.7777778 C_to_F \u2190 { 32 + ( 9 \u00d7 \u2375 ) \u00f7 5 } C_to_F \u00af273.15 \u00af459.67 C_to_F F_to_C 100 100 dB_to_B \u2190 { \u2375 \u00f7 10 } \u235d From decibels to bels dB_to_ratio \u2190 { 10 * dB_to_B \u2375 } \u235d From decibels back to a power ratio dB_to_ratio 60 1000000 dB_to_ratio 3 1.995262315 PHI \u2190 0.5 \u00d7 1 + 5 * .5 \u235d golden ratio fibonacci \u2190 { (( PHI * \u2375 ) - ( - PHI ) *- \u2375 ) \u00f7 ( \u00af1 + 2 \u00d7 PHI ) } fibonacci \u2373 7 1 1 2 3 5 8 13 fibonacci 10 55 hypotenuse \u2190 { (( \u237a * 2 ) + \u2375 * 2 ) * 0.5 } \u235d Pythagorean theorem 3 hypotenuse 4 5 6 hypotenuse 8 10 5 hypotenuse 12 13 1 hypotenuse 3 * .5 2 Note that for the Fibonacci function, a constant value phi for the golden ratio was used. If the value of phi is changed, the Fibonacci function will use the updated value. APL allows any number of assignment statements inside a function before the statement which evaluates the result, using the diamond-shaped statement separator \u22c4, or placing the statements on new lines. The following two functions are equivalent. fibonacci \u2190 { PHI \u2190 0.5 \u00d7 1 + 5 * .5 \u22c4 (( PHI * \u2375 ) - ( - PHI ) *- \u2375 ) \u00f7 ( \u00af1 + 2 \u00d7 PHI ) } fibonacci \u2190 { PHI \u2190 0.5 \u00d7 1 + 5 * .5 (( PHI * \u2375 ) - ( - PHI ) *- \u2375 ) \u00f7 ( \u00af1 + 2 \u00d7 PHI ) } Multiline support in RIDE In order to write multiline functions in the Dyalog RIDE, \"Extended Multiline Input\" needs to be enabled. It can be found in the Session tab under Options>Configure. Any code beyond the first statement which produces a value is not evaluated number \u2190 { 1 \u22c4 2 \u22c4 3 \u22c4 4 } number \u236c \u235d The empty vector character \u236c is added here as filler since functions always require a right argument 1 separator_test \u2190 { a \u2190 1 \u22c4 a + a \u22c4 a - a } separator_test \u236c 2","title":"3.1 - Fun for everyone"},{"location":"course/ch3/part1/#fun-for-everyone","text":"This part will cover Defining your own functions using dfns The alpha and omega parameters Programming languages provide structured methods of storing and operating on data. Now that we know how data is structured in APL, it\u2019s time to look at how operations on data are structured, more specifically, how to make your own operations from already existing ones. One of the ways of defining a function, taking in array arguments and outputting an array result, is using direct functions, abbreviated dfn. (\"dee-fun\") A dfn is a series of statements, where the special characters \u237a and \u2375 represent the left and right arguments to the function. Functions always require a right argument. Let\u2019s look at some simple examples. F_to_C \u2190 { ( 5 \u00d7 \u2375 - 32 ) \u00f7 9 } F_to_C 451 232.7777778 C_to_F \u2190 { 32 + ( 9 \u00d7 \u2375 ) \u00f7 5 } C_to_F \u00af273.15 \u00af459.67 C_to_F F_to_C 100 100 dB_to_B \u2190 { \u2375 \u00f7 10 } \u235d From decibels to bels dB_to_ratio \u2190 { 10 * dB_to_B \u2375 } \u235d From decibels back to a power ratio dB_to_ratio 60 1000000 dB_to_ratio 3 1.995262315 PHI \u2190 0.5 \u00d7 1 + 5 * .5 \u235d golden ratio fibonacci \u2190 { (( PHI * \u2375 ) - ( - PHI ) *- \u2375 ) \u00f7 ( \u00af1 + 2 \u00d7 PHI ) } fibonacci \u2373 7 1 1 2 3 5 8 13 fibonacci 10 55 hypotenuse \u2190 { (( \u237a * 2 ) + \u2375 * 2 ) * 0.5 } \u235d Pythagorean theorem 3 hypotenuse 4 5 6 hypotenuse 8 10 5 hypotenuse 12 13 1 hypotenuse 3 * .5 2 Note that for the Fibonacci function, a constant value phi for the golden ratio was used. If the value of phi is changed, the Fibonacci function will use the updated value. APL allows any number of assignment statements inside a function before the statement which evaluates the result, using the diamond-shaped statement separator \u22c4, or placing the statements on new lines. The following two functions are equivalent. fibonacci \u2190 { PHI \u2190 0.5 \u00d7 1 + 5 * .5 \u22c4 (( PHI * \u2375 ) - ( - PHI ) *- \u2375 ) \u00f7 ( \u00af1 + 2 \u00d7 PHI ) } fibonacci \u2190 { PHI \u2190 0.5 \u00d7 1 + 5 * .5 (( PHI * \u2375 ) - ( - PHI ) *- \u2375 ) \u00f7 ( \u00af1 + 2 \u00d7 PHI ) } Multiline support in RIDE In order to write multiline functions in the Dyalog RIDE, \"Extended Multiline Input\" needs to be enabled. It can be found in the Session tab under Options>Configure. Any code beyond the first statement which produces a value is not evaluated number \u2190 { 1 \u22c4 2 \u22c4 3 \u22c4 4 } number \u236c \u235d The empty vector character \u236c is added here as filler since functions always require a right argument 1 separator_test \u2190 { a \u2190 1 \u22c4 a + a \u22c4 a - a } separator_test \u236c 2","title":"Fun for everyone"},{"location":"course/ch3/part2/","text":"All the math This part will cover Basic mathematical operations Calculating things APL comes with a lot of math functions! Here we go through a bunch of them, so you can always come back to check. Remember to also check the toolbar in TryAPL and RIDE, they come with very helpful tooltips to remind you what an operator does! Dyadic \u2308 and \u230a : Max & Min 4 \u2308 5 \u235d This simply returns the larger argument 5 4 \u230a 5 \u235d This is for the smaller one 4 4 \u2308 1 3 5 7 9 8 6 4 2 0 \u235d \"Clips\" the value of elements to a minimum 4 4 5 7 9 8 6 4 4 4 4 \u230a 1 3 5 7 9 8 6 4 2 0 \u235d Similarly \"clips\" down 1 3 4 4 4 4 4 4 2 0 Monadic \u2308 and \u230a : Ceil & Floor \u2308 2.5 2.6 \u00af2.5 \u00af2.6 \u235d Rounds up to the closest integer 3 3 \u00af2 \u00af2 \u230a 2.5 2.6 \u00af2.5 \u00af2.6 \u235d Rounds down to the closest integer 2 2 \u00af3 \u00af3 Monadic | : Absolute value | \u00af1 \u235d Absolute value of \u00af1 is ... 1 | 0j1 3j4 \u235d Applying to complex numbers 1 5 Dyadic | : Residue 13 | 100 \u235d 13 \u00d7 7 = 91, note this is in reverse order as `%` operator in C 9 13 | \u00af100 \u235d 13 \u00d7 \u00af8 = \u00af104 4 \u00af13 | 100 \u235d The result has the same sign as the divisor. Here, \u00af13 \u00d7 \u00af8 = 104 \u00af4 \u00af13 | \u00af100 \u235d \u00af13 \u00d7 7 = \u00af91 \u00af9 3.3 | 10 \u235d Also works for non-integer! 0.1 0 | 3 \u235d 0 as a divisor is treated as 1 here 3 This residue operation respects \"floored\" division. The defining equation is X | Y \u2190 Y - X \u00d7\u230a Y \u00f7 X + 0 = X \u235d where, X+0=X means if X is 0 then 1, else X. \u235d if X is not 0, this is simply (Y - X * floor(Y / X)). If you want to get \"euclidean\" remainder, simply subtract divisor back if the result is negative. mod \u2190 { ( \u2375 | \u237a ) < 0 : ( \u2375 | \u237a ) - \u2375 \u22c4 \u2375 | \u237a } \u00af13 mod \u00af3 2 \u00af14 mod \u00af3 1 \u00af15 mod \u00af3 0 Dyadic \u2228 & \u2227 : GCD and LCM 12 \u2228 10 \u235d Greatest Common Divisor... 2 12 \u2227 10 \u235d Least Common Mutiple... 60 \u00af2 \u2228 \u00af15 \u235d The result is non-negative for GCD 1 \u00af4 \u2227 10 \u235d But the LCM is defined as product of two numbers divided by their GCD, so it could be negative \u00af20 Curiously, as suggested by the choice of glyphs for these two operations, these two operations are also used for the boolean logic \"or\" and \"and\" operations. This is because 0 is divisible by everything, as the remainder is always 0. So the Greatest Common Divisor of 0 and x is just x, since x divides both 0 and x. Dually, 0 is also a multiple of everything, so the Least Common Multiple of 0 and x is just 0, since 0 is a multiple of both x and 0 (and it\u2019s the smallest!). Monadic + : Complex Conjugate + 0j1 1j\u00af1 3j4 0J\u00af1 1J1 3J\u00af4 Monadic - : Negate - 4 \u00af5 6 \u00af4 5 \u00af6 - 4 - 5 - 6 \u235d Remember this is different from \u00af, since it could be monadic and also applies to the whole array \u00af5 Monadic \u00d7 : Signum/Direction \u00d7 0 3 \u00af3 0 1 \u00af1 \u00d7 3J4 \u00af6J8 7J24 0.6J0.8 \u00af0.6J0.8 0.28J0.96 Monadic \u25cb : Pi Times \u25cb 1 3.141592654 \u25cb 2 6.283185307 \u25cb 0.5 1.570796327 \u25cb 0J1 0J3.141592654 Dyadic \u25cb : Trigonometric Functions The dyadic circle \u25cb function applies a trigonometric function to its right argument depending on its left argument. \u235d Sine of an approximation to PI 1 \u25cb \u25cb 1 1.224646799E\u00af16 \u235d Cosine of zero 2 \u25cb 0 1 \u235d Tangent of 0.5 3 \u25cb 0 0.5463024898 \u235d Cosine of I 2 \u25cb 0J1 1.543080635","title":"3.2 - All the math"},{"location":"course/ch3/part2/#all-the-math","text":"This part will cover Basic mathematical operations Calculating things APL comes with a lot of math functions! Here we go through a bunch of them, so you can always come back to check. Remember to also check the toolbar in TryAPL and RIDE, they come with very helpful tooltips to remind you what an operator does! Dyadic \u2308 and \u230a : Max & Min 4 \u2308 5 \u235d This simply returns the larger argument 5 4 \u230a 5 \u235d This is for the smaller one 4 4 \u2308 1 3 5 7 9 8 6 4 2 0 \u235d \"Clips\" the value of elements to a minimum 4 4 5 7 9 8 6 4 4 4 4 \u230a 1 3 5 7 9 8 6 4 2 0 \u235d Similarly \"clips\" down 1 3 4 4 4 4 4 4 2 0 Monadic \u2308 and \u230a : Ceil & Floor \u2308 2.5 2.6 \u00af2.5 \u00af2.6 \u235d Rounds up to the closest integer 3 3 \u00af2 \u00af2 \u230a 2.5 2.6 \u00af2.5 \u00af2.6 \u235d Rounds down to the closest integer 2 2 \u00af3 \u00af3 Monadic | : Absolute value | \u00af1 \u235d Absolute value of \u00af1 is ... 1 | 0j1 3j4 \u235d Applying to complex numbers 1 5 Dyadic | : Residue 13 | 100 \u235d 13 \u00d7 7 = 91, note this is in reverse order as `%` operator in C 9 13 | \u00af100 \u235d 13 \u00d7 \u00af8 = \u00af104 4 \u00af13 | 100 \u235d The result has the same sign as the divisor. Here, \u00af13 \u00d7 \u00af8 = 104 \u00af4 \u00af13 | \u00af100 \u235d \u00af13 \u00d7 7 = \u00af91 \u00af9 3.3 | 10 \u235d Also works for non-integer! 0.1 0 | 3 \u235d 0 as a divisor is treated as 1 here 3 This residue operation respects \"floored\" division. The defining equation is X | Y \u2190 Y - X \u00d7\u230a Y \u00f7 X + 0 = X \u235d where, X+0=X means if X is 0 then 1, else X. \u235d if X is not 0, this is simply (Y - X * floor(Y / X)). If you want to get \"euclidean\" remainder, simply subtract divisor back if the result is negative. mod \u2190 { ( \u2375 | \u237a ) < 0 : ( \u2375 | \u237a ) - \u2375 \u22c4 \u2375 | \u237a } \u00af13 mod \u00af3 2 \u00af14 mod \u00af3 1 \u00af15 mod \u00af3 0 Dyadic \u2228 & \u2227 : GCD and LCM 12 \u2228 10 \u235d Greatest Common Divisor... 2 12 \u2227 10 \u235d Least Common Mutiple... 60 \u00af2 \u2228 \u00af15 \u235d The result is non-negative for GCD 1 \u00af4 \u2227 10 \u235d But the LCM is defined as product of two numbers divided by their GCD, so it could be negative \u00af20 Curiously, as suggested by the choice of glyphs for these two operations, these two operations are also used for the boolean logic \"or\" and \"and\" operations. This is because 0 is divisible by everything, as the remainder is always 0. So the Greatest Common Divisor of 0 and x is just x, since x divides both 0 and x. Dually, 0 is also a multiple of everything, so the Least Common Multiple of 0 and x is just 0, since 0 is a multiple of both x and 0 (and it\u2019s the smallest!). Monadic + : Complex Conjugate + 0j1 1j\u00af1 3j4 0J\u00af1 1J1 3J\u00af4 Monadic - : Negate - 4 \u00af5 6 \u00af4 5 \u00af6 - 4 - 5 - 6 \u235d Remember this is different from \u00af, since it could be monadic and also applies to the whole array \u00af5 Monadic \u00d7 : Signum/Direction \u00d7 0 3 \u00af3 0 1 \u00af1 \u00d7 3J4 \u00af6J8 7J24 0.6J0.8 \u00af0.6J0.8 0.28J0.96 Monadic \u25cb : Pi Times \u25cb 1 3.141592654 \u25cb 2 6.283185307 \u25cb 0.5 1.570796327 \u25cb 0J1 0J3.141592654 Dyadic \u25cb : Trigonometric Functions The dyadic circle \u25cb function applies a trigonometric function to its right argument depending on its left argument. \u235d Sine of an approximation to PI 1 \u25cb \u25cb 1 1.224646799E\u00af16 \u235d Cosine of zero 2 \u25cb 0 1 \u235d Tangent of 0.5 3 \u25cb 0 0.5463024898 \u235d Cosine of I 2 \u25cb 0J1 1.543080635","title":"All the math"},{"location":"course/ch3/part3/","text":"Relational functions This part will cover Functions used to compare values Comparing vectors and scalars Dyadic = , \u2260 , \u2264 , < , > , \u2265 : Comparison Functions 0 = 0 1 0 \u2260 0 0 3 \u2264 3 1 3 < 3 0 2 = 1 2 3 4 5 2 3 2 4 2 \u235d Getting a \"bit mask\" for elements equal to 2 0 1 0 0 0 1 0 1 0 1 Note that when you use these functions over two vectors, the result is a vector, denoting the function element wise . 1 2 1 4 5 2 5 2 3 2 = 1 2 3 4 5 2 3 2 4 2 1 1 0 1 1 1 0 1 0 1 1 2 1 4 5 2 5 2 3 2 \u2264 1 2 3 4 5 2 3 2 4 2 1 1 1 1 1 1 0 1 1 1 We will learn about how to collect these result into one scalar in the next section.","title":"3.3 - Relational functions"},{"location":"course/ch3/part3/#relational-functions","text":"This part will cover Functions used to compare values Comparing vectors and scalars Dyadic = , \u2260 , \u2264 , < , > , \u2265 : Comparison Functions 0 = 0 1 0 \u2260 0 0 3 \u2264 3 1 3 < 3 0 2 = 1 2 3 4 5 2 3 2 4 2 \u235d Getting a \"bit mask\" for elements equal to 2 0 1 0 0 0 1 0 1 0 1 Note that when you use these functions over two vectors, the result is a vector, denoting the function element wise . 1 2 1 4 5 2 5 2 3 2 = 1 2 3 4 5 2 3 2 4 2 1 1 0 1 1 1 0 1 0 1 1 2 1 4 5 2 5 2 3 2 \u2264 1 2 3 4 5 2 3 2 4 2 1 1 1 1 1 1 0 1 1 1 We will learn about how to collect these result into one scalar in the next section.","title":"Relational functions"},{"location":"course/ch3/part4/","text":"Logical functions This part will cover Functions used to perform bitwise operations Bitwise operations on scalars and vectors 3 \u2227 0 0 0 \u2228 3 3 1 1 0 1 1 \u2227 1 0 1 0 1 \u235d If the arguments are \"bit mask\"s, this is a bitwise and 1 0 0 0 1 1 1 0 1 1 \u2228 1 0 1 0 1 \u235d This is a bitwise or 1 1 1 1 1 Monadic ~ : Logical Not Dyadic \u2372 & \u2371 : Logical Nand and Logical Nor ~ 1 1 0 1 1 0 0 1 0 0 ~ 3 \u235d However, this operator is truly logical, so you cannot take the not of a non-0 non-1 number DOMAIN ERROR ~ 3 \u2227 1 1 0 1 1 \u2372 1 0 1 0 1 \u235d This is just ~ 1 1 0 1 1 \u2227 1 0 1 0 1 0 1 1 1 0 1 1 0 1 1 \u2371 1 0 1 0 1 \u235d Similarly this is just ~ 1 1 0 1 1 \u2228 1 0 1 0 1 1 1 1 1 1","title":"3.4 - Logical functions"},{"location":"course/ch3/part4/#logical-functions","text":"This part will cover Functions used to perform bitwise operations Bitwise operations on scalars and vectors 3 \u2227 0 0 0 \u2228 3 3 1 1 0 1 1 \u2227 1 0 1 0 1 \u235d If the arguments are \"bit mask\"s, this is a bitwise and 1 0 0 0 1 1 1 0 1 1 \u2228 1 0 1 0 1 \u235d This is a bitwise or 1 1 1 1 1 Monadic ~ : Logical Not Dyadic \u2372 & \u2371 : Logical Nand and Logical Nor ~ 1 1 0 1 1 0 0 1 0 0 ~ 3 \u235d However, this operator is truly logical, so you cannot take the not of a non-0 non-1 number DOMAIN ERROR ~ 3 \u2227 1 1 0 1 1 \u2372 1 0 1 0 1 \u235d This is just ~ 1 1 0 1 1 \u2227 1 0 1 0 1 0 1 1 1 0 1 1 0 1 1 \u2371 1 0 1 0 1 \u235d Similarly this is just ~ 1 1 0 1 1 \u2228 1 0 1 0 1 1 1 1 1 1","title":"Logical functions"},{"location":"course/ch3/part5/","text":"Quad functions This part will cover What quad functions are Common quad functions: DT A etc.","title":"3.5 - Quad functions"},{"location":"course/ch3/part5/#quad-functions","text":"This part will cover What quad functions are Common quad functions: DT A etc.","title":"Quad functions"},{"location":"course/ch3/part6/","text":"Installing Dyalog This part will cover Instructions on installing the Dyalog IDE, Dyalog RIDE, and Dyalogscript Basic usage instructions","title":"3.6 - Installing Dyalog"},{"location":"course/ch3/part6/#installing-dyalog","text":"This part will cover Instructions on installing the Dyalog IDE, Dyalog RIDE, and Dyalogscript Basic usage instructions","title":"Installing Dyalog"},{"location":"course/ch3/part7/","text":"Traditional fun This part will cover How to write tradfns in the Dyalog IDE Assigning temporary variables Basic workspace management Another way of defining functions is using traditional functions, abbreviated tradfn. (\"trad-fun\") These functions look a lot more similar to functions in imperative programming languages. \u2207 ( R1 R2 ) \u2190 solve_quadratic A B C ; root ; vertex root \u2190 (( B * 2 ) - 4 \u00d7 A \u00d7 C ) * 1 \u00f7 2 vertex \u2190 - B \u00f7 2 \u00d7 A R1 \u2190 vertex + root \u00f7 2 \u00d7 A R2 \u2190 vertex - root \u00f7 2 \u00d7 A \u2207 solve_quadratic 1 \u00af1 \u00af1 1.618033989 \u00af0.6180339887 \u235d \u2207 results \u2190 name arguments;local_variable1;local_variable2 \u235d ... \u235d Instructions \u235d ... \u235d results \u2190 values \u235d \u2207 Tradfns are delimited by dels \u2207 and consist of a header and body. The header defines the (left or right) arguments, the variables which are local to that function (variables which do not affect the rest of the workspace), and the values that are returned. If we try to access any of the local variables of the function outside the function, we will encounter an error. R1 VALUE ERROR : Undefined name : R1 vertex VALUE ERROR : Undefined name : vertex Instead of guarded expressions, there are control flow structures like :If and :For, we will see these structures in Chapter 7. Variable Scope In tradfns, variables outside the function can be accessed and modified unless specified to be local. In dfns however, while it is possible to access variables outside the function, it is not possible to assign to them. i \u2190 10 d_increment \u2190 { i \u2190 i + 1 \u22c4 i } i 10 increment \u236c 11 i 10 \u2207 res \u2190 t_increment i \u2190 i + 1 res \u2190 i \u2207 i 10 t_increment 11 i 11 The follwing code gets the final velocities of a one-dimensional perfectly elastic collision of two objects with initial velocities u1 and u2 and masses m1 and m2. \u2207 ( v1 v2 ) \u2190 collision ( u1 u2 m1 m2 ) ; rsumM ; diffM rsumM \u2190 \u00f7 m1 + m2 diffM \u2190 m1 - m2 v1 \u2190 ( diffM \u00d7 rsumM \u00d7 u1 ) + 2 \u00d7 m2 \u00d7 rsumM \u00d7 u2 v2 \u2190 ( 2 \u00d7 m1 \u00d7 rsumM \u00d7 u1 ) - diffM \u00d7 rsumM \u00d7 u2 \u2207 \u235d Collision of two object moving with opposite velocities towards each other \u235d where one object is twice as massive \u235d \u2218\u2192 \u2190\u25cb collision 1 \u00af1 1 2 \u00af1.666666667 0.3333333333","title":"3.7 - Traditional fun"},{"location":"course/ch3/part7/#traditional-fun","text":"This part will cover How to write tradfns in the Dyalog IDE Assigning temporary variables Basic workspace management Another way of defining functions is using traditional functions, abbreviated tradfn. (\"trad-fun\") These functions look a lot more similar to functions in imperative programming languages. \u2207 ( R1 R2 ) \u2190 solve_quadratic A B C ; root ; vertex root \u2190 (( B * 2 ) - 4 \u00d7 A \u00d7 C ) * 1 \u00f7 2 vertex \u2190 - B \u00f7 2 \u00d7 A R1 \u2190 vertex + root \u00f7 2 \u00d7 A R2 \u2190 vertex - root \u00f7 2 \u00d7 A \u2207 solve_quadratic 1 \u00af1 \u00af1 1.618033989 \u00af0.6180339887 \u235d \u2207 results \u2190 name arguments;local_variable1;local_variable2 \u235d ... \u235d Instructions \u235d ... \u235d results \u2190 values \u235d \u2207 Tradfns are delimited by dels \u2207 and consist of a header and body. The header defines the (left or right) arguments, the variables which are local to that function (variables which do not affect the rest of the workspace), and the values that are returned. If we try to access any of the local variables of the function outside the function, we will encounter an error. R1 VALUE ERROR : Undefined name : R1 vertex VALUE ERROR : Undefined name : vertex Instead of guarded expressions, there are control flow structures like :If and :For, we will see these structures in Chapter 7. Variable Scope In tradfns, variables outside the function can be accessed and modified unless specified to be local. In dfns however, while it is possible to access variables outside the function, it is not possible to assign to them. i \u2190 10 d_increment \u2190 { i \u2190 i + 1 \u22c4 i } i 10 increment \u236c 11 i 10 \u2207 res \u2190 t_increment i \u2190 i + 1 res \u2190 i \u2207 i 10 t_increment 11 i 11 The follwing code gets the final velocities of a one-dimensional perfectly elastic collision of two objects with initial velocities u1 and u2 and masses m1 and m2. \u2207 ( v1 v2 ) \u2190 collision ( u1 u2 m1 m2 ) ; rsumM ; diffM rsumM \u2190 \u00f7 m1 + m2 diffM \u2190 m1 - m2 v1 \u2190 ( diffM \u00d7 rsumM \u00d7 u1 ) + 2 \u00d7 m2 \u00d7 rsumM \u00d7 u2 v2 \u2190 ( 2 \u00d7 m1 \u00d7 rsumM \u00d7 u1 ) - diffM \u00d7 rsumM \u00d7 u2 \u2207 \u235d Collision of two object moving with opposite velocities towards each other \u235d where one object is twice as massive \u235d \u2218\u2192 \u2190\u25cb collision 1 \u00af1 1 2 \u00af1.666666667 0.3333333333","title":"Traditional fun"},{"location":"course/ch3/part8/","text":"Fun(Fun(Fun(Fun(Fun(...))))) This part will cover How to define recursive dfns and tradfns Guard syntax in dfns Recursive functions can be implemented using guarded expressions and the self \u2207 function. Guarded expressions consist of a boolean/logical expression followed by a colon : , and another expression. For example, \u2375=0: 1 . A guarded expression in a function specifies a condition for whether a statement is evaluated; if the boolean expression evaluates to 1, the function evaluates the statement and the value of the expression is returned. In the above example, if we create a function {\u2375=0: 1} , if \u2375 (the right argument) is 0, then the function will return 1. The self function \u2207 stands for the function it is contained in, allowing calling the function from within itself, that is, allowing recursion. Alternatively, the function name can be used within the function itself. For example, the factorial function is typically defined as f(n) = n * f(n-1), such that f(0)=1. Thinking in terms of guarded expressions, if the argument of the function is 0 the result should be 1 (in symbols, \u2375=0: 1 ), otherwise multiply the right argument ( \u2375 ) by the result of the function itself ( \u2207 ) evaluated for the right argument minus 1 ( \u2375 - 1 ). Putting it together, factorial \u2190 { \u2375 = 0 : 1 \u22c4 \u2375 \u00d7 \u2207 \u2375 - 1 } This function consists of two statements, separated by the separator \u22c4 . The first statement in this function is an example of a guarded expression, if \u2375=0 evaluates to true, that is, when \u2375 is equal to 0, the expression 1 is evaluated. Otherwise, the expression \u2375 \u00d7 \u2207 \u2375 - 1 is evaluated. For example, the evaluation of factorial 2 can be visualised as: { \u2375 = 0 : 1 \u22c4 \u2375 \u00d7 \u2207 \u2375 - 1 } 2 \u235d Since 2=0 is 0, the guarded statement is not evaluated. \u235d 2 \u00d7 \u2207 1 \u235d 2 \u00d7 {\u2375=0: 1 \u22c4 \u2375 \u00d7 \u2207 \u2375 - 1} 1 \u235d Since 1=0 is 0, the guarded statement is not evaluated. \u235d 2 \u00d7 1 \u00d7 \u2207 0 \u235d 2 \u00d7 1 \u00d7 {\u2375=0: 1 \u22c4 \u2375 \u00d7 \u2207 \u2375 - 1} 0 \u235d Since 0=0 is 1, the guarded statement is evaluated. \u235d 2 \u00d7 1 \u00d7 1 factorial 2 2 factorial 3 6 factorial 4 24 collatz \u2190 { \u2375 = 1 : 1 \u22c4 0 = 2 | \u2375: \u2375 , \u2207 \u2375 \u00f7 2 \u22c4 \u2375 , \u2207 1 + 3 \u00d7 \u2375 } This function keeps track of the evaluation of the following procedure. If the \u2375 is even (see more examples of the dyadic modulo | function), divide it by two. If it is odd, multiply it by three and add one. Evaluate this function until \u2375 reaches 1. \u235d Example: \u235d collatz 3 \u235d 3 , \u2207 1+3\u00d73 \u235d 3 , collatz 1+3\u00d73 \u235d 3 , collatz 10 \u235d 3 , 10 , \u2207 10\u00f72 \u235d 3 10 , collatz 10\u00f72 \u235d 3 10 , collatz 5 \u235d and so on collatz 3 3 10 5 16 8 4 2 1 collatz 100 100 50 25 76 38 19 58 29 88 44 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1 collatz 2 * 10 1024 512 256 128 64 32 16 8 4 2 1","title":"3.8 - Fun(Fun(Fun(Fun(Fun(...)))))"},{"location":"course/ch3/part8/#funfunfunfunfun","text":"This part will cover How to define recursive dfns and tradfns Guard syntax in dfns Recursive functions can be implemented using guarded expressions and the self \u2207 function. Guarded expressions consist of a boolean/logical expression followed by a colon : , and another expression. For example, \u2375=0: 1 . A guarded expression in a function specifies a condition for whether a statement is evaluated; if the boolean expression evaluates to 1, the function evaluates the statement and the value of the expression is returned. In the above example, if we create a function {\u2375=0: 1} , if \u2375 (the right argument) is 0, then the function will return 1. The self function \u2207 stands for the function it is contained in, allowing calling the function from within itself, that is, allowing recursion. Alternatively, the function name can be used within the function itself. For example, the factorial function is typically defined as f(n) = n * f(n-1), such that f(0)=1. Thinking in terms of guarded expressions, if the argument of the function is 0 the result should be 1 (in symbols, \u2375=0: 1 ), otherwise multiply the right argument ( \u2375 ) by the result of the function itself ( \u2207 ) evaluated for the right argument minus 1 ( \u2375 - 1 ). Putting it together, factorial \u2190 { \u2375 = 0 : 1 \u22c4 \u2375 \u00d7 \u2207 \u2375 - 1 } This function consists of two statements, separated by the separator \u22c4 . The first statement in this function is an example of a guarded expression, if \u2375=0 evaluates to true, that is, when \u2375 is equal to 0, the expression 1 is evaluated. Otherwise, the expression \u2375 \u00d7 \u2207 \u2375 - 1 is evaluated. For example, the evaluation of factorial 2 can be visualised as: { \u2375 = 0 : 1 \u22c4 \u2375 \u00d7 \u2207 \u2375 - 1 } 2 \u235d Since 2=0 is 0, the guarded statement is not evaluated. \u235d 2 \u00d7 \u2207 1 \u235d 2 \u00d7 {\u2375=0: 1 \u22c4 \u2375 \u00d7 \u2207 \u2375 - 1} 1 \u235d Since 1=0 is 0, the guarded statement is not evaluated. \u235d 2 \u00d7 1 \u00d7 \u2207 0 \u235d 2 \u00d7 1 \u00d7 {\u2375=0: 1 \u22c4 \u2375 \u00d7 \u2207 \u2375 - 1} 0 \u235d Since 0=0 is 1, the guarded statement is evaluated. \u235d 2 \u00d7 1 \u00d7 1 factorial 2 2 factorial 3 6 factorial 4 24 collatz \u2190 { \u2375 = 1 : 1 \u22c4 0 = 2 | \u2375: \u2375 , \u2207 \u2375 \u00f7 2 \u22c4 \u2375 , \u2207 1 + 3 \u00d7 \u2375 } This function keeps track of the evaluation of the following procedure. If the \u2375 is even (see more examples of the dyadic modulo | function), divide it by two. If it is odd, multiply it by three and add one. Evaluate this function until \u2375 reaches 1. \u235d Example: \u235d collatz 3 \u235d 3 , \u2207 1+3\u00d73 \u235d 3 , collatz 1+3\u00d73 \u235d 3 , collatz 10 \u235d 3 , 10 , \u2207 10\u00f72 \u235d 3 10 , collatz 10\u00f72 \u235d 3 10 , collatz 5 \u235d and so on collatz 3 3 10 5 16 8 4 2 1 collatz 100 100 50 25 76 38 19 58 29 88 44 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1 collatz 2 * 10 1024 512 256 128 64 32 16 8 4 2 1","title":"Fun(Fun(Fun(Fun(Fun(...)))))"},{"location":"course/ch3/part9/","text":"ALL ABOARD! This part will cover Trains Defining 2- and 3-trains The tack functions Some other important functions are the dyadic right and left identity/\"tack\" functions which return their right or left arguments. 'True' \u22a3 'False' True 'True' \u22a2 'False' False When applied monadically, they return their only argument. Consider the following pairs of functions, implemented using dfns first, and trains second. range_average \u2190 { (( \u2308 / \u2375 ) -\u230a / \u2375 ) , ( + / \u2375 ) \u00f7\u2262 \u2375 } range_average 5.48 6 5.63 6.02 5.37 0.65 5.7 range_average \u2190 ( \u2308 / -\u230a / ) ,+ / \u00f7\u2262 range_average 5.48 6 5.63 6.02 5.37 0.65 5.7 plusminus \u2190 { ( \u237a - \u2375 ) , \u237a , \u237a + \u2375 } 5.7 plusminus 0.65 5.05 5.7 6.35 plusminus \u2190 -,\u22a3,+ 5.7 plusminus 0.2 5.5 5.7 5.9 Notice that the arguments of the function were not referred to in the function trains, this style of programming is called tacit or \"point-free\" programming, borrowed from mathematics where it means taking data that can be described using points to be more fundamental than the points themselves, avoiding the need to refer to points explicitly. In this case, taking functions to be more fundamental than their description in terms of explicit arguments, w The most basic train is the 2-train (fg), in operator form f\u2364g, called an atop. The atop evaluates the function f monadically on the result of g applied to the arguments of the train. The following image is composed of three parts, the first being the APL syntax for the atop, the second being a tree-like representation of the atop where the evaluation happens from bottom to top, and the third is the atop in traditional mathematical notation. Trains in RIDE It is possible to make sense of trains by rendering them in various forms in the RIDE editor using the -trains option to the Box user command. For example, it is possible to render trains as trees using the following command. ] Box on - trains = tree You can use the help ]? command to get help for any user command in RIDE. Floored division can be conveniently expressed as an atop. 12 \u00f7 5 2.4 \u230a 2.4 2 12 ( \u230a\u00f7 ) 5 2 A very similar composition is achieved using the Beside operator, f\u2218g. More simply, the expression \u237a(f\u2218g)\u2375 evaluates to \u237afg\u2375, and recalling that APL is right associative, is \u237af(g\u2375). matrix \u2190 3 3 \u2374 ( 3 |\u2373 9 ) matrix 1 2 0 1 2 0 1 2 0 \u2349 matrix \u235d Transpose 1 1 1 2 2 2 0 0 0 \u235d Beside of matrix multiplication (+.\u00d7) and transpose (\u2349) matrix ( + . \u00d7 ) \u2218 \u2349 matrix 5 5 5 5 5 5 5 5 5 matrix ( + . \u00d7 ) \u2349 matrix 5 5 5 5 5 5 5 5 5 1 2 ( - / \u00d7 ) \u2218 \u2296 3 1 \u235d Cross product \u00af5 \u235d A beside of an atop and a function 1 2 ( - / \u00d7 ) \u2296 3 1 \u00af5 Notice that in the last statement, the atop -/\u00d7 and function \u2296 were composed into an atop. Since the atop -/\u00d7 is a functions in its own right, it can be used as part of larger trains. The Over \u2365 operator, f\u2365g , applies f to the value of g applied to each of its arguments. The decibel conversion from the start of this chapter can be easily written in this form. dB_to_ratio \u2190 { 10 * \u2375 \u00f7 10 } ratio_to_dB \u2190 { 10 \u00d7 10 \u235f \u2375 } \u235dOver of an atop and a function 60 ( ratio_to_dB \u00f7 ) \u2365 dB_to_ratio 30 30 ratio_to_dB (( dB_to_ratio 60 ) \u00f7 dB_to_ratio 30 ) 13.01029996 reciprocal_sum \u2190 { \u00f7 ( \u00f7 \u237a ) +\u00f7 \u2375 } 1 reciprocal_sum 2 0.6666666667 reciprocal_sum \u2190 ( \u00f7+ ) \u2365 \u00f7 1 reciprocal_sum 2 0.6666666667 hypotenuse \u2190 { (( \u237a * 2 ) + \u2375 * 2 ) * 0.5 } 3 hypotenuse 4 5 hypotenuse \u2190 ( * 0.5 + ) \u2365 ( * 2 ) SYNTAX ERROR hypotenuse \u2190 ( * 0.5 + ) \u2365 ( * 2 ) \u2227 When trying to adapt the hypotenuse function to point-free programming, a seemingly strange error appears complaining about syntax of our train. However, this error should not seem so bizzare after some thought, because the expression (* 0.5 +) is not a function, in fact, (* 0.5 +) evaluates to (1.648721271+) since the * function here is interpreted to act monadically on 0.5. In order to attach the value 0.5 to * and turn the dyadic * into a monadic {\u2375*0.5} , the bind \u2218 operator can be used. hypotenuse \u2190 ( * \u2218 0.5 + ) \u2365 ( * \u2218 2 ) 3 hypotenuse 4 5 Another form of the hypotenuse function is obtained by taking the magnitude of a complex number, with real and imaginary parts the arguments of the function. complex \u2190 + / ( 1 0J1 ) \u2218 \u00d7 complex 3 4 3J4 hypotenuse \u2190 | complex hypotenuse 3 4 5 hypotenuse \u2190 | ( + / ( 1 0J1 ) \u2218 \u00d7 ) hypotenuse 3 4 5 hypotenuse \u2190 | \u2364 + / ( 1 0J1 ) \u2218 \u00d7 hypotenuse 3 4 5 Another form of the hypotenuse function is obtained by taking the magnitude of a complex number, with real and imaginary parts the arguments of the function. Let\u2019s take a closer look at the trains at the beginning of this section, applied to vector values. range_average \u2190 ( \u2308 / -\u230a / ) ,+ / \u00f7\u2262 plusminus \u2190 -,\u22a3,+ Starting with range_average, we start reading from right to left identifying forks and atops. We first identify the 3-train +/\u00f7\u2262 , which takes the sum +/ of the elements of a vector and divides \u00f7 by the length \u2262 of the vector, {(+/\u2375)\u00f7(\u2262\u2375)} as a function which takes an average. avg \u2190 + / \u00f7\u2262 range_average \u2190 ( \u2308 / -\u230a / ) , avg Then, the 3-train (\u2308/-\u230a/) takes the maximum \u2308/ and subtracts - by the minimum \u230a/ , {(\u2308/\u2375)-(\u230a/\u2375)} , which gives the range of a series of values. avg \u2190 + / \u00f7\u2262 range \u2190 \u2308 / -\u230a / range_average \u2190 range , avg Then it\u2019s clear in this form that the function range_average takes the range and average of a series of values and returns both values in the form of a vector. The plus_minus function can be analysed similarly. plusminus \u2190 -,\u22a3,+ plusminus \u2190 -, ( \u22a3,+ ) plusminus \u2190 -, { \u2375 , \u237a + \u2375 } plusminus \u2190 { ( \u237a - \u2375 ) , ( \u2375 , \u237a + \u2375 ) } More generally, for an n-train of functions (f g h k l m \u2026 w x y z) , (f g h k l m \u2026 t u v w x y z) is interpreted as (f g h k l m \u2026 t u v w (x y z)) , which can be interpreted again as (f g h k l m \u2026 t u (v w (x y z))) , and further recursively. If the number of functions is odd, then the result is of the form of forks over forks (f g (h k (l m \u2026 (t u (v w (x y z))))\u2026) If the number of functions is even, then the result is an atop over forks (f (g h (k l (m \u2026 (t u (v w (x y z))))\u2026)","title":"3.9 - ALL ABOARD!"},{"location":"course/ch3/part9/#all-aboard","text":"This part will cover Trains Defining 2- and 3-trains The tack functions Some other important functions are the dyadic right and left identity/\"tack\" functions which return their right or left arguments. 'True' \u22a3 'False' True 'True' \u22a2 'False' False When applied monadically, they return their only argument. Consider the following pairs of functions, implemented using dfns first, and trains second. range_average \u2190 { (( \u2308 / \u2375 ) -\u230a / \u2375 ) , ( + / \u2375 ) \u00f7\u2262 \u2375 } range_average 5.48 6 5.63 6.02 5.37 0.65 5.7 range_average \u2190 ( \u2308 / -\u230a / ) ,+ / \u00f7\u2262 range_average 5.48 6 5.63 6.02 5.37 0.65 5.7 plusminus \u2190 { ( \u237a - \u2375 ) , \u237a , \u237a + \u2375 } 5.7 plusminus 0.65 5.05 5.7 6.35 plusminus \u2190 -,\u22a3,+ 5.7 plusminus 0.2 5.5 5.7 5.9 Notice that the arguments of the function were not referred to in the function trains, this style of programming is called tacit or \"point-free\" programming, borrowed from mathematics where it means taking data that can be described using points to be more fundamental than the points themselves, avoiding the need to refer to points explicitly. In this case, taking functions to be more fundamental than their description in terms of explicit arguments, w The most basic train is the 2-train (fg), in operator form f\u2364g, called an atop. The atop evaluates the function f monadically on the result of g applied to the arguments of the train. The following image is composed of three parts, the first being the APL syntax for the atop, the second being a tree-like representation of the atop where the evaluation happens from bottom to top, and the third is the atop in traditional mathematical notation. Trains in RIDE It is possible to make sense of trains by rendering them in various forms in the RIDE editor using the -trains option to the Box user command. For example, it is possible to render trains as trees using the following command. ] Box on - trains = tree You can use the help ]? command to get help for any user command in RIDE. Floored division can be conveniently expressed as an atop. 12 \u00f7 5 2.4 \u230a 2.4 2 12 ( \u230a\u00f7 ) 5 2 A very similar composition is achieved using the Beside operator, f\u2218g. More simply, the expression \u237a(f\u2218g)\u2375 evaluates to \u237afg\u2375, and recalling that APL is right associative, is \u237af(g\u2375). matrix \u2190 3 3 \u2374 ( 3 |\u2373 9 ) matrix 1 2 0 1 2 0 1 2 0 \u2349 matrix \u235d Transpose 1 1 1 2 2 2 0 0 0 \u235d Beside of matrix multiplication (+.\u00d7) and transpose (\u2349) matrix ( + . \u00d7 ) \u2218 \u2349 matrix 5 5 5 5 5 5 5 5 5 matrix ( + . \u00d7 ) \u2349 matrix 5 5 5 5 5 5 5 5 5 1 2 ( - / \u00d7 ) \u2218 \u2296 3 1 \u235d Cross product \u00af5 \u235d A beside of an atop and a function 1 2 ( - / \u00d7 ) \u2296 3 1 \u00af5 Notice that in the last statement, the atop -/\u00d7 and function \u2296 were composed into an atop. Since the atop -/\u00d7 is a functions in its own right, it can be used as part of larger trains. The Over \u2365 operator, f\u2365g , applies f to the value of g applied to each of its arguments. The decibel conversion from the start of this chapter can be easily written in this form. dB_to_ratio \u2190 { 10 * \u2375 \u00f7 10 } ratio_to_dB \u2190 { 10 \u00d7 10 \u235f \u2375 } \u235dOver of an atop and a function 60 ( ratio_to_dB \u00f7 ) \u2365 dB_to_ratio 30 30 ratio_to_dB (( dB_to_ratio 60 ) \u00f7 dB_to_ratio 30 ) 13.01029996 reciprocal_sum \u2190 { \u00f7 ( \u00f7 \u237a ) +\u00f7 \u2375 } 1 reciprocal_sum 2 0.6666666667 reciprocal_sum \u2190 ( \u00f7+ ) \u2365 \u00f7 1 reciprocal_sum 2 0.6666666667 hypotenuse \u2190 { (( \u237a * 2 ) + \u2375 * 2 ) * 0.5 } 3 hypotenuse 4 5 hypotenuse \u2190 ( * 0.5 + ) \u2365 ( * 2 ) SYNTAX ERROR hypotenuse \u2190 ( * 0.5 + ) \u2365 ( * 2 ) \u2227 When trying to adapt the hypotenuse function to point-free programming, a seemingly strange error appears complaining about syntax of our train. However, this error should not seem so bizzare after some thought, because the expression (* 0.5 +) is not a function, in fact, (* 0.5 +) evaluates to (1.648721271+) since the * function here is interpreted to act monadically on 0.5. In order to attach the value 0.5 to * and turn the dyadic * into a monadic {\u2375*0.5} , the bind \u2218 operator can be used. hypotenuse \u2190 ( * \u2218 0.5 + ) \u2365 ( * \u2218 2 ) 3 hypotenuse 4 5 Another form of the hypotenuse function is obtained by taking the magnitude of a complex number, with real and imaginary parts the arguments of the function. complex \u2190 + / ( 1 0J1 ) \u2218 \u00d7 complex 3 4 3J4 hypotenuse \u2190 | complex hypotenuse 3 4 5 hypotenuse \u2190 | ( + / ( 1 0J1 ) \u2218 \u00d7 ) hypotenuse 3 4 5 hypotenuse \u2190 | \u2364 + / ( 1 0J1 ) \u2218 \u00d7 hypotenuse 3 4 5 Another form of the hypotenuse function is obtained by taking the magnitude of a complex number, with real and imaginary parts the arguments of the function. Let\u2019s take a closer look at the trains at the beginning of this section, applied to vector values. range_average \u2190 ( \u2308 / -\u230a / ) ,+ / \u00f7\u2262 plusminus \u2190 -,\u22a3,+ Starting with range_average, we start reading from right to left identifying forks and atops. We first identify the 3-train +/\u00f7\u2262 , which takes the sum +/ of the elements of a vector and divides \u00f7 by the length \u2262 of the vector, {(+/\u2375)\u00f7(\u2262\u2375)} as a function which takes an average. avg \u2190 + / \u00f7\u2262 range_average \u2190 ( \u2308 / -\u230a / ) , avg Then, the 3-train (\u2308/-\u230a/) takes the maximum \u2308/ and subtracts - by the minimum \u230a/ , {(\u2308/\u2375)-(\u230a/\u2375)} , which gives the range of a series of values. avg \u2190 + / \u00f7\u2262 range \u2190 \u2308 / -\u230a / range_average \u2190 range , avg Then it\u2019s clear in this form that the function range_average takes the range and average of a series of values and returns both values in the form of a vector. The plus_minus function can be analysed similarly. plusminus \u2190 -,\u22a3,+ plusminus \u2190 -, ( \u22a3,+ ) plusminus \u2190 -, { \u2375 , \u237a + \u2375 } plusminus \u2190 { ( \u237a - \u2375 ) , ( \u2375 , \u237a + \u2375 ) } More generally, for an n-train of functions (f g h k l m \u2026 w x y z) , (f g h k l m \u2026 t u v w x y z) is interpreted as (f g h k l m \u2026 t u v w (x y z)) , which can be interpreted again as (f g h k l m \u2026 t u (v w (x y z))) , and further recursively. If the number of functions is odd, then the result is of the form of forks over forks (f g (h k (l m \u2026 (t u (v w (x y z))))\u2026) If the number of functions is even, then the result is an atop over forks (f (g h (k l (m \u2026 (t u (v w (x y z))))\u2026)","title":"ALL ABOARD!"},{"location":"course/ch3/read/","text":"Read exercises For each of the following exercises, try to figure out what the input will produce in the TryAPL terminal. Check your answers by opening the \"Output\" tab. If you think an error will occur, try to predict which error it will be and where the arrow will point to. The exercises are not checked or graded: use them to check your knowledge!","title":"3.R - Read exercises"},{"location":"course/ch3/read/#read-exercises","text":"For each of the following exercises, try to figure out what the input will produce in the TryAPL terminal. Check your answers by opening the \"Output\" tab. If you think an error will occur, try to predict which error it will be and where the arrow will point to. The exercises are not checked or graded: use them to check your knowledge!","title":"Read exercises"},{"location":"course/ch3/summary/","text":"Function index Here is a table of symbols we have used and how to type them in TryAPL. It might be useful to review this page as you are doing the read and write exercises in the next sections. New functions Symbol Name Function Key combination Old functions Symbol Name Function Key combination + Plus Addition + - Minus Subtraction - \u00d7 Times Multiplication PREFIX - \u00f7 Divide Division PREFIX = * Power Exponentiation * \u00af Negative sign Negation of a number PREFIX 2 \u235d Lamp Comment PREFIX , \u2190 Assignment operator Assigning variables < - Tab \u2395 Quad Printing PREFIX L","title":"3.S - Summary"},{"location":"course/ch3/summary/#function-index","text":"Here is a table of symbols we have used and how to type them in TryAPL. It might be useful to review this page as you are doing the read and write exercises in the next sections.","title":"Function index"},{"location":"course/ch3/summary/#new-functions","text":"Symbol Name Function Key combination","title":"New functions"},{"location":"course/ch3/summary/#old-functions","text":"Symbol Name Function Key combination + Plus Addition + - Minus Subtraction - \u00d7 Times Multiplication PREFIX - \u00f7 Divide Division PREFIX = * Power Exponentiation * \u00af Negative sign Negation of a number PREFIX 2 \u235d Lamp Comment PREFIX , \u2190 Assignment operator Assigning variables < - Tab \u2395 Quad Printing PREFIX L","title":"Old functions"},{"location":"course/ch3/write/","text":"Write exercises Submit APL code for the following exercises. Your submissions are graded using TMC. Make sure to log in to be able to submit your work! Remember, you can test out ideas and develop you solution at TryAPL before submitting it here. You can submit as many solutions as you like. If you submit a correct solution at least once, you will receive points on the TMC server and be able to see the model solution. If the write problem is red, it is unsolved. If it it green, you have solved it and received points for it on the server.","title":"3.W - Write exercises"},{"location":"course/ch3/write/#write-exercises","text":"Submit APL code for the following exercises. Your submissions are graded using TMC. Make sure to log in to be able to submit your work! Remember, you can test out ideas and develop you solution at TryAPL before submitting it here. You can submit as many solutions as you like. If you submit a correct solution at least once, you will receive points on the TMC server and be able to see the model solution. If the write problem is red, it is unsolved. If it it green, you have solved it and received points for it on the server.","title":"Write exercises"},{"location":"course/ch4/bonus/","text":"Bonus content: Rotating an image This part is optional This part is considered to be bonus content. It contains some more advanced topics that are not covered in the main course. It can also give some examples of functions and topics that are introuced later in the course. There are no exercises related to this content. Feel free to skim or skip this section for now, and return to it later! Let\u2019s try rotating the image 'illusion.ppm' in the PPM P3 image format. The PPM P3 format consists of three lines of header: the first specifying the format the string 'P3' , the second specifying the resolution of the image 455 498 , and the third specifying the maximum value for each color value, usually 255 . After these three lines, the color data is provided in plain-text as RGB values. Here is an example PPM file a scaled version of the image it encodes P3 5 5 255 255 255 255 255 0 255 255 255 255 0 255 0 255 255 255 255 255 255 255 255 255 255 255 0 0 255 0 255 255 255 0 255 255 255 255 0 255 255 0 0 255 0 255 255 255 0 255 255 0 255 255 255 255 255 255 255 255 255 0 0 0 0 255 255 255 255 0 0 255 255 0 0 255 0 0 The \u2395NGET command can be used to open the above image, and many different types of files. It takes as right argument a path to a file, and returns an array of the file data, the encoding, and the unicode number for the newline character. \u2395NGET 'test.ppm' \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2510 \u2502 P3 \u2502 UTF - 8 - NOBOM \u2502 10 \u2502 \u2502 5 5 \u2502 \u2502 \u2502 \u2502 255 \u2502 \u2502 \u2502 \u2502 255 255 255 255 0 255 255 255 255 0 255 0 255 255 255 \u2502 \u2502 \u2502 \u2502 255 255 255 255 255 255 255 255 0 0 255 0 255 255 255 \u2502 \u2502 \u2502 \u2502 0 255 255 255 255 0 255 255 0 0 255 0 255 255 255 \u2502 \u2502 \u2502 \u2502 0 255 255 0 255 255 255 255 255 255 255 255 255 0 0 \u2502 \u2502 \u2502 \u2502 0 0 255 255 255 255 0 0 255 255 0 0 255 0 0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2518 The first element of the result is the character array consisting of the image. To get each row of the image separately in an array, the argument 1 can be used. \u2283 \u2395NGET 'test.ppm' 1 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 P3 \u2502 5 5 \u2502 255 \u2502 255 255 255 255 0 255 255 255 255 0 255 0 255 255 255 \u2502 255 255 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 255 255 255 255 255 255 0 0 255 0 255 255 255 \u2502 0 255 255 255 255 0 255 255 0 0 255 0 255 255 255 \u2502 0 255 255 0 255 2 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 55 255 255 255 255 255 255 255 0 0 \u2502 0 0 255 255 255 255 0 0 255 255 0 0 255 0 0 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 We start by reading the illusion image and its metadata. file \u2190 \u2283 \u2395NGET 'illusion.ppm' 1 header \u2190 file [ 1 2 3 ] resolution \u2190 2 \u2283 header image \u2190 file ~ header resolution 455 498 resolution [ 1 ] 4 \u2374 resolution 7 The resolution vector is not a vector of numbers, which would be useful here, but a vector of characters in the string '455 497' . The execute \u234e function evaluates strings as APL expressions, hence can turn the string '455 497' into the vector 455 497 . resolution \u2190 \u234e 2 \u2283 header resolution 455 497 resolution [ 1 ] 455 \u2374 resolution 2 The image data is then rotated by half its width, and written using the \u2395NPUT command with the append 2 argument. new_image \u2190 ( 3 \u00d7 resolution [ 2 ] \u00f7 2 ) \u233d \u00a8 image 'P3' \u2395NPUT 'illusion_rotated.ppm' 2 resolution \u2395NPUT 'illusion_rotated.ppm' 2 DOMAIN ERROR Since the resolution data is a vector of numbers, it cannot be written directly into a file as text. The format \u2355 function converts between the two, sometimes acting as an inverse to the \u234e execute function. The image data is written element by element, hence row by row (since the elements of image are rows of the original image). ( \u2355 resolution ) \u2395NPUT 'illusion_rotated.ppm' 2 '255' \u2395NPUT 'illusion_rotated.ppm' 2 (( 'illusion_rotated.ppm' 2 ) \u2218 ( \u2395NPUT \u2368 )) \u00a8 new_image","title":"4.B - Rotating an image"},{"location":"course/ch4/bonus/#bonus-content-rotating-an-image","text":"This part is optional This part is considered to be bonus content. It contains some more advanced topics that are not covered in the main course. It can also give some examples of functions and topics that are introuced later in the course. There are no exercises related to this content. Feel free to skim or skip this section for now, and return to it later! Let\u2019s try rotating the image 'illusion.ppm' in the PPM P3 image format. The PPM P3 format consists of three lines of header: the first specifying the format the string 'P3' , the second specifying the resolution of the image 455 498 , and the third specifying the maximum value for each color value, usually 255 . After these three lines, the color data is provided in plain-text as RGB values. Here is an example PPM file a scaled version of the image it encodes P3 5 5 255 255 255 255 255 0 255 255 255 255 0 255 0 255 255 255 255 255 255 255 255 255 255 255 0 0 255 0 255 255 255 0 255 255 255 255 0 255 255 0 0 255 0 255 255 255 0 255 255 0 255 255 255 255 255 255 255 255 255 0 0 0 0 255 255 255 255 0 0 255 255 0 0 255 0 0 The \u2395NGET command can be used to open the above image, and many different types of files. It takes as right argument a path to a file, and returns an array of the file data, the encoding, and the unicode number for the newline character. \u2395NGET 'test.ppm' \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2510 \u2502 P3 \u2502 UTF - 8 - NOBOM \u2502 10 \u2502 \u2502 5 5 \u2502 \u2502 \u2502 \u2502 255 \u2502 \u2502 \u2502 \u2502 255 255 255 255 0 255 255 255 255 0 255 0 255 255 255 \u2502 \u2502 \u2502 \u2502 255 255 255 255 255 255 255 255 0 0 255 0 255 255 255 \u2502 \u2502 \u2502 \u2502 0 255 255 255 255 0 255 255 0 0 255 0 255 255 255 \u2502 \u2502 \u2502 \u2502 0 255 255 0 255 255 255 255 255 255 255 255 255 0 0 \u2502 \u2502 \u2502 \u2502 0 0 255 255 255 255 0 0 255 255 0 0 255 0 0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2518 The first element of the result is the character array consisting of the image. To get each row of the image separately in an array, the argument 1 can be used. \u2283 \u2395NGET 'test.ppm' 1 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 P3 \u2502 5 5 \u2502 255 \u2502 255 255 255 255 0 255 255 255 255 0 255 0 255 255 255 \u2502 255 255 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 255 255 255 255 255 255 0 0 255 0 255 255 255 \u2502 0 255 255 255 255 0 255 255 0 0 255 0 255 255 255 \u2502 0 255 255 0 255 2 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 55 255 255 255 255 255 255 255 0 0 \u2502 0 0 255 255 255 255 0 0 255 255 0 0 255 0 0 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 We start by reading the illusion image and its metadata. file \u2190 \u2283 \u2395NGET 'illusion.ppm' 1 header \u2190 file [ 1 2 3 ] resolution \u2190 2 \u2283 header image \u2190 file ~ header resolution 455 498 resolution [ 1 ] 4 \u2374 resolution 7 The resolution vector is not a vector of numbers, which would be useful here, but a vector of characters in the string '455 497' . The execute \u234e function evaluates strings as APL expressions, hence can turn the string '455 497' into the vector 455 497 . resolution \u2190 \u234e 2 \u2283 header resolution 455 497 resolution [ 1 ] 455 \u2374 resolution 2 The image data is then rotated by half its width, and written using the \u2395NPUT command with the append 2 argument. new_image \u2190 ( 3 \u00d7 resolution [ 2 ] \u00f7 2 ) \u233d \u00a8 image 'P3' \u2395NPUT 'illusion_rotated.ppm' 2 resolution \u2395NPUT 'illusion_rotated.ppm' 2 DOMAIN ERROR Since the resolution data is a vector of numbers, it cannot be written directly into a file as text. The format \u2355 function converts between the two, sometimes acting as an inverse to the \u234e execute function. The image data is written element by element, hence row by row (since the elements of image are rows of the original image). ( \u2355 resolution ) \u2395NPUT 'illusion_rotated.ppm' 2 '255' \u2395NPUT 'illusion_rotated.ppm' 2 (( 'illusion_rotated.ppm' 2 ) \u2218 ( \u2395NPUT \u2368 )) \u00a8 new_image","title":"Bonus content: Rotating an image"},{"location":"course/ch4/part1/","text":"Creating vectors This part will cover Vector generating functions Iota Rho Replicate Catenate Roll/deal Index origin The empty vector All of the functions that we covered in Chapter 3 have been scalar functions . When you apply a scalar function to a scalar, you get another scalar: | \u00af4.2 4.2 2 + 3 5 When you apply a scalar function to an array, it just applies it to each element and returns an array of the same length: | \u00af4.2 5 \u00af3 0 \u00af7 4.2 5 3 0 7 1 2 3 + 4 5 6 5 7 9 1 + 1 2 3 2 3 4 However, there are also functions that operate on whole vectors all at once. In this part, we will cover vector-generating functions: those that take in arguments to produce new vectors. Index generator Typing the index generator \u2373 Prefix method: PREFIX i Tab method: i i Tab The monadic index generator \u2373 (iota) is probably one of the most common and simple vector functions in APL. Can you see what it does? \u2373 5 1 2 3 4 5 \u2373 10 1 2 3 4 5 6 7 8 9 10 \u2373 1 1 That's right, it just generates a vector containing the numbers from 1 to whatever you give it as an argument. This is quite useful, since you can now apply our familiar scalar functions to get a whole load of other vectors. For example, here is how you get the even numbers from 1 to 10: \u2373 5 1 2 3 4 5 2 \u00d7\u2373 5 2 4 6 8 10 Or, if you want the numbers from 1 to 10 in decreasing order: \u2373 10 1 2 3 4 5 6 7 8 9 10 -\u2373 10 \u00af1 \u00af2 \u00af3 \u00af4 \u00af5 \u00af6 \u00af7 \u00af8 \u00af9 \u00af10 11 -\u2373 10 10 9 8 7 6 5 4 3 2 1 There's a lot of different vectors you can create: you'll get to have fun with this in the exercises. Let's try breaking the \u2373 function. What do you think will happen if we give it a negative number or a letter as an argument? \u2373 \u00af1 DOMAIN ERROR \u2373 \u00af1 \u2227 \u2373 'a' DOMAIN ERROR \u2373 'a' \u2227 That's right, it's a domain error. APL can't handle these values, so it just throws an error. What about the number 0? \u2373 0 Nothing got printed, but also no error was produced. This is because of a pattern: \u23735 produces a vector of length 5, \u23734 produces a vector of length 4, \u23733 produces a vector of length 3, \u23732 produces a vector of length 2, \u23731 produces a vector of length 1. The APL developers decided that it would also be helpful if \u23730 produced a vector of length 0: the empty vector. This is sometimes handy to use if you want to have a vector and then add elements to it later. You can also get the empty vector directly using the zilde sign, \u236c Typing the empty vector \u236c Prefix method: PREFIX } Tab method: 0 ~ Tab You can also give iota a vector as a right argument. In this case, it generates a table (array) with a vector of coordinates in each cell. For example, if we give it 5 5 , it creates a 2D array with little vectors that tell you what square it is in each position. \u2373 5 5 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 1 1 \u2502 1 2 \u2502 1 3 \u2502 1 4 \u2502 1 5 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 2 1 \u2502 2 2 \u2502 2 3 \u2502 2 4 \u2502 2 5 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 3 1 \u2502 3 2 \u2502 3 3 \u2502 3 4 \u2502 3 5 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 4 1 \u2502 4 2 \u2502 4 3 \u2502 4 4 \u2502 4 5 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 5 1 \u2502 5 2 \u2502 5 3 \u2502 5 4 \u2502 5 5 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 The same thing happens if we give it 2 2 2 : now, it makes a 3D table in the same way. \u2373 2 2 2 \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 1 1 \u2502 1 1 2 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 2 1 \u2502 1 2 2 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 2 1 1 \u2502 2 1 2 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 2 2 1 \u2502 2 2 2 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 Index origin Sometimes you want your numbers to start from 0 instead of 1. For example, if we wanted to generate a vector of all the numbers from 0 to 10, we could do it as before: \u2373 11 1 2 3 4 5 6 7 8 9 10 11 \u00af1 +\u2373 11 0 1 2 3 4 5 6 7 8 9 10 However, this isn't always practical. A handy tool to get around this is to use the index origin variable, \u2395IO . You can set the value of \u2395IO to either 1 or 0, which will change the behaviour of all origin-sensitive functions. An example of an origin-sensitive function is the index generator. Let's see what happens when we change the index origin: \u2395IO 1 \u2373 5 1 2 3 4 5 \u2395IO \u2190 0 \u2395IO 0 \u2373 5 0 1 2 3 4 Note that now \u2373 still generates a vector of the length you give it, and not up to the value you give it. Remember to always change back the index origin after you're done to avoid messing up other code that expects it to be 1: \u2395IO \u2190 1 \u2395IO 1 Reshape You've already seen this one, but let's see how it works in more detail. Typing the reshape operator \u2374 Prefix method: PREFIX r Tab method: r r Tab The dyadic reshape operator, \u2374 , takes in a shape on the left and a value to use as a filler on the right. Let's see it in action: 5 \u2374 3 3 3 3 3 3 7 \u2374 0 0 0 0 0 0 0 0 You can also use a vector of filler items on the right. If there's not enough elements, they get repeated. If there are too many elements, they get left out. 5 \u2374 1 2 1 2 1 2 1 10 \u2374 1 2 3 4 1 2 3 4 1 2 3 4 1 2 4 \u2374 1 2 3 4 5 6 1 2 3 4 Iota and rho are besties: we can combine them to make nice vectors! \u2373 3 1 2 3 14 \u2374 \u2373 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 This also works with letters. 33 \u2374 'aybabtu' aybabtuaybabtuaybabtuaybabtuaybab 100 \u2374 'A' AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Reshape also works nicely with higher dimensional arrays. The argument on the left is now a vector that tells you the size of each of the dimensions of your array. 3 3 \u2374 1 1 1 1 1 1 1 1 1 1 5 5 \u2374 \u2373 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 2 3 4 \u2374 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 Replicate What about this one? 3 / 1 2 3 4 1 1 1 2 2 2 3 3 3 4 4 4 This is the dyadic replicate function, / . If you give it a vector on the right and a scalar on the left, it repeats each element of the vector that many times. You can also give it two vectors of the same length on each side: 1 2 1 2 / 1 2 3 4 1 2 2 3 4 4 1 0 1 1 0 0 1 / 3 4 5 6 7 8 9 3 5 6 9 0 0 0 1 1 0 0 0 1 1 0 0 / 'flamethrower' meow 0 0 0 1 1 0 0 0 7 1 0 0 / 'flamethrower' meooooooow When the left-hand side contains just zeros and ones, it is called a bitmask . We can use bitmasks to select parts of a vector, which sometimes comes in useful. \u2373 9 1 2 3 4 5 6 7 8 9 2 |\u2373 9 1 0 1 0 1 0 1 0 1 ~ 2 |\u2373 9 0 1 0 1 0 1 0 1 0 ( 2 |\u2373 9 ) / 'ballooned' blond ( ~ 2 |\u2373 9 ) / 'ballooned' aloe A little more complicated example: \u2373 26 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 8 |\u2373 26 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 5 = 8 |\u2373 26 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 \u2395A ABCDEFGHIJKLMNOPQRSTUVWXYZ ( 5 = 8 |\u2373 26 ) / \u2395A EMU Roll and deal Take a gamble: what does the dyadic ? function do? 3 ? 5 1 3 5 3 ? 5 4 1 5 3 ? 5 3 2 5 6 ? 100 64 53 77 98 10 11 It's a random number generator called \"deal\". Specifically, it \"deals out\" numbers without replacement. The expression 3?5 means: \"generate 3 numbers from 1 to 5 without any repetitions\". Pseudorandom numbers The ? function generates pseudorandom numbers. They are good for simulations and generic random numbers, but never use them for cryptography since they aren't truly random. What if we wanted to include zero? We could, of course, subtract 1 from everything. However, deal is origin-sensitive, so we can just use our favourite \u2395IO variable (remember to set it back once you're done). \u2395IO \u2190 0 5 ? 5 1 2 0 4 3 \u2395IO \u2190 1 Ok, but what if we want repetitions? Say I wanted a random list of ones and zeros. Just trying to force APL to generate these doesn't end well... \u2395IO \u2190 0 10 ? 2 DOMAIN ERROR : Deal right argument must be greater than or equal to the left argument 10 ? 2 \u2227 \u2395IO \u2190 1 There is actually another way to use deal that gives you numbers without replacement: it's called roll (like rolling a die)! And we don't even need another symbol: it's just the monadic version of ? . ? 5 2 ? 5 5 ? 5 2 ? 5 1 ? 5 3 If we want more random numbers, we just give it more numbers as an argument. ? 5 5 5 5 5 5 5 5 5 5 5 1 2 4 3 2 5 4 4 2 Think about this for a moment: how would you use the functions you already know to do the same thing? Here's two possible answers: ? 10 \u2374 5 1 2 2 4 3 4 5 4 2 2 ? 10 / 5 3 4 3 5 2 1 2 3 5 3 And, before we forget to answer the question we had before, here's how to generate a long list of random bits (ones and zeros): \u2395IO \u2190 0 ? 15 \u2374 2 0 0 0 1 0 0 0 1 1 1 1 0 1 0 1 \u2395IO \u2190 1 Catenate You're also familiar with this one! Let's revise it just to be sure :) Remember that, when you have two vectors, combining them with a space makes them into a nested vector ( S paces S eparate S calars): A \u2190 'abc' B \u2190 'def' A B \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 abc \u2502 def \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 But if you want to combine them into one vector, you can use the catenate function: A \u2190 'abc' B \u2190 'def' A , B abcdef","title":"4.1 - Creating vectors"},{"location":"course/ch4/part1/#creating-vectors","text":"This part will cover Vector generating functions Iota Rho Replicate Catenate Roll/deal Index origin The empty vector All of the functions that we covered in Chapter 3 have been scalar functions . When you apply a scalar function to a scalar, you get another scalar: | \u00af4.2 4.2 2 + 3 5 When you apply a scalar function to an array, it just applies it to each element and returns an array of the same length: | \u00af4.2 5 \u00af3 0 \u00af7 4.2 5 3 0 7 1 2 3 + 4 5 6 5 7 9 1 + 1 2 3 2 3 4 However, there are also functions that operate on whole vectors all at once. In this part, we will cover vector-generating functions: those that take in arguments to produce new vectors.","title":"Creating vectors"},{"location":"course/ch4/part1/#index-generator","text":"Typing the index generator \u2373 Prefix method: PREFIX i Tab method: i i Tab The monadic index generator \u2373 (iota) is probably one of the most common and simple vector functions in APL. Can you see what it does? \u2373 5 1 2 3 4 5 \u2373 10 1 2 3 4 5 6 7 8 9 10 \u2373 1 1 That's right, it just generates a vector containing the numbers from 1 to whatever you give it as an argument. This is quite useful, since you can now apply our familiar scalar functions to get a whole load of other vectors. For example, here is how you get the even numbers from 1 to 10: \u2373 5 1 2 3 4 5 2 \u00d7\u2373 5 2 4 6 8 10 Or, if you want the numbers from 1 to 10 in decreasing order: \u2373 10 1 2 3 4 5 6 7 8 9 10 -\u2373 10 \u00af1 \u00af2 \u00af3 \u00af4 \u00af5 \u00af6 \u00af7 \u00af8 \u00af9 \u00af10 11 -\u2373 10 10 9 8 7 6 5 4 3 2 1 There's a lot of different vectors you can create: you'll get to have fun with this in the exercises. Let's try breaking the \u2373 function. What do you think will happen if we give it a negative number or a letter as an argument? \u2373 \u00af1 DOMAIN ERROR \u2373 \u00af1 \u2227 \u2373 'a' DOMAIN ERROR \u2373 'a' \u2227 That's right, it's a domain error. APL can't handle these values, so it just throws an error. What about the number 0? \u2373 0 Nothing got printed, but also no error was produced. This is because of a pattern: \u23735 produces a vector of length 5, \u23734 produces a vector of length 4, \u23733 produces a vector of length 3, \u23732 produces a vector of length 2, \u23731 produces a vector of length 1. The APL developers decided that it would also be helpful if \u23730 produced a vector of length 0: the empty vector. This is sometimes handy to use if you want to have a vector and then add elements to it later. You can also get the empty vector directly using the zilde sign, \u236c Typing the empty vector \u236c Prefix method: PREFIX } Tab method: 0 ~ Tab You can also give iota a vector as a right argument. In this case, it generates a table (array) with a vector of coordinates in each cell. For example, if we give it 5 5 , it creates a 2D array with little vectors that tell you what square it is in each position. \u2373 5 5 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 1 1 \u2502 1 2 \u2502 1 3 \u2502 1 4 \u2502 1 5 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 2 1 \u2502 2 2 \u2502 2 3 \u2502 2 4 \u2502 2 5 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 3 1 \u2502 3 2 \u2502 3 3 \u2502 3 4 \u2502 3 5 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 4 1 \u2502 4 2 \u2502 4 3 \u2502 4 4 \u2502 4 5 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 5 1 \u2502 5 2 \u2502 5 3 \u2502 5 4 \u2502 5 5 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 The same thing happens if we give it 2 2 2 : now, it makes a 3D table in the same way. \u2373 2 2 2 \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 1 1 \u2502 1 1 2 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 2 1 \u2502 1 2 2 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 2 1 1 \u2502 2 1 2 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 2 2 1 \u2502 2 2 2 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518","title":"Index generator"},{"location":"course/ch4/part1/#index-origin","text":"Sometimes you want your numbers to start from 0 instead of 1. For example, if we wanted to generate a vector of all the numbers from 0 to 10, we could do it as before: \u2373 11 1 2 3 4 5 6 7 8 9 10 11 \u00af1 +\u2373 11 0 1 2 3 4 5 6 7 8 9 10 However, this isn't always practical. A handy tool to get around this is to use the index origin variable, \u2395IO . You can set the value of \u2395IO to either 1 or 0, which will change the behaviour of all origin-sensitive functions. An example of an origin-sensitive function is the index generator. Let's see what happens when we change the index origin: \u2395IO 1 \u2373 5 1 2 3 4 5 \u2395IO \u2190 0 \u2395IO 0 \u2373 5 0 1 2 3 4 Note that now \u2373 still generates a vector of the length you give it, and not up to the value you give it. Remember to always change back the index origin after you're done to avoid messing up other code that expects it to be 1: \u2395IO \u2190 1 \u2395IO 1","title":"Index origin"},{"location":"course/ch4/part1/#reshape","text":"You've already seen this one, but let's see how it works in more detail. Typing the reshape operator \u2374 Prefix method: PREFIX r Tab method: r r Tab The dyadic reshape operator, \u2374 , takes in a shape on the left and a value to use as a filler on the right. Let's see it in action: 5 \u2374 3 3 3 3 3 3 7 \u2374 0 0 0 0 0 0 0 0 You can also use a vector of filler items on the right. If there's not enough elements, they get repeated. If there are too many elements, they get left out. 5 \u2374 1 2 1 2 1 2 1 10 \u2374 1 2 3 4 1 2 3 4 1 2 3 4 1 2 4 \u2374 1 2 3 4 5 6 1 2 3 4 Iota and rho are besties: we can combine them to make nice vectors! \u2373 3 1 2 3 14 \u2374 \u2373 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 This also works with letters. 33 \u2374 'aybabtu' aybabtuaybabtuaybabtuaybabtuaybab 100 \u2374 'A' AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Reshape also works nicely with higher dimensional arrays. The argument on the left is now a vector that tells you the size of each of the dimensions of your array. 3 3 \u2374 1 1 1 1 1 1 1 1 1 1 5 5 \u2374 \u2373 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 2 3 4 \u2374 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2","title":"Reshape"},{"location":"course/ch4/part1/#replicate","text":"What about this one? 3 / 1 2 3 4 1 1 1 2 2 2 3 3 3 4 4 4 This is the dyadic replicate function, / . If you give it a vector on the right and a scalar on the left, it repeats each element of the vector that many times. You can also give it two vectors of the same length on each side: 1 2 1 2 / 1 2 3 4 1 2 2 3 4 4 1 0 1 1 0 0 1 / 3 4 5 6 7 8 9 3 5 6 9 0 0 0 1 1 0 0 0 1 1 0 0 / 'flamethrower' meow 0 0 0 1 1 0 0 0 7 1 0 0 / 'flamethrower' meooooooow When the left-hand side contains just zeros and ones, it is called a bitmask . We can use bitmasks to select parts of a vector, which sometimes comes in useful. \u2373 9 1 2 3 4 5 6 7 8 9 2 |\u2373 9 1 0 1 0 1 0 1 0 1 ~ 2 |\u2373 9 0 1 0 1 0 1 0 1 0 ( 2 |\u2373 9 ) / 'ballooned' blond ( ~ 2 |\u2373 9 ) / 'ballooned' aloe A little more complicated example: \u2373 26 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 8 |\u2373 26 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 5 = 8 |\u2373 26 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 \u2395A ABCDEFGHIJKLMNOPQRSTUVWXYZ ( 5 = 8 |\u2373 26 ) / \u2395A EMU","title":"Replicate"},{"location":"course/ch4/part1/#roll-and-deal","text":"Take a gamble: what does the dyadic ? function do? 3 ? 5 1 3 5 3 ? 5 4 1 5 3 ? 5 3 2 5 6 ? 100 64 53 77 98 10 11 It's a random number generator called \"deal\". Specifically, it \"deals out\" numbers without replacement. The expression 3?5 means: \"generate 3 numbers from 1 to 5 without any repetitions\". Pseudorandom numbers The ? function generates pseudorandom numbers. They are good for simulations and generic random numbers, but never use them for cryptography since they aren't truly random. What if we wanted to include zero? We could, of course, subtract 1 from everything. However, deal is origin-sensitive, so we can just use our favourite \u2395IO variable (remember to set it back once you're done). \u2395IO \u2190 0 5 ? 5 1 2 0 4 3 \u2395IO \u2190 1 Ok, but what if we want repetitions? Say I wanted a random list of ones and zeros. Just trying to force APL to generate these doesn't end well... \u2395IO \u2190 0 10 ? 2 DOMAIN ERROR : Deal right argument must be greater than or equal to the left argument 10 ? 2 \u2227 \u2395IO \u2190 1 There is actually another way to use deal that gives you numbers without replacement: it's called roll (like rolling a die)! And we don't even need another symbol: it's just the monadic version of ? . ? 5 2 ? 5 5 ? 5 2 ? 5 1 ? 5 3 If we want more random numbers, we just give it more numbers as an argument. ? 5 5 5 5 5 5 5 5 5 5 5 1 2 4 3 2 5 4 4 2 Think about this for a moment: how would you use the functions you already know to do the same thing? Here's two possible answers: ? 10 \u2374 5 1 2 2 4 3 4 5 4 2 2 ? 10 / 5 3 4 3 5 2 1 2 3 5 3 And, before we forget to answer the question we had before, here's how to generate a long list of random bits (ones and zeros): \u2395IO \u2190 0 ? 15 \u2374 2 0 0 0 1 0 0 0 1 1 1 1 0 1 0 1 \u2395IO \u2190 1","title":"Roll and deal"},{"location":"course/ch4/part1/#catenate","text":"You're also familiar with this one! Let's revise it just to be sure :) Remember that, when you have two vectors, combining them with a space makes them into a nested vector ( S paces S eparate S calars): A \u2190 'abc' B \u2190 'def' A B \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 abc \u2502 def \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 But if you want to combine them into one vector, you can use the catenate function: A \u2190 'abc' B \u2190 'def' A , B abcdef","title":"Catenate"},{"location":"course/ch4/part2/","text":"Reductions and scans This part will cover The reduction operator The scan operator Vectors in APL are represented, and can be created, by a collection of scalars separated by spaces. The reduce / operator can be naively thought of as replacing these spaces with a function specified by its left argument, and returning the result as a scalar. \u2373 10 1 2 3 4 5 6 7 8 9 10 + / \u2373 10 55 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 55 - / \u2373 10 \u00af5 1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 9 - 10 \u00af5 \u2227 / \u2373 20 \u235d LCM of numbers from 1 to 20 2520 Note that the reduce / operator always reduces the rank of its right argument by one; for example, reducing using the catenate , function creates a scalar which contains the array. , / \u2373 10 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 3 4 5 6 7 8 9 10 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 1 2 3 4 5 6 7 8 9 10 Since functions act from right to left, it is possible to construct a vector by catenating its elements from the right, and destruct the vector by iterating on it from the right using reduce. In type theory, these can be thought of as the general introduction and elimination rules of lists. 1 , ( 2 , ( 3 , ( 4 , ( 5 , ( 6 , ( 7 , ( 8 , ( 9 , 10 )))))))) 1 2 3 4 5 6 7 8 9 10 { \u2395 \u2190 \u2375 \u237a } / 1 , ( 2 , ( 3 , ( 4 , ( 5 , ( 6 , ( 7 , ( 8 , ( 9 , 10 )))))))) 10 9 10 9 8 10 9 8 7 10 9 8 7 6 10 9 8 7 6 5 10 9 8 7 6 5 4 10 9 8 7 6 5 4 3 10 9 8 7 6 5 4 3 2 10 9 8 7 6 5 4 3 2 1 It can be seen that for-each loops in imperative programming languages are equivalent to the reduce / operator, since they both destruct a list in the most general way possible. For example, the python for x in range(1,11): print(x**2) in APL is written as \u233d 0 ,\u2373 10 10 9 8 7 6 5 4 3 2 1 0 { \u2395 \u2190 \u237a * 2 } / \u233d 0 ,\u2373 10 1 4 9 16 25 36 49 64 81 100 The cumulative sum of a list can also be easily expressed using the reduce / operator. { \u237a , \u237a + \u2375 } / \u2373 10 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 3 6 10 15 21 28 36 45 55 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2283 { \u237a , \u237a + \u2375 } / \u2373 10 1 3 6 10 15 21 28 36 45 55 Note that we had to disclose \u2283 the resulting scalar which contained the resulting vector. There is a dedicated built-in operator that does not have the same limitations, and calculates cumulative functions even for higher dimensional arrays. The scan operator cumulatively applies its left argument function on its right argument array and returns a result array of the same rank. + \\ \u2373 10 1 3 6 10 15 21 28 36 45 55 \u235d Cumulative alternating sum - \\ \u2373 10 1 \u00af1 2 \u00af2 3 \u00af3 4 \u00af4 5 \u00af5 \u2373 5 5 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 1 1 \u2502 1 2 \u2502 1 3 \u2502 1 4 \u2502 1 5 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 2 1 \u2502 2 2 \u2502 2 3 \u2502 2 4 \u2502 2 5 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 3 1 \u2502 3 2 \u2502 3 3 \u2502 3 4 \u2502 3 5 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 4 1 \u2502 4 2 \u2502 4 3 \u2502 4 4 \u2502 4 5 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 5 1 \u2502 5 2 \u2502 5 3 \u2502 5 4 \u2502 5 5 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 + \\ \u2373 5 5 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 1 \u2502 2 3 \u2502 3 6 \u2502 4 10 \u2502 5 15 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 2 1 \u2502 4 3 \u2502 6 6 \u2502 8 10 \u2502 10 15 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 3 1 \u2502 6 3 \u2502 9 6 \u2502 12 10 \u2502 15 15 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 4 1 \u2502 8 3 \u2502 12 6 \u2502 16 10 \u2502 20 15 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 5 1 \u2502 10 3 \u2502 15 6 \u2502 20 10 \u2502 25 15 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 \u235d Cumulative maximum \u2308 \\ 1 0 1 2 3 2 \u00af1 4 2 1 1 1 1 2 3 3 3 4 4 4 \u235d Cumulative minimum \u230a \\ 1 0 1 2 3 2 \u00af1 4 2 1 1 0 0 0 0 0 \u00af1 \u00af1 \u00af1 \u00af1 M \u2190 ? 5 5 \u2374 10 M 9 10 2 1 4 8 2 9 3 2 6 4 3 2 8 8 5 5 2 1 2 10 2 2 10 \u2308 \\ M 9 10 10 10 10 8 8 9 9 9 6 6 6 6 8 8 8 8 8 8 2 10 10 10 10 \u230a \\ M 9 9 2 1 1 8 2 2 2 2 6 4 3 2 2 8 5 5 2 1 2 2 2 2 2","title":"4.2 - Reductions and scans"},{"location":"course/ch4/part2/#reductions-and-scans","text":"This part will cover The reduction operator The scan operator Vectors in APL are represented, and can be created, by a collection of scalars separated by spaces. The reduce / operator can be naively thought of as replacing these spaces with a function specified by its left argument, and returning the result as a scalar. \u2373 10 1 2 3 4 5 6 7 8 9 10 + / \u2373 10 55 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 55 - / \u2373 10 \u00af5 1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 9 - 10 \u00af5 \u2227 / \u2373 20 \u235d LCM of numbers from 1 to 20 2520 Note that the reduce / operator always reduces the rank of its right argument by one; for example, reducing using the catenate , function creates a scalar which contains the array. , / \u2373 10 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 3 4 5 6 7 8 9 10 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 1 2 3 4 5 6 7 8 9 10 Since functions act from right to left, it is possible to construct a vector by catenating its elements from the right, and destruct the vector by iterating on it from the right using reduce. In type theory, these can be thought of as the general introduction and elimination rules of lists. 1 , ( 2 , ( 3 , ( 4 , ( 5 , ( 6 , ( 7 , ( 8 , ( 9 , 10 )))))))) 1 2 3 4 5 6 7 8 9 10 { \u2395 \u2190 \u2375 \u237a } / 1 , ( 2 , ( 3 , ( 4 , ( 5 , ( 6 , ( 7 , ( 8 , ( 9 , 10 )))))))) 10 9 10 9 8 10 9 8 7 10 9 8 7 6 10 9 8 7 6 5 10 9 8 7 6 5 4 10 9 8 7 6 5 4 3 10 9 8 7 6 5 4 3 2 10 9 8 7 6 5 4 3 2 1 It can be seen that for-each loops in imperative programming languages are equivalent to the reduce / operator, since they both destruct a list in the most general way possible. For example, the python for x in range(1,11): print(x**2) in APL is written as \u233d 0 ,\u2373 10 10 9 8 7 6 5 4 3 2 1 0 { \u2395 \u2190 \u237a * 2 } / \u233d 0 ,\u2373 10 1 4 9 16 25 36 49 64 81 100 The cumulative sum of a list can also be easily expressed using the reduce / operator. { \u237a , \u237a + \u2375 } / \u2373 10 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 3 6 10 15 21 28 36 45 55 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2283 { \u237a , \u237a + \u2375 } / \u2373 10 1 3 6 10 15 21 28 36 45 55 Note that we had to disclose \u2283 the resulting scalar which contained the resulting vector. There is a dedicated built-in operator that does not have the same limitations, and calculates cumulative functions even for higher dimensional arrays. The scan operator cumulatively applies its left argument function on its right argument array and returns a result array of the same rank. + \\ \u2373 10 1 3 6 10 15 21 28 36 45 55 \u235d Cumulative alternating sum - \\ \u2373 10 1 \u00af1 2 \u00af2 3 \u00af3 4 \u00af4 5 \u00af5 \u2373 5 5 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 1 1 \u2502 1 2 \u2502 1 3 \u2502 1 4 \u2502 1 5 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 2 1 \u2502 2 2 \u2502 2 3 \u2502 2 4 \u2502 2 5 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 3 1 \u2502 3 2 \u2502 3 3 \u2502 3 4 \u2502 3 5 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 4 1 \u2502 4 2 \u2502 4 3 \u2502 4 4 \u2502 4 5 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 5 1 \u2502 5 2 \u2502 5 3 \u2502 5 4 \u2502 5 5 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 + \\ \u2373 5 5 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 1 \u2502 2 3 \u2502 3 6 \u2502 4 10 \u2502 5 15 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 2 1 \u2502 4 3 \u2502 6 6 \u2502 8 10 \u2502 10 15 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 3 1 \u2502 6 3 \u2502 9 6 \u2502 12 10 \u2502 15 15 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 4 1 \u2502 8 3 \u2502 12 6 \u2502 16 10 \u2502 20 15 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 5 1 \u2502 10 3 \u2502 15 6 \u2502 20 10 \u2502 25 15 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 \u235d Cumulative maximum \u2308 \\ 1 0 1 2 3 2 \u00af1 4 2 1 1 1 1 2 3 3 3 4 4 4 \u235d Cumulative minimum \u230a \\ 1 0 1 2 3 2 \u00af1 4 2 1 1 0 0 0 0 0 \u00af1 \u00af1 \u00af1 \u00af1 M \u2190 ? 5 5 \u2374 10 M 9 10 2 1 4 8 2 9 3 2 6 4 3 2 8 8 5 5 2 1 2 10 2 2 10 \u2308 \\ M 9 10 10 10 10 8 8 9 9 9 6 6 6 6 8 8 8 8 8 8 2 10 10 10 10 \u230a \\ M 9 9 2 1 1 8 2 2 2 2 6 4 3 2 2 8 5 5 2 1 2 2 2 2 2","title":"Reductions and scans"},{"location":"course/ch4/part3/","text":"Selecting from a vector This part will cover The 5 ways to select from an array Modifying elements There are 5 ways to select things from an array in APL. Here they are: let's go through them all! Choosing the first or last N numbers ( \u2191 ) Choosing all but the first or last N numbers ( \u2193 ) Choosing the numbers at specific positions ( [] ) Choosing the numbers that satisfy certain conditions ( / ) Choosing one specific item ( \u2283 ) Take This one is very simple: we use the dyadic \u2191 function (called take ) to choose the first or last N numbers of an array. The left argument is the number of values to take, and the right argument is the array itself. Typing the take function \u2191 Prefix method: PREFIX y Tab method: ^ | Tab Here's a quick example: VEC \u2190 23 4.3 \u00af23 \u00af3.3 7.5 \u00af8 3 \u2191 VEC 23 4.3 \u00af23 5 \u2191 VEC 23 4.3 \u00af23 \u00af3.3 7.5 1 \u2191 VEC 23 If you give it a negative number, it does the opposite and picks the numbers from the back. \u00af2 \u2191 VEC 7.5 \u00af8 \u00af5 \u2191 VEC 4.3 \u00af23 \u00af3.3 7.5 \u00af8 \u00af1 \u2191 VEC \u00af8 But watch out: the order is still the same! Take doesn't reverse the list, it just selects from the back. What if you give it a number that's longer than the length of the list? Make a guess... 10 \u2191 VEC 23 4.3 \u00af23 \u00af3.3 7.5 \u00af8 0 0 0 0 \u00af10 \u2191 VEC 0 0 0 0 23 4.3 \u00af23 \u00af3.3 7.5 \u00af8 It's not a LENGTH ERROR ! APL just pads the remaining length with zeros. Very handy. This is actually the only function that works like this: use it wisely. The same works with character vectors: 10 \u2191 'Hello!' Hello ! Oops, looks like there's nothing there. Let's try adding some characters on the side: '*', (10\u2191'Hello!'), '*' *Hello! * So character vectors get padded with spaces instead of zeros. Nice. Using take The take function is perfect for - Truncating - Padding Drop The dyadic drop function \u2193 works very similarly to take. Except now, instead of taking the first N elements, it takes everything but the first N elements. Typing the take function \u2191 Prefix method: PREFIX u Tab method: v | Tab Let's see it in action: VEC \u2190 23 4.3 \u00af23 \u00af3.3 7.5 \u00af8 3 \u2193 VEC \u00af3.3 7.5 \u00af8 4 \u2193 VEC 7.5 \u00af8 5 \u2193 VEC \u00af8 Same thing with negative numbers: it drops elements from the back. \u00af3 \u2193 VEC 23 4.3 \u00af23 \u00af4 \u2193 VEC 23 4.3 \u00af5 \u2193 VEC 23 What do you think happens if we drop too many elements? 10 \u2193 VEC \u00af10 \u2193 VEC We get nothing: just the empty vector! Makes sense. Index Indexing is used to pick out values based on an index from an array. Let's compare two different programs: the first one is written in Python, and the second one is written in APL. things = [ 5 , - 7 , 6 , 3 , 0 , 1 ] print ( things [ 2 ]) # Outputs 6 THINGS \u2190 5 \u00af7 6 3 0 1 THINGS [ 3 ] 6 The syntax is almost exactly the same! Except, of course, APL starts counting from 1 and not 0. If you want to change this, you can use the \u2395IO variable again: the brackets are context-sensitive. \u2395IO \u2190 0 THINGS [ 2 ] 6 \u2395IO \u2190 1 There's one big difference between these brackets and Python's brackets, though: APL brackets are cooler . Take a look at this! THINGS \u2190 5 \u00af7 6 3 0 1 THINGS [ 3 6 2 ] 6 1 \u00af7 THINGS [ 1 2 3 ] 5 \u00af7 6 THINGS [ \u2373 3 ] 5 \u00af7 6 THINGS [ 1 2 2 2 ] 5 \u00af7 \u00af7 \u00af7 By putting in a vector instead of a scalar in the argument, APL will give you back a vector of just those elements. Neat! One more thing: the brackets won't let you pick stuff from outside a vector. THINGS [ 0 1 2 ] INDEX ERROR THINGS [ 0 1 2 ] \u2227 THINGS [ 7 1 2 ] INDEX ERROR THINGS [ 7 1 2 ] \u2227 You just get an error: the INDEX ERROR . Square brackets and shape When you pass just one element to the square brackets [] , they return a scalar, but when you pass multiple elements it returns a vector. Seems a little inconsistent, right? Actually, no! The square brackets will always return something that has the same shape as what you give them . Let's see this in action. If you pass it a vector of length 2, then the response will also be a vector of length 2. \u2374 2 5 2 THINGS [ 2 5 ] \u00af7 0 \u2374 THINGS [ 2 5 ] 2 ``` If you pass it a scalar ( whose shape is the empty vector ) , then it returns a scalar ( whose shape is also the empty vector ) . ``` apl \u2374 1 ( nothing gets printed ) THINGS [ 1 ] 5 \u2374 THINGS [ 1 ] ( nothing gets printed again ) What do you think happens if you pass it a matrix with shape 2 3 ? Well, it returns a matrix of shape 2 3 ! 2 3 \u2374 1 3 5 2 4 4 1 3 5 2 4 4 \u2374 2 3 \u2374 1 3 5 2 4 4 2 3 THINGS [ 2 3 \u2374 1 3 5 2 4 4 ] 5 6 0 \u00af7 3 3 \u2374 THINGS [ 2 3 \u2374 1 3 5 2 4 4 ] 2 3 We are just converting an array of indices to an array of values. The square brackets will always return something that has the same shape as what you give them . Compress The dyadic compress function / will let you use a mask to pick elements from an array. This function is perfect for when you need to pick out items based on a certain condition . SUBS \u2190 0 0 0 4 5 0 2 1 4 1 1 1 1 1 0 0 0 0 / SUBS 0 0 0 4 5 We give it a vector of the same length on the left, and it keeps all the positions with a 1 and kills all the positions with a 0. How do we generate these automatically? Say we wanted to remove all the zeros from the array. We can use the boolean function = to see where all the zeros are and then use / to get rid of them. 0 = SUBS 1 1 1 0 0 1 0 0 0 ( 0 = SUBS ) / SUBS 0 0 0 0 ( 1 ) ( 0 \u2260 SUBS ) / SUBS 4 5 2 1 4 Hint: whoops, wrong way around Same thing, if you wanted all the small numbers, you can use the < function: 3 > SUBS 1 1 1 0 0 1 1 1 0 ( 3 > SUBS ) / SUBS 0 0 0 0 2 1 If you want to combine multiple conditions, you can use the other logical functions we covered in Chapter 3. Go back and revise them if you've forgotten! Here, let's pick all the values that are small but not zero: 3 > SUBS 1 1 1 0 0 1 1 1 0 0 \u2260 SUBS 0 0 0 1 1 0 1 1 1 ( 3 > SUBS ) \u2227 0 \u2260 SUBS 0 0 0 0 0 0 1 1 0 (( 3 > SUBS ) \u2227 0 \u2260 SUBS ) / SUBS 2 1 Pick You can use the dyadic pick \u2283 function to pick just one element from a vector: P \u2190 1 9 4 \u00af3 \u00af2 \u00af1 2 \u2283 P 9 3 \u2283 P 4 6 \u2283 P \u00af1 \"But why would I ever use this?! Don't the square brackets do the same thing and more? And this is harder to type!\" Good point. There's no real benefit in using pick when you have simple vectors like this. The only real case where this is useful is when you're working with nested vectors. Remember how they work? A \u2190 ( 1 2 ) ( 3 4 5 ) ( 2 44 2 1 ) A \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 \u2502 3 4 5 \u2502 2 44 2 1 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Here, we've created a nested vector A that has three simple vectors inside it. If we try to get the second vector out using the square brackets, we get something weird... A [ 2 ] \u250c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 3 4 5 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2374 A [ 2 ] ( nothing gets printed ) Instead of getting a vector, we get a vector in a box. And when we try to use \u2374 to find its shape, we see that its shape is the empty vector: it's a scalar! We'll get back to exactly why this is in the next chapter. For now, you can think of your vector as being trapped in a box and unable to escape . To set it free, we use pick! 2 \u2283 A 3 4 5 \u2374 2 \u2283 A 3 Peace has been restored to the world. Typing the pick function \u2283 Prefix method: PREFIX x Tab method: ) ) Tab","title":"4.3 - Selecting from a vector"},{"location":"course/ch4/part3/#selecting-from-a-vector","text":"This part will cover The 5 ways to select from an array Modifying elements There are 5 ways to select things from an array in APL. Here they are: let's go through them all! Choosing the first or last N numbers ( \u2191 ) Choosing all but the first or last N numbers ( \u2193 ) Choosing the numbers at specific positions ( [] ) Choosing the numbers that satisfy certain conditions ( / ) Choosing one specific item ( \u2283 )","title":"Selecting from a vector"},{"location":"course/ch4/part3/#take","text":"This one is very simple: we use the dyadic \u2191 function (called take ) to choose the first or last N numbers of an array. The left argument is the number of values to take, and the right argument is the array itself. Typing the take function \u2191 Prefix method: PREFIX y Tab method: ^ | Tab Here's a quick example: VEC \u2190 23 4.3 \u00af23 \u00af3.3 7.5 \u00af8 3 \u2191 VEC 23 4.3 \u00af23 5 \u2191 VEC 23 4.3 \u00af23 \u00af3.3 7.5 1 \u2191 VEC 23 If you give it a negative number, it does the opposite and picks the numbers from the back. \u00af2 \u2191 VEC 7.5 \u00af8 \u00af5 \u2191 VEC 4.3 \u00af23 \u00af3.3 7.5 \u00af8 \u00af1 \u2191 VEC \u00af8 But watch out: the order is still the same! Take doesn't reverse the list, it just selects from the back. What if you give it a number that's longer than the length of the list? Make a guess... 10 \u2191 VEC 23 4.3 \u00af23 \u00af3.3 7.5 \u00af8 0 0 0 0 \u00af10 \u2191 VEC 0 0 0 0 23 4.3 \u00af23 \u00af3.3 7.5 \u00af8 It's not a LENGTH ERROR ! APL just pads the remaining length with zeros. Very handy. This is actually the only function that works like this: use it wisely. The same works with character vectors: 10 \u2191 'Hello!' Hello ! Oops, looks like there's nothing there. Let's try adding some characters on the side: '*', (10\u2191'Hello!'), '*' *Hello! * So character vectors get padded with spaces instead of zeros. Nice. Using take The take function is perfect for - Truncating - Padding","title":"Take"},{"location":"course/ch4/part3/#drop","text":"The dyadic drop function \u2193 works very similarly to take. Except now, instead of taking the first N elements, it takes everything but the first N elements. Typing the take function \u2191 Prefix method: PREFIX u Tab method: v | Tab Let's see it in action: VEC \u2190 23 4.3 \u00af23 \u00af3.3 7.5 \u00af8 3 \u2193 VEC \u00af3.3 7.5 \u00af8 4 \u2193 VEC 7.5 \u00af8 5 \u2193 VEC \u00af8 Same thing with negative numbers: it drops elements from the back. \u00af3 \u2193 VEC 23 4.3 \u00af23 \u00af4 \u2193 VEC 23 4.3 \u00af5 \u2193 VEC 23 What do you think happens if we drop too many elements? 10 \u2193 VEC \u00af10 \u2193 VEC We get nothing: just the empty vector! Makes sense.","title":"Drop"},{"location":"course/ch4/part3/#index","text":"Indexing is used to pick out values based on an index from an array. Let's compare two different programs: the first one is written in Python, and the second one is written in APL. things = [ 5 , - 7 , 6 , 3 , 0 , 1 ] print ( things [ 2 ]) # Outputs 6 THINGS \u2190 5 \u00af7 6 3 0 1 THINGS [ 3 ] 6 The syntax is almost exactly the same! Except, of course, APL starts counting from 1 and not 0. If you want to change this, you can use the \u2395IO variable again: the brackets are context-sensitive. \u2395IO \u2190 0 THINGS [ 2 ] 6 \u2395IO \u2190 1 There's one big difference between these brackets and Python's brackets, though: APL brackets are cooler . Take a look at this! THINGS \u2190 5 \u00af7 6 3 0 1 THINGS [ 3 6 2 ] 6 1 \u00af7 THINGS [ 1 2 3 ] 5 \u00af7 6 THINGS [ \u2373 3 ] 5 \u00af7 6 THINGS [ 1 2 2 2 ] 5 \u00af7 \u00af7 \u00af7 By putting in a vector instead of a scalar in the argument, APL will give you back a vector of just those elements. Neat! One more thing: the brackets won't let you pick stuff from outside a vector. THINGS [ 0 1 2 ] INDEX ERROR THINGS [ 0 1 2 ] \u2227 THINGS [ 7 1 2 ] INDEX ERROR THINGS [ 7 1 2 ] \u2227 You just get an error: the INDEX ERROR . Square brackets and shape When you pass just one element to the square brackets [] , they return a scalar, but when you pass multiple elements it returns a vector. Seems a little inconsistent, right? Actually, no! The square brackets will always return something that has the same shape as what you give them . Let's see this in action. If you pass it a vector of length 2, then the response will also be a vector of length 2. \u2374 2 5 2 THINGS [ 2 5 ] \u00af7 0 \u2374 THINGS [ 2 5 ] 2 ``` If you pass it a scalar ( whose shape is the empty vector ) , then it returns a scalar ( whose shape is also the empty vector ) . ``` apl \u2374 1 ( nothing gets printed ) THINGS [ 1 ] 5 \u2374 THINGS [ 1 ] ( nothing gets printed again ) What do you think happens if you pass it a matrix with shape 2 3 ? Well, it returns a matrix of shape 2 3 ! 2 3 \u2374 1 3 5 2 4 4 1 3 5 2 4 4 \u2374 2 3 \u2374 1 3 5 2 4 4 2 3 THINGS [ 2 3 \u2374 1 3 5 2 4 4 ] 5 6 0 \u00af7 3 3 \u2374 THINGS [ 2 3 \u2374 1 3 5 2 4 4 ] 2 3 We are just converting an array of indices to an array of values. The square brackets will always return something that has the same shape as what you give them .","title":"Index"},{"location":"course/ch4/part3/#compress","text":"The dyadic compress function / will let you use a mask to pick elements from an array. This function is perfect for when you need to pick out items based on a certain condition . SUBS \u2190 0 0 0 4 5 0 2 1 4 1 1 1 1 1 0 0 0 0 / SUBS 0 0 0 4 5 We give it a vector of the same length on the left, and it keeps all the positions with a 1 and kills all the positions with a 0. How do we generate these automatically? Say we wanted to remove all the zeros from the array. We can use the boolean function = to see where all the zeros are and then use / to get rid of them. 0 = SUBS 1 1 1 0 0 1 0 0 0 ( 0 = SUBS ) / SUBS 0 0 0 0 ( 1 ) ( 0 \u2260 SUBS ) / SUBS 4 5 2 1 4 Hint: whoops, wrong way around Same thing, if you wanted all the small numbers, you can use the < function: 3 > SUBS 1 1 1 0 0 1 1 1 0 ( 3 > SUBS ) / SUBS 0 0 0 0 2 1 If you want to combine multiple conditions, you can use the other logical functions we covered in Chapter 3. Go back and revise them if you've forgotten! Here, let's pick all the values that are small but not zero: 3 > SUBS 1 1 1 0 0 1 1 1 0 0 \u2260 SUBS 0 0 0 1 1 0 1 1 1 ( 3 > SUBS ) \u2227 0 \u2260 SUBS 0 0 0 0 0 0 1 1 0 (( 3 > SUBS ) \u2227 0 \u2260 SUBS ) / SUBS 2 1","title":"Compress"},{"location":"course/ch4/part3/#pick","text":"You can use the dyadic pick \u2283 function to pick just one element from a vector: P \u2190 1 9 4 \u00af3 \u00af2 \u00af1 2 \u2283 P 9 3 \u2283 P 4 6 \u2283 P \u00af1 \"But why would I ever use this?! Don't the square brackets do the same thing and more? And this is harder to type!\" Good point. There's no real benefit in using pick when you have simple vectors like this. The only real case where this is useful is when you're working with nested vectors. Remember how they work? A \u2190 ( 1 2 ) ( 3 4 5 ) ( 2 44 2 1 ) A \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 \u2502 3 4 5 \u2502 2 44 2 1 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Here, we've created a nested vector A that has three simple vectors inside it. If we try to get the second vector out using the square brackets, we get something weird... A [ 2 ] \u250c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 3 4 5 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2374 A [ 2 ] ( nothing gets printed ) Instead of getting a vector, we get a vector in a box. And when we try to use \u2374 to find its shape, we see that its shape is the empty vector: it's a scalar! We'll get back to exactly why this is in the next chapter. For now, you can think of your vector as being trapped in a box and unable to escape . To set it free, we use pick! 2 \u2283 A 3 4 5 \u2374 2 \u2283 A 3 Peace has been restored to the world. Typing the pick function \u2283 Prefix method: PREFIX x Tab method: ) ) Tab","title":"Pick"},{"location":"course/ch4/part4/","text":"Order from chaos This part will cover Sorting / grade up / grade down Generating vectors Measurement of data in real-world systems is often accompanied by noise, which makes the extraction of useful information difficult. In order to introduce techniques which help analyse noisy data, we will first generate artificial noisy data. The monadic ? roll function generates a random number for every scalar in its right argument, from 1 to the value of that scalar. \u235d Roll a 6-sided die ? 6 2 ? 6 6 6 6 5 3 ? \u2373 10 1 1 3 4 4 6 6 5 8 4 ? 10 *\u2373 10 8 84 545 5254 99210 693088 7548981 55682236 454935262 2471243355 When the argument contains zero (0), a random floating point number between 0 and 1 is returned. ? 0 0 0 0 0.5073955156 0.1942971103 0.3645209613 0.8563507943 ? 0 ,\u2373 4 0.1770380776 1 1 2 4 The replicate function can be used to generate a large number of random number in a certain range, by creating a vector of the same number of arbitrary length. 6 / 10 10 10 10 10 10 10 10 ? 6 / 10 9 9 2 9 4 6 The dyadic ? deal function works similarly, but generates a list of random numbers without repeats. 5 ? 5 2 5 4 1 3 5 ? 10 5 7 1 6 8 10 ? 10 7 5 6 10 1 9 4 2 8 3 11 ? 10 DOMAIN ERROR : Deal right argument must be greater than or equal to the left argument 11 ? 10 \u2227 Simulating measuring a temperature of 21 degrees with some noise DATA \u2190 21 + ( ? 20 / 0 ) - 0.5 20.51270976 20.84443059 21.20961766 20.85869017 21.05525209 20.8088396 21.00197974 20.88101536 20.70209893 21.28923291 20.62552888 20.95059287 20.78032757 20.52831086 21.29706401 21.45739671 20.94876038 20.84444697 20.66278673 20.76248039 It is possible to recover the original data by taking an average, using the reduce / operator on + plus then dividing by the \u2262 tally of the DATA vector. ( + / DATA ) \u00f7 ( \u2262 DATA ) 20.90107811 ( + / \u00f7\u2262 ) DATA 20.90107811 For measurements of time-varying data, it would be useful instead to do a moving average. Take, for example, a temperature reading that goes from 20 to 30 over the course of 100 measurements. DATA \u2190 20 + ( 1 \u00f7 10 ) \u00d7\u2373 100 20.1 20.2 20.3 20.4 20.5 20.6 20.7 20.8 20.9 21 21.1 21.2 21.3 21.4 21.5 21.6 21.7 21.8 21.9 22 22.1 22.2 22.3 22.4 22.5 22.6 22.7 22.8 22.9 23 23.1 23.2 23.3 23.4 23.5 23.6 23.7 23.8 23.9 24 24.1 24.2 24.3 24.4 24.5 24.6 24.7 24.8 24.9 25 25.1 25.2 25.3 25.4 25.5 25.6 25.7 25.8 25.9 26 26.1 26.2 26.3 26.4 26.5 26.6 26.7 26.8 26.9 27 27.1 27.2 27.3 27.4 27.5 27.6 27.7 27.8 27.9 28 28.1 28.2 28.3 28.4 28.5 28.6 28.7 28.8 28.9 29 29.1 29.2 29.3 29.4 29.5 29.6 29.7 29.8 29.9 30 \u235d Add noise DATA + \u2190 ( ? 100 / 0 ) - 0.5 The windowed reduce / operator applies the reduce function on moving segments of its right argument specific by its left argument. 3 + / 1 2 3 4 5 6 6 9 12 15 ( 1 + 2 + 3 ) ( 2 + 3 + 4 ) ( 3 + 4 + 5 ) ( 4 + 5 + 6 ) 6 9 12 15 2 \u00d7 / \u2373 4 2 6 12 ( 1 \u00d7 2 ) ( 2 \u00d7 3 ) ( 3 \u00d7 4 ) 2 6 12 3 3 \u2374 \u2373 9 1 2 3 4 5 6 7 8 9 3 + / ( 3 3 \u2374 \u2373 9 ) 6 15 24 To get a moving average, the windowed reduce function can be applied to the + plus function and then divided by the size of the window, in this case 5. The result is then rounded to 1 decimal place. RESULT \u2190 ( 5 + / DATA ) \u00f7 5 10 \u00f7 \u2368 \u2308 RESULT \u00d7 10 20.4 20.5 20.7 20.7 20.8 20.8 20.9 20.9 21.1 21.1 21.2 21.4 21.5 21.6 21.8 21.9 21.9 22.1 22.2 22.3 22.5 22.7 22.7 22.8 22.8 22.8 22.8 22.9 23 23.1 23.2 23.5 23.7 23.6 23.8 23.9 24 24.1 24.4 24.5 24.6 24.5 24.5 24.5 24.5 24.5 24.7 24.9 24.9 25.2 25.4 25.6 25.7 25.8 25.8 25.9 25.9 26.1 26.2 26.3 26.4 26.6 26.7 26.7 26.9 27 27.1 27.2 27.3 27.3 27.4 27.4 27.4 27.6 27.8 27.9 28 28.2 28.3 28.3 28.3 28.4 28.6 28.6 28.8 29 29.1 29.2 29.3 29.4 29.3 29.3 29.4 29.6 29.7 29.8 Given a number of temperature readings, it is also possible to sort ascending and descending using the grade up \u234b and grade down \u2352 functions. The grade up \u234b and grade down \u2352 functions return indices of elements of its right argument in ascending or descending order. DATA \u2190 20 19 21 22 \u234b DATA 2 1 3 4 DATA [ \u234b DATA ] 19 20 21 22 \u2352 DATA 4 3 1 2 DATA [ \u2352 DATA ] 22 21 20 19","title":"4.4 - Order from chaos"},{"location":"course/ch4/part4/#order-from-chaos","text":"This part will cover Sorting / grade up / grade down Generating vectors Measurement of data in real-world systems is often accompanied by noise, which makes the extraction of useful information difficult. In order to introduce techniques which help analyse noisy data, we will first generate artificial noisy data. The monadic ? roll function generates a random number for every scalar in its right argument, from 1 to the value of that scalar. \u235d Roll a 6-sided die ? 6 2 ? 6 6 6 6 5 3 ? \u2373 10 1 1 3 4 4 6 6 5 8 4 ? 10 *\u2373 10 8 84 545 5254 99210 693088 7548981 55682236 454935262 2471243355 When the argument contains zero (0), a random floating point number between 0 and 1 is returned. ? 0 0 0 0 0.5073955156 0.1942971103 0.3645209613 0.8563507943 ? 0 ,\u2373 4 0.1770380776 1 1 2 4 The replicate function can be used to generate a large number of random number in a certain range, by creating a vector of the same number of arbitrary length. 6 / 10 10 10 10 10 10 10 10 ? 6 / 10 9 9 2 9 4 6 The dyadic ? deal function works similarly, but generates a list of random numbers without repeats. 5 ? 5 2 5 4 1 3 5 ? 10 5 7 1 6 8 10 ? 10 7 5 6 10 1 9 4 2 8 3 11 ? 10 DOMAIN ERROR : Deal right argument must be greater than or equal to the left argument 11 ? 10 \u2227 Simulating measuring a temperature of 21 degrees with some noise DATA \u2190 21 + ( ? 20 / 0 ) - 0.5 20.51270976 20.84443059 21.20961766 20.85869017 21.05525209 20.8088396 21.00197974 20.88101536 20.70209893 21.28923291 20.62552888 20.95059287 20.78032757 20.52831086 21.29706401 21.45739671 20.94876038 20.84444697 20.66278673 20.76248039 It is possible to recover the original data by taking an average, using the reduce / operator on + plus then dividing by the \u2262 tally of the DATA vector. ( + / DATA ) \u00f7 ( \u2262 DATA ) 20.90107811 ( + / \u00f7\u2262 ) DATA 20.90107811 For measurements of time-varying data, it would be useful instead to do a moving average. Take, for example, a temperature reading that goes from 20 to 30 over the course of 100 measurements. DATA \u2190 20 + ( 1 \u00f7 10 ) \u00d7\u2373 100 20.1 20.2 20.3 20.4 20.5 20.6 20.7 20.8 20.9 21 21.1 21.2 21.3 21.4 21.5 21.6 21.7 21.8 21.9 22 22.1 22.2 22.3 22.4 22.5 22.6 22.7 22.8 22.9 23 23.1 23.2 23.3 23.4 23.5 23.6 23.7 23.8 23.9 24 24.1 24.2 24.3 24.4 24.5 24.6 24.7 24.8 24.9 25 25.1 25.2 25.3 25.4 25.5 25.6 25.7 25.8 25.9 26 26.1 26.2 26.3 26.4 26.5 26.6 26.7 26.8 26.9 27 27.1 27.2 27.3 27.4 27.5 27.6 27.7 27.8 27.9 28 28.1 28.2 28.3 28.4 28.5 28.6 28.7 28.8 28.9 29 29.1 29.2 29.3 29.4 29.5 29.6 29.7 29.8 29.9 30 \u235d Add noise DATA + \u2190 ( ? 100 / 0 ) - 0.5 The windowed reduce / operator applies the reduce function on moving segments of its right argument specific by its left argument. 3 + / 1 2 3 4 5 6 6 9 12 15 ( 1 + 2 + 3 ) ( 2 + 3 + 4 ) ( 3 + 4 + 5 ) ( 4 + 5 + 6 ) 6 9 12 15 2 \u00d7 / \u2373 4 2 6 12 ( 1 \u00d7 2 ) ( 2 \u00d7 3 ) ( 3 \u00d7 4 ) 2 6 12 3 3 \u2374 \u2373 9 1 2 3 4 5 6 7 8 9 3 + / ( 3 3 \u2374 \u2373 9 ) 6 15 24 To get a moving average, the windowed reduce function can be applied to the + plus function and then divided by the size of the window, in this case 5. The result is then rounded to 1 decimal place. RESULT \u2190 ( 5 + / DATA ) \u00f7 5 10 \u00f7 \u2368 \u2308 RESULT \u00d7 10 20.4 20.5 20.7 20.7 20.8 20.8 20.9 20.9 21.1 21.1 21.2 21.4 21.5 21.6 21.8 21.9 21.9 22.1 22.2 22.3 22.5 22.7 22.7 22.8 22.8 22.8 22.8 22.9 23 23.1 23.2 23.5 23.7 23.6 23.8 23.9 24 24.1 24.4 24.5 24.6 24.5 24.5 24.5 24.5 24.5 24.7 24.9 24.9 25.2 25.4 25.6 25.7 25.8 25.8 25.9 25.9 26.1 26.2 26.3 26.4 26.6 26.7 26.7 26.9 27 27.1 27.2 27.3 27.3 27.4 27.4 27.4 27.6 27.8 27.9 28 28.2 28.3 28.3 28.3 28.4 28.6 28.6 28.8 29 29.1 29.2 29.3 29.4 29.3 29.3 29.4 29.6 29.7 29.8 Given a number of temperature readings, it is also possible to sort ascending and descending using the grade up \u234b and grade down \u2352 functions. The grade up \u234b and grade down \u2352 functions return indices of elements of its right argument in ascending or descending order. DATA \u2190 20 19 21 22 \u234b DATA 2 1 3 4 DATA [ \u234b DATA ] 19 20 21 22 \u2352 DATA 4 3 1 2 DATA [ \u2352 DATA ] 22 21 20 19","title":"Order from chaos"},{"location":"course/ch4/part5/","text":"I'm in Spain without the \"a\" This part will cover Rotations Reflections Transpose The dyadic \u233d \u2296 rotate functions rotate an array by an amount specific by the left argument, around a specific axis. 3 \u233d \u00a8 'hotbloods' 'mentally' 'outbreak' 'clean' 'kyoto' bloodshot tallymen breakout ancle tokyo Another example: SAD_EMOTICONS \u2190 '):' ':c' ']:' ')-:' 'D:' '>:(' ':/' ':x' ':|' Notice that some of the sad emoticons can be turned into happy emoticons by reflecting the emoticon vertically, turning the frown upside down! The monadic \u233d \u2296 reverse functions reflect a vector along the horizontal or vertical directions. \u233d '):' : ) \u233d SAD_EMOTICONS : | : x : / > : ( D : ) - : ] : : c ) : Notice that reversing the array of sad emoticons did not reverse the emoticons themselves; to apply the reverse function to each element of the sad emoticons array, the each \u00a8 operator can be used. The each \u00a8 operator applies a function to every scalar element of its right argument. \u233d \u00a8 SAD_EMOTICONS : ) c : : ] : - ) : D ( : > / : x : | :","title":"4.5 - I'm in Spain without the \"a\""},{"location":"course/ch4/part5/#im-in-spain-without-the-a","text":"This part will cover Rotations Reflections Transpose The dyadic \u233d \u2296 rotate functions rotate an array by an amount specific by the left argument, around a specific axis. 3 \u233d \u00a8 'hotbloods' 'mentally' 'outbreak' 'clean' 'kyoto' bloodshot tallymen breakout ancle tokyo Another example: SAD_EMOTICONS \u2190 '):' ':c' ']:' ')-:' 'D:' '>:(' ':/' ':x' ':|' Notice that some of the sad emoticons can be turned into happy emoticons by reflecting the emoticon vertically, turning the frown upside down! The monadic \u233d \u2296 reverse functions reflect a vector along the horizontal or vertical directions. \u233d '):' : ) \u233d SAD_EMOTICONS : | : x : / > : ( D : ) - : ] : : c ) : Notice that reversing the array of sad emoticons did not reverse the emoticons themselves; to apply the reverse function to each element of the sad emoticons array, the each \u00a8 operator can be used. The each \u00a8 operator applies a function to every scalar element of its right argument. \u233d \u00a8 SAD_EMOTICONS : ) c : : ] : - ) : D ( : > / : x : | :","title":"I'm in Spain without the \"a\""},{"location":"course/ch4/part6/","text":"Searching This part will cover Different search methods on 1D arrays: Iota Iota underbar Epsilon Epsilon underbar Indices of The most used searching function is the dyadic indices of , which shares its symbol with the index function \u2373 . Typing the indices of function \u2373 Prefix method: PREFIX i Tab method: i i Tab If you want a simple way to find a value in an array, \u2373 is your guy. On the left, you give it an array to search in; on the right, you give it an array of values to find. The function will output the indices where your values are located. 3 5 2 1 4 \u2373 2 3 'asdfghjkl' \u2373 'agl' 1 5 9 What do you think happens when you try to search for a value that doesn't exist? Pick your guess: 0 Big number VALUE ERROR LENGTH ERROR If you picked any of the errors, then you think APL is too mean. After all, why punish the programmer when they are just trying to search for a value? No, there's a way better way of handling this issue. If you picked 0 , you're closer, but still a little off. It could work if zero was never a valid index; however, \u2373 is index-sensitive. Look: 'asdfghjkl' \u2373 'agl' 1 5 9 \u2395IO \u2190 0 'asdfghjkl' \u2373 'agl' 0 4 8 \u2395IO \u2190 1 Instead of returning zero (or a negative number), the APL developers decided to be clever and return a number that's one larger than the length of the array. 'asdfghjkl' \u2373 'agl' 1 5 9 'asdfghjkl' \u2373 'agl\u00f6' 1 5 9 10 This is actually super useful! Let's say we have two vectors: STUDENTS contains student names, and GPAS contains their grades. For example, STUDENTS \u2190 'ALICE' 'BOB' 'CHARLIE' 'DAVID' 'EEVA' GPAS \u2190 5.0 3.4 1.0 4.2 4.1 Say we wanted to get to find David's and Charlie's GPAs from the list, but we didn't know what position they were in. To do this, we can use iota to find their indices, and then use them along with the brackets [] to get the GPAs from the list: STUDENTS \u2373 'DAVID' 'CHARLIE' 4 3 GPAS [ STUDENTS \u2373 'DAVID' 'CHARLIE' ] 4.2 1 Then, if we try to find a user that doesn't exist, we will get an index that's one larger than the largest item. So, we can just add one more \"default\" item to the GPA list and use that as a \"not found\" element! GPAS , 'X' 5 3.4 1 4.2 4.1 X \u2374 GPAS , 'X' 6 ( GPAS , 'X' ) [ STUDENTS \u2373 'DAVID' 'CHARLIE' ] 4.2 1 ( GPAS , 'X' ) [ STUDENTS \u2373 'DAVID' 'CHARLIE' 'JULIET' ] 4.2 1 X ( GPAS , 'X' ) [ STUDENTS \u2373 'DAVID' 'CHARLIE' 'JULIET' 'BOB' ] 4.2 1 X 3.4 ( GPAS , 'X' ) [ STUDENTS \u2373 'DAVID' 'CHARLIE' 'JULIET' 'BOB' 'ROMEO' ] 4.2 1 X 3.4 X Handy! Here's another APL idiom that you should remember: changing one value to another. NUMS \u2190 9 4 1 2 0 3 NUMS 9 4 1 2 0 3 NUMS [ NUMS \u2373 4 ] 4 NUMS [ NUMS \u2373 4 ] \u2190 6 NUMS 9 6 1 2 0 3 So, using NUMS[NUMS\u23734] just gets you the number you were searching for ( 4 ), but adding an assignment \u2190 lets you reset whatever was in the position. Even though iota is handy, it's not perfect. Let's say our array had repeats in it, and we wanted to find them all... LETTERS \u2190 'abcdefgaaahijkl' LETTERS abcdefgaaahijkl LETTERS \u2373 'a' 1 LETTERS \u2373 'aa' 1 1 LETTERS \u2373 'aaa' 1 1 1 Nope. Iota just finds the first occurrence of 'a' and stops. We'll learn how to find more than just one value later. Here's a funny error that can happen with \u2373 : 10 \u2373 10 11 12 RANK ERROR 10 \u2373 10 11 12 \u2227 You could think that this should return 1 2 2 (the first element, and two elements not in the list). But actually, the number 10 is a scalar and not an array! So you can't search inside it. Rip. Member of Dyadic iota \u2373 answers the question \"where is it?\"; dyadic epsilon \u220a answers the question \"is it?\" 4 \u220a 1 3 4 5 6 1 4 \u220a 1 3 2 5 6 0 4 3 \u220a 1 3 2 5 6 0 1 4 3 4 3 \u220a 1 3 2 5 6 0 1 0 1 It gives a simple yes/no answer, telling you whether the value is in the array or not. Typing the member of function \u220a Prefix method: PREFIX e Tab method: e e Tab Watch out! Iota \u2373 takes in the array to search on the left and the value(s) to find on the right . Epsilon \u220a takes in the array to search on the right and the value(s) to find on the left . Be careful! This one's farily straightforward. Where Let's try answering the question \"where are all the values?\" instead of the more boring question \"where is the first value?\" For this example, we'll use the vector PRICES , which has a bunch of prices of items. First, let's try finding where all the items are which have a price of 40 . Simple \u2373 won't cut the job, since we saw earlier that it only found the first element. Let's be more creative: first, we want to find all the positions that have the number 40... PRICES \u2190 12 39 40 10 55 40 73 40 = PRICES 0 0 1 0 0 1 0 Then, we want to convert these values to indices. A good strategy is to: Get the length of the array ( \u2374 ) Get a vector of indices of the same length ( \u2373 ) Use the bit mask 0 0 1 0 0 1 0 to select the indices ( / ) Step-by-step: 40 = PRICES 0 0 1 0 0 1 0 \u2374 PRICES 7 \u2373\u2374 PRICES 1 2 3 4 5 6 7 ( 40 = PRICES ) / \u2373\u2374 PRICES 3 6 Slashiotarho Look at the three symbols: slash, iota, and rho. This way of finding where values are is so useful that it has its own name: SLASHIOTARHO ! Chant it to yourself before bed and remember it well. Slashiotarho is also more powerful than the dyadic \u2373 function we looked at earlier, since we can use it to find any condition we like. For example, if we wanted to find all prices that are at most 40, we can just change one symbol: PRICES 12 39 40 10 55 40 73 ( 40 = PRICES ) / \u2373\u2374 PRICES 3 6 ( 40 \u2265 PRICES ) / \u2373\u2374 PRICES 1 2 3 4 6 Slashiotarho is such a useful function, that the APL developers decided to add a whole new symbol: the SUPER-IOTA (officially called \"iota underbar\") that can be used to perform the \"where\" function. This is a monadic function, which takes in a list of ones and zeros on the right and returns the location of all the ones. Let's compare slashiotarho with the where function: PRICES 12 39 40 10 55 40 73 40 = PRICES 0 0 1 0 0 1 0 ( 40 = PRICES ) / \u2373\u2374 PRICES 3 6 \u2378 40 = PRICES 3 6 40 \u2265 PRICES 1 1 1 1 0 1 0 ( 40 \u2265 PRICES ) / \u2373\u2374 PRICES 1 2 3 4 6 \u2378 40 \u2265 PRICES 1 2 3 4 6 Typing the where function \u2378 Prefix method: PREFIX I Tab method: i _ Tab It's a little more compact! Feel free to use it when needed. Find Last one for this part! All of the finding operations that we looked at so far have been to find one element in an array. APL also has a function to find subarrays : the dyadic find function, which is written using the epsilon-underbar symbol \u2377 . Typing the find function \u2377 Prefix method: PREFIX E Tab method: e _ Tab SENTENCE \u2190 'Hello, this is elsa from melbourne' 'el' \u2377 SENTENCE 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 In this example, the ones are where each 'el' starts in the long sentence. You can also do this with arrays of strings: ANIMALS \u2190 'cow' 'dog' 'horse' 'cow' 'cat' 'horse' 'cow' 'bat' 'horse' 'cow' \u2377 ANIMALS 0 0 1 0 0 1 0 0 These occurences can also overlap: 'ooo' \u2377 'meoooooooow meooow' 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 0","title":"4.6 - Searching"},{"location":"course/ch4/part6/#searching","text":"This part will cover Different search methods on 1D arrays: Iota Iota underbar Epsilon Epsilon underbar","title":"Searching"},{"location":"course/ch4/part6/#indices-of","text":"The most used searching function is the dyadic indices of , which shares its symbol with the index function \u2373 . Typing the indices of function \u2373 Prefix method: PREFIX i Tab method: i i Tab If you want a simple way to find a value in an array, \u2373 is your guy. On the left, you give it an array to search in; on the right, you give it an array of values to find. The function will output the indices where your values are located. 3 5 2 1 4 \u2373 2 3 'asdfghjkl' \u2373 'agl' 1 5 9 What do you think happens when you try to search for a value that doesn't exist? Pick your guess: 0 Big number VALUE ERROR LENGTH ERROR If you picked any of the errors, then you think APL is too mean. After all, why punish the programmer when they are just trying to search for a value? No, there's a way better way of handling this issue. If you picked 0 , you're closer, but still a little off. It could work if zero was never a valid index; however, \u2373 is index-sensitive. Look: 'asdfghjkl' \u2373 'agl' 1 5 9 \u2395IO \u2190 0 'asdfghjkl' \u2373 'agl' 0 4 8 \u2395IO \u2190 1 Instead of returning zero (or a negative number), the APL developers decided to be clever and return a number that's one larger than the length of the array. 'asdfghjkl' \u2373 'agl' 1 5 9 'asdfghjkl' \u2373 'agl\u00f6' 1 5 9 10 This is actually super useful! Let's say we have two vectors: STUDENTS contains student names, and GPAS contains their grades. For example, STUDENTS \u2190 'ALICE' 'BOB' 'CHARLIE' 'DAVID' 'EEVA' GPAS \u2190 5.0 3.4 1.0 4.2 4.1 Say we wanted to get to find David's and Charlie's GPAs from the list, but we didn't know what position they were in. To do this, we can use iota to find their indices, and then use them along with the brackets [] to get the GPAs from the list: STUDENTS \u2373 'DAVID' 'CHARLIE' 4 3 GPAS [ STUDENTS \u2373 'DAVID' 'CHARLIE' ] 4.2 1 Then, if we try to find a user that doesn't exist, we will get an index that's one larger than the largest item. So, we can just add one more \"default\" item to the GPA list and use that as a \"not found\" element! GPAS , 'X' 5 3.4 1 4.2 4.1 X \u2374 GPAS , 'X' 6 ( GPAS , 'X' ) [ STUDENTS \u2373 'DAVID' 'CHARLIE' ] 4.2 1 ( GPAS , 'X' ) [ STUDENTS \u2373 'DAVID' 'CHARLIE' 'JULIET' ] 4.2 1 X ( GPAS , 'X' ) [ STUDENTS \u2373 'DAVID' 'CHARLIE' 'JULIET' 'BOB' ] 4.2 1 X 3.4 ( GPAS , 'X' ) [ STUDENTS \u2373 'DAVID' 'CHARLIE' 'JULIET' 'BOB' 'ROMEO' ] 4.2 1 X 3.4 X Handy! Here's another APL idiom that you should remember: changing one value to another. NUMS \u2190 9 4 1 2 0 3 NUMS 9 4 1 2 0 3 NUMS [ NUMS \u2373 4 ] 4 NUMS [ NUMS \u2373 4 ] \u2190 6 NUMS 9 6 1 2 0 3 So, using NUMS[NUMS\u23734] just gets you the number you were searching for ( 4 ), but adding an assignment \u2190 lets you reset whatever was in the position. Even though iota is handy, it's not perfect. Let's say our array had repeats in it, and we wanted to find them all... LETTERS \u2190 'abcdefgaaahijkl' LETTERS abcdefgaaahijkl LETTERS \u2373 'a' 1 LETTERS \u2373 'aa' 1 1 LETTERS \u2373 'aaa' 1 1 1 Nope. Iota just finds the first occurrence of 'a' and stops. We'll learn how to find more than just one value later. Here's a funny error that can happen with \u2373 : 10 \u2373 10 11 12 RANK ERROR 10 \u2373 10 11 12 \u2227 You could think that this should return 1 2 2 (the first element, and two elements not in the list). But actually, the number 10 is a scalar and not an array! So you can't search inside it. Rip.","title":"Indices of"},{"location":"course/ch4/part6/#member-of","text":"Dyadic iota \u2373 answers the question \"where is it?\"; dyadic epsilon \u220a answers the question \"is it?\" 4 \u220a 1 3 4 5 6 1 4 \u220a 1 3 2 5 6 0 4 3 \u220a 1 3 2 5 6 0 1 4 3 4 3 \u220a 1 3 2 5 6 0 1 0 1 It gives a simple yes/no answer, telling you whether the value is in the array or not. Typing the member of function \u220a Prefix method: PREFIX e Tab method: e e Tab Watch out! Iota \u2373 takes in the array to search on the left and the value(s) to find on the right . Epsilon \u220a takes in the array to search on the right and the value(s) to find on the left . Be careful! This one's farily straightforward.","title":"Member of"},{"location":"course/ch4/part6/#where","text":"Let's try answering the question \"where are all the values?\" instead of the more boring question \"where is the first value?\" For this example, we'll use the vector PRICES , which has a bunch of prices of items. First, let's try finding where all the items are which have a price of 40 . Simple \u2373 won't cut the job, since we saw earlier that it only found the first element. Let's be more creative: first, we want to find all the positions that have the number 40... PRICES \u2190 12 39 40 10 55 40 73 40 = PRICES 0 0 1 0 0 1 0 Then, we want to convert these values to indices. A good strategy is to: Get the length of the array ( \u2374 ) Get a vector of indices of the same length ( \u2373 ) Use the bit mask 0 0 1 0 0 1 0 to select the indices ( / ) Step-by-step: 40 = PRICES 0 0 1 0 0 1 0 \u2374 PRICES 7 \u2373\u2374 PRICES 1 2 3 4 5 6 7 ( 40 = PRICES ) / \u2373\u2374 PRICES 3 6 Slashiotarho Look at the three symbols: slash, iota, and rho. This way of finding where values are is so useful that it has its own name: SLASHIOTARHO ! Chant it to yourself before bed and remember it well. Slashiotarho is also more powerful than the dyadic \u2373 function we looked at earlier, since we can use it to find any condition we like. For example, if we wanted to find all prices that are at most 40, we can just change one symbol: PRICES 12 39 40 10 55 40 73 ( 40 = PRICES ) / \u2373\u2374 PRICES 3 6 ( 40 \u2265 PRICES ) / \u2373\u2374 PRICES 1 2 3 4 6 Slashiotarho is such a useful function, that the APL developers decided to add a whole new symbol: the SUPER-IOTA (officially called \"iota underbar\") that can be used to perform the \"where\" function. This is a monadic function, which takes in a list of ones and zeros on the right and returns the location of all the ones. Let's compare slashiotarho with the where function: PRICES 12 39 40 10 55 40 73 40 = PRICES 0 0 1 0 0 1 0 ( 40 = PRICES ) / \u2373\u2374 PRICES 3 6 \u2378 40 = PRICES 3 6 40 \u2265 PRICES 1 1 1 1 0 1 0 ( 40 \u2265 PRICES ) / \u2373\u2374 PRICES 1 2 3 4 6 \u2378 40 \u2265 PRICES 1 2 3 4 6 Typing the where function \u2378 Prefix method: PREFIX I Tab method: i _ Tab It's a little more compact! Feel free to use it when needed.","title":"Where"},{"location":"course/ch4/part6/#find","text":"Last one for this part! All of the finding operations that we looked at so far have been to find one element in an array. APL also has a function to find subarrays : the dyadic find function, which is written using the epsilon-underbar symbol \u2377 . Typing the find function \u2377 Prefix method: PREFIX E Tab method: e _ Tab SENTENCE \u2190 'Hello, this is elsa from melbourne' 'el' \u2377 SENTENCE 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 In this example, the ones are where each 'el' starts in the long sentence. You can also do this with arrays of strings: ANIMALS \u2190 'cow' 'dog' 'horse' 'cow' 'cat' 'horse' 'cow' 'bat' 'horse' 'cow' \u2377 ANIMALS 0 0 1 0 0 1 0 0 These occurences can also overlap: 'ooo' \u2377 'meoooooooow meooow' 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 0","title":"Find"},{"location":"course/ch4/part7/","text":"Elements of set theory This part will cover Set operations: Union Intersection Unique Without Most of the functions introduced in the previous chapter can also be applied element-wise to vectors, as was described in Chapter 2. There are certain other functions that only make sense when dealing with vector arguments; for example, the usual set operations (Intersection, Union, and Difference) only make sense when dealing with collections of elements, such as vectors. Take the following vectors of emoticons HAPPY_EMOTICONS \u2190 ':)' ':-)' ':D' ':]' ':o)' '8)' ':3' 'c:' ':x' SAD_EMOTICONS \u2190 '):' ':c' ']:' ')-:' 'D:' '>:(' ':/' ':x' ':|' The symbol \u222a acts dyadically as Set Union. HAPPY_EMOTICONS \u222a SAD_EMOTICONS : ) : - ) : D : ] : o ) 8 ) : 3 c : : x ) : : c ] : ) - : D : > : ( : / : | Notice how the element \u2018:x\u2019 only appears once, where it would appear twice if we were to use the dyadic catenate , operator introduced in Chapter 2. HAPPY_EMOTICONS , SAD_EMOTICONS : ) : - ) : D : ] : o ) 8 ) : 3 c : : x ) : : c ] : ) - : D : : x > : ( : / : | Similarly, the symbol \u2229 acts dyadically as the Set Intersection operation. HAPPY_EMOTICONS \u2229 SAD_EMOTICONS : x The symbol ~, which monadically refers to boolean NOT, is dyadically the Set Difference operation. HAPPY_EMOTICONS ~ SAD_EMOTICONS : ) : - ) : D : ] : o ) 8 ) : 3 c : \u235d Notice the ':x' emoticon is gone Monadically, the symbol \u222a acts as the Unique operator, removing duplicate entries in a vector (and duplicate rows or columns in a matrix, more on axis operations in Chapter 6). \u222a HAPPY_EMOTICONS , SAD_EMOTICONS : ) : - ) : D : ] : o ) 8 ) : 3 c : : x ) : : c ] : ) - : D : > : ( : / : | \u235d Notice the ':x' emoticon only appears once Comparing this result to the one obtained using the dyadic union \u222a function, ( HAPPY_EMOTICONS \u222a SAD_EMOTICONS ) = \u222a HAPPY_EMOTICONS , SAD_EMOTICONS \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 1 1 \u2502 1 1 1 \u2502 1 1 \u2502 1 1 \u2502 1 1 1 \u2502 1 1 \u2502 1 1 \u2502 1 1 \u2502 1 1 \u2502 1 1 \u2502 1 1 \u2502 1 1 \u2502 1 1 1 \u2502 1 1 \u2502 1 1 1 \u2502 1 1 \u2502 1 1 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 This might seem like a strange result at first, but is actually the consequence of a very reasonable definition for equality of nested arrays. The dyadic equals function between arrays equates all scalars found in the arrays, not just the top-level elements. Recalling that a string in APL is an array of characters, the array of emoticons is an array of arrays of characters, which when equated to another array of emoticons, compares every character individually. The dyadic \u2261 match function can be used to compare entire arrays. ( HAPPY_EMOTICONS \u222a SAD_EMOTICONS ) \u2261 \u222a HAPPY_EMOTICONS , SAD_EMOTICONS 1","title":"4.7 - Elements of set theory"},{"location":"course/ch4/part7/#elements-of-set-theory","text":"This part will cover Set operations: Union Intersection Unique Without Most of the functions introduced in the previous chapter can also be applied element-wise to vectors, as was described in Chapter 2. There are certain other functions that only make sense when dealing with vector arguments; for example, the usual set operations (Intersection, Union, and Difference) only make sense when dealing with collections of elements, such as vectors. Take the following vectors of emoticons HAPPY_EMOTICONS \u2190 ':)' ':-)' ':D' ':]' ':o)' '8)' ':3' 'c:' ':x' SAD_EMOTICONS \u2190 '):' ':c' ']:' ')-:' 'D:' '>:(' ':/' ':x' ':|' The symbol \u222a acts dyadically as Set Union. HAPPY_EMOTICONS \u222a SAD_EMOTICONS : ) : - ) : D : ] : o ) 8 ) : 3 c : : x ) : : c ] : ) - : D : > : ( : / : | Notice how the element \u2018:x\u2019 only appears once, where it would appear twice if we were to use the dyadic catenate , operator introduced in Chapter 2. HAPPY_EMOTICONS , SAD_EMOTICONS : ) : - ) : D : ] : o ) 8 ) : 3 c : : x ) : : c ] : ) - : D : : x > : ( : / : | Similarly, the symbol \u2229 acts dyadically as the Set Intersection operation. HAPPY_EMOTICONS \u2229 SAD_EMOTICONS : x The symbol ~, which monadically refers to boolean NOT, is dyadically the Set Difference operation. HAPPY_EMOTICONS ~ SAD_EMOTICONS : ) : - ) : D : ] : o ) 8 ) : 3 c : \u235d Notice the ':x' emoticon is gone Monadically, the symbol \u222a acts as the Unique operator, removing duplicate entries in a vector (and duplicate rows or columns in a matrix, more on axis operations in Chapter 6). \u222a HAPPY_EMOTICONS , SAD_EMOTICONS : ) : - ) : D : ] : o ) 8 ) : 3 c : : x ) : : c ] : ) - : D : > : ( : / : | \u235d Notice the ':x' emoticon only appears once Comparing this result to the one obtained using the dyadic union \u222a function, ( HAPPY_EMOTICONS \u222a SAD_EMOTICONS ) = \u222a HAPPY_EMOTICONS , SAD_EMOTICONS \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 1 1 \u2502 1 1 1 \u2502 1 1 \u2502 1 1 \u2502 1 1 1 \u2502 1 1 \u2502 1 1 \u2502 1 1 \u2502 1 1 \u2502 1 1 \u2502 1 1 \u2502 1 1 \u2502 1 1 1 \u2502 1 1 \u2502 1 1 1 \u2502 1 1 \u2502 1 1 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 This might seem like a strange result at first, but is actually the consequence of a very reasonable definition for equality of nested arrays. The dyadic equals function between arrays equates all scalars found in the arrays, not just the top-level elements. Recalling that a string in APL is an array of characters, the array of emoticons is an array of arrays of characters, which when equated to another array of emoticons, compares every character individually. The dyadic \u2261 match function can be used to compare entire arrays. ( HAPPY_EMOTICONS \u222a SAD_EMOTICONS ) \u2261 \u222a HAPPY_EMOTICONS , SAD_EMOTICONS 1","title":"Elements of set theory"},{"location":"course/ch4/read/","text":"Read exercises For each of the following exercises, try to figure out what the input will produce in the TryAPL terminal. Check your answers by opening the \"Output\" tab. If you think an error will occur, try to predict which error it will be and where the arrow will point to. The exercises are not checked or graded: use them to check your knowledge!","title":"4.R - Read exercises"},{"location":"course/ch4/read/#read-exercises","text":"For each of the following exercises, try to figure out what the input will produce in the TryAPL terminal. Check your answers by opening the \"Output\" tab. If you think an error will occur, try to predict which error it will be and where the arrow will point to. The exercises are not checked or graded: use them to check your knowledge!","title":"Read exercises"},{"location":"course/ch4/summary/","text":"Function index Here is a table of symbols we have used and how to type them in TryAPL. It might be useful to review this page as you are doing the read and write exercises in the next sections. New functions Symbol Name Function Key combination Old functions Symbol Name Function Key combination + Plus Addition + - Minus Subtraction - \u00d7 Times Multiplication PREFIX - \u00f7 Divide Division PREFIX = * Power Exponentiation * \u00af Negative sign Negation of a number PREFIX 2 \u235d Lamp Comment PREFIX , \u2190 Assignment operator Assigning variables < - Tab \u2395 Quad Printing PREFIX L","title":"4.S - Summary"},{"location":"course/ch4/summary/#function-index","text":"Here is a table of symbols we have used and how to type them in TryAPL. It might be useful to review this page as you are doing the read and write exercises in the next sections.","title":"Function index"},{"location":"course/ch4/summary/#new-functions","text":"Symbol Name Function Key combination","title":"New functions"},{"location":"course/ch4/summary/#old-functions","text":"Symbol Name Function Key combination + Plus Addition + - Minus Subtraction - \u00d7 Times Multiplication PREFIX - \u00f7 Divide Division PREFIX = * Power Exponentiation * \u00af Negative sign Negation of a number PREFIX 2 \u235d Lamp Comment PREFIX , \u2190 Assignment operator Assigning variables < - Tab \u2395 Quad Printing PREFIX L","title":"Old functions"},{"location":"course/ch4/write/","text":"Write exercises Submit APL code for the following exercises. Your submissions are graded using TMC. Make sure to log in to be able to submit your work! Remember, you can test out ideas and develop you solution at TryAPL before submitting it here. You can submit as many solutions as you like. If you submit a correct solution at least once, you will receive points on the TMC server and be able to see the model solution. If the write problem is red, it is unsolved. If it it green, you have solved it and received points for it on the server.","title":"4.W - Write exercises"},{"location":"course/ch4/write/#write-exercises","text":"Submit APL code for the following exercises. Your submissions are graded using TMC. Make sure to log in to be able to submit your work! Remember, you can test out ideas and develop you solution at TryAPL before submitting it here. You can submit as many solutions as you like. If you submit a correct solution at least once, you will receive points on the TMC server and be able to see the model solution. If the write problem is red, it is unsolved. If it it green, you have solved it and received points for it on the server.","title":"Write exercises"},{"location":"course/ch5/bonus/","text":"Bonus content: Computer graphics This part is optional This part is considered to be bonus content. It contains some more advanced topics that are not covered in the main course. It can also give some examples of functions and topics that are introuced later in the course. There are no exercises related to this content. Feel free to skim or skip this section for now, and return to it later! Did you know APL was used to make graphics for the original TRON movie? Judson Rosebush, one of the founders of the computer animation studio Digital Effects, developed \"Visions\"; a library of APL functions intended for generating computer graphics. It allowed the manipulation of polygons in three-dimensional space and compute perspective transformations. The company created several animated sequences for the movie, including animating the polyhedral character \"Bit\" who could only convey one bit of information, answering yes or no questions. Here's a quote from Jeffrey Kleinster, one of the co-founders of Digital Effects, in an interview published in \"CG 101\": \"Our original setup was a 1200-baud modem connection to an Amdahl V6 running A Programming language (APL) in Bethesda, Maryland, using a Tektronix display to preview wireframes. (Polygons refreshed at one per second\u2014that's one polygon per second!)\u2026\" In this section, we will write our own ray marcher to render out 3D environments entirely in APL. The advantages of an array-based language for computer graphics will be immediately seen. In very simple terms, light rays travel from light sources, potentially reflecting off of surfaces, some of which eventually reach light detectors. For example, when admiring a nice forest view, rays of light from the sun get absorbed and emitted at different frequencies by leaves, some of which then make their way to your retina. The only rays of light that affect the final image are the ones which finally reach detectors. For the purposes of computation, light rays are usually traced from from detectors to the sources. This is entirely equivalent to tracing light from sources to detectors, as long as the assumptions of geometric optics hold, which are almost universally assumed in computer graphics. The procedure we will use is as follows. We place a camera at a certain position relative to a 3D environment, and send out rays from the camera for every pixel in the final rendered image in the direction of that pixel. We then calculate the intersection of each of our rays with the environment, and get the directions from the points to the light source of our scene. We finally calculate the shading for the specific points of the environment, by comparing the vector orthogonal to the surface at that point, the normal vector, to the direction of the light source. We will ignore lighting falloff and shadows in our rendering for simplicity. For the first step, we create a vector called camera which stores the camera position. We refer to the first coordinate as the x coordinate, the second as the y coordinate, and the third as the z coordinate. We imagine the camera is facing the positive z direction, towards (0 0 1). camera \u2190 0 0 \u00af10 We then create an array to hold pixel coordinates, in this case a 300\u00d7300 image. \u2373 10 10 \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 1 \u2502 1 2 \u2502 1 3 \u2502 1 4 \u2502 1 5 \u2502 1 6 \u2502 1 7 \u2502 1 8 \u2502 1 9 \u2502 1 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 2 1 \u2502 2 2 \u2502 2 3 \u2502 2 4 \u2502 2 5 \u2502 2 6 \u2502 2 7 \u2502 2 8 \u2502 2 9 \u2502 2 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 3 1 \u2502 3 2 \u2502 3 3 \u2502 3 4 \u2502 3 5 \u2502 3 6 \u2502 3 7 \u2502 3 8 \u2502 3 9 \u2502 3 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 4 1 \u2502 4 2 \u2502 4 3 \u2502 4 4 \u2502 4 5 \u2502 4 6 \u2502 4 7 \u2502 4 8 \u2502 4 9 \u2502 4 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 5 1 \u2502 5 2 \u2502 5 3 \u2502 5 4 \u2502 5 5 \u2502 5 6 \u2502 5 7 \u2502 5 8 \u2502 5 9 \u2502 5 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 6 1 \u2502 6 2 \u2502 6 3 \u2502 6 4 \u2502 6 5 \u2502 6 6 \u2502 6 7 \u2502 6 8 \u2502 6 9 \u2502 6 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 7 1 \u2502 7 2 \u2502 7 3 \u2502 7 4 \u2502 7 5 \u2502 7 6 \u2502 7 7 \u2502 7 8 \u2502 7 9 \u2502 7 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 8 1 \u2502 8 2 \u2502 8 3 \u2502 8 4 \u2502 8 5 \u2502 8 6 \u2502 8 7 \u2502 8 8 \u2502 8 9 \u2502 8 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 9 1 \u2502 9 2 \u2502 9 3 \u2502 9 4 \u2502 9 5 \u2502 9 6 \u2502 9 7 \u2502 9 8 \u2502 9 9 \u2502 9 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 10 1 \u2502 10 2 \u2502 10 3 \u2502 10 4 \u2502 10 5 \u2502 10 6 \u2502 10 7 \u2502 10 8 \u2502 10 9 \u2502 10 10 \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 pxl_coords \u2190 \u2373 300 300 If we picture the image as being in front of the camera, with the camera facing the center of the image, we divide the values by the width/height, and shift them so that the vector 0 0 is at the center. ( \u2373 5 5 ) \u00f7 5 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0.2 0.2 \u2502 0.2 0.4 \u2502 0.2 0.6 \u2502 0.2 0.8 \u2502 0.2 1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0.4 0.2 \u2502 0.4 0.4 \u2502 0.4 0.6 \u2502 0.4 0.8 \u2502 0.4 1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0.6 0.2 \u2502 0.6 0.4 \u2502 0.6 0.6 \u2502 0.6 0.8 \u2502 0.6 1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0.8 0.2 \u2502 0.8 0.4 \u2502 0.8 0.6 \u2502 0.8 0.8 \u2502 0.8 1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 0.2 \u2502 1 0.4 \u2502 1 0.6 \u2502 1 0.8 \u2502 1 1 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 (( \u2373 5 5 ) \u00f7 5 ) -\u2282 0.6 0.6 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u00af0.4 \u00af0.4 \u2502 \u00af0.4 \u00af0.2 \u2502 \u00af0.4 0 \u2502 \u00af0.4 0.2 \u2502 \u00af0.4 0.4 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u00af0.2 \u00af0.4 \u2502 \u00af0.2 \u00af0.2 \u2502 \u00af0.2 0 \u2502 \u00af0.2 0.2 \u2502 \u00af0.2 0.4 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 \u00af0.4 \u2502 0 \u00af0.2 \u2502 0 0 \u2502 0 0.2 \u2502 0 0.4 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0.2 \u00af0.4 \u2502 0.2 \u00af0.2 \u2502 0.2 0 \u2502 0.2 0.2 \u2502 0.2 0.4 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0.4 \u00af0.4 \u2502 0.4 \u00af0.2 \u2502 0.4 0 \u2502 0.4 0.2 \u2502 0.4 0.4 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 pxl_directions \u2190 ( pxl_coords \u00f7\u2262 pxl_coords ) -\u2282 0.6 0.6 If we picture the image as being in front of the camera, with the camera facing the center of the image, we divide the values by the width/height, and shift them so that the vector 0 0 is at the center. , \u2218 1 \u00a8 ((( \u2373 5 5 ) \u00f7 5 ) -\u2282 0.6 0.6 ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u00af0.4 \u00af0.4 1 \u2502 \u00af0.4 \u00af0.2 1 \u2502 \u00af0.4 0 1 \u2502 \u00af0.4 0.2 1 \u2502 \u00af0.4 0.4 1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u00af0.2 \u00af0.4 1 \u2502 \u00af0.2 \u00af0.2 1 \u2502 \u00af0.2 0 1 \u2502 \u00af0.2 0.2 1 \u2502 \u00af0.2 0.4 1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 \u00af0.4 1 \u2502 0 \u00af0.2 1 \u2502 0 0 1 \u2502 0 0.2 1 \u2502 0 0.4 1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0.2 \u00af0.4 1 \u2502 0.2 \u00af0.2 1 \u2502 0.2 0 1 \u2502 0.2 0.2 1 \u2502 0.2 0.4 1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0.4 \u00af0.4 1 \u2502 0.4 \u00af0.2 1 \u2502 0.4 0 1 \u2502 0.4 0.2 1 \u2502 0.4 0.4 1 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 pxl_directions \u2190 , \u2218 1 \u00a8 pxl_directions Where here, the each \u00a8 operator is used to apply the function (,\u22181) to each element of the array. Remember, (,\u22181) is binding the value 1 to the function (,), which means (,\u22181)x is the same as (x,1). Next, we have to calculate the intersection of our rays with the environment. One way is to do this is to keep moving along our rays in small steps until we are close enough to an object in the environment, which we detect using a function that returns the distance to the nearest object. This function should also return negative values for being inside the object, this function is usually called a signed distance function. A more efficient solution is to use this distance function to move along our rays by the distance to the nearest object, guaranteeing first that we do not accidentally move beyond the nearest object while moving along our rays, and second that we approach these objects as quickly as possible. This approach is called \"sphere tracing\". Teadrinker , Visualization of SDF ray marching algorithm , CC BY-SA 4.0 We first setup the environment. The function for getting the distance between two points \u237a and \u2375 in 3D space can be obtained using the Pythagorean theorem: dist \u2190 { 0.5 * \u2368 + / ( \u237a - \u2375 ) * 2 } 1 2 3 dist 4 6 3 5 The signed distance function for a sphere is immediate from the definition of a sphere as the set of points a distance R away from some center point C. sphere \u2190 { \u2375 [ 3 ] - \u2368 \u2375 [ 1 ] dist \u2375 [ 2 ] } R \u2190 2 C \u2190 0 0 0 P \u2190 0 0 4 sphere P C R 2 P \u2190 0 3 4 sphere P C R 3 Defining our environment as a sphere at the origin, we define the distance function for the environment. env \u2190 { C \u2190 0 0 0 \u22c4 R \u2190 2 \u22c4 sphere \u2375 C R } P \u2190 0 3 4 env P 3 Let\u2019s define the other functions we need and leave the marching function for last. When a point on an object is hit by a ray, the color of that point needs to be calculated in order to make it into the final image. The main insight is that, at every point on the surface of an object, the lighting at that point depends on the angle between the light ray and the surface. For example, if the light ray hits the surface directly, so that it is parallel to the normal at that point, that point will be at the maximum brightness compared to points where the light ray does not hit exactly. If the light ray is perpendicular or makes a negative angle with the surface, then that part of the object is obscured. We first normalise the vectors then take their dot product, this gives us the cosine of the angle between the two. Mathematically, We will use the cosine of the angle for shading, instead of using the angle explicitly. length \u2190 0 \u2218 dist normalize \u2190 \u22a2\u00f7 length normalize 3 4 0 0.6 0.8 0 The last function we will need is one which returns the normal to the environment at some point. Consider a point on the sphere. Intuitively, the vector orthogonal to the sphere will be the direction which makes the distance to the sphere increase the fastest, since every other direction either takes us towards the center of the sphere or away from the sphere at a slower rate We can construct this vector by calculating how much the distance function changes with a small variation in the x, y, and z directions, and normalizing the resulting vector. Small variations are needed so that we only consider points close to the surface point. In vector analysis terms, we are calculating the gradient of the distance function at that point. small \u2190 0.0001 0 0 P \u2190 2 0 0 \u0394env_x \u2190 ( env ( P + small )) - env ( P - small ) \u0394env_x 0.0002 We can use the rotate \u233d operator to make the small vector in the y and z direction too. 1 \u233d small 0 0 0.0001 ( \u233d \u2218 ( 0.0001 0 0 )) \u00a8 3 2 1 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0.0001 0 0 \u2502 0 0.0001 0 \u2502 0 0 0.0001 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u233d\u2373 3 3 2 1 ( \u233d \u2218 small ) \u00a8 \u233d\u2373 3 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0.0001 0 0 \u2502 0 0.0001 0 \u2502 0 0 0.0001 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 P (( env + ) - ( env - )) \u2368 small 0.0002 P (( env + ) - ( env - )) \u2368 (( \u233d \u2218 ( 0.0001 0 0 )) \u00a8 \u233d\u2373 3 ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0.0002 0 0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2283 P (( env + ) - ( env - )) \u2368 (( \u233d \u2218 ( 0.0001 0 0 )) \u00a8 \u233d\u2373 3 ) 0.0002 0 0 norm \u2190 { normalize \u2283 \u2375 (( env + ) - ( env - )) \u2368 (( \u233d \u2218 ( 0.0001 0 0 )) \u00a8 \u233d\u2373 3 ) } norm P 1 0 0 Finally, we are now ready to write the ray marching function. The marching function should take the camera\u2019s initial position, and move it along a ray according to the distance function for either a maximum number of marches or a point is hit, and for the latter return the dot product of the normal at that point with the vector from that point to the light source. march \u2190 ( { cur_pos \u2190 \u2283 \u2375 \u22c4 ray \u2190 2 \u2283 \u2375 \u22c4 i \u2190 3 \u2283 \u2375 \u22c4 cur_pos \u2190 cur_pos + ( env cur_pos ) \u00d7 ray \u22c4 ( env cur_pos ) < 0.0001 : 0 \u2308 ( norm cur_pos )( + . \u00d7 )( normalize cur_pos - light ) \u22c4 cur_pos ray ( i + 1 ) } \u2363 { ( 1 =\u2262 \u237a ) \u2228 (( \u237a , 0 0 ) [ 3 ] > 32 ) } ) camera \u2190 0 0 \u00af10 ray \u2190 0 0 1 light \u2190 2 3 4 march camera ray 0 0.8571428571 march camera ( 0 1 0 ) 0 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2510 \u2502 0 3.969795284E10 \u00af10 \u2502 0 1 0 \u2502 33 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2518 Let\u2019s go through the above code step by step. The function takes in a three element nested array, the first being the camera position, the second is the ray to march along, and the third is a counter variable. It starts from the camera position and adds to it the distance to the environment times the ray. If the distance to the environment is less than a small value, then it returns the dot product of the vector to the light source with the normal to the environment at that point, or zero, depending on which is greater. If not, then it returns the current position, ray, and counter incremented by one. The power operator f\u2363g allows us to evaluate the function f until the function g returns a value of 1. The function g takes in the previous return value of f, and the current return value of f, as left and right arguments. Here, the march function keeps moving the current position along the ray until either the result is a single value, that is, if the if statement in the march function returns either 0 or the dot product, by checking the number of elements (1=\u2262\u237a), or if the number of iterations exceeds 32, \u237a[3]>32. Wrapping the march function in a function that returns zero if the result is not a single number, we apply the function to the pixel coordinates and store the result. color \u2190 { i \u2190 march camera \u2375 0 \u22c4 1 =\u2262 i : i \u22c4 0 } color ( 0 1 0 ) 0 color \u00a8 ( , \u2218 1 \u00a8 (( \u2373 5 5 ) \u00f7 5 ) -\u2282 0.6 0.6 ) 0 0 0 0 0 0 0 0.7893982995 0 0 0 0.8900597217 0.8571428571 0.145402276 0 0 0 0.3004347993 0 0 0 0 0 0 0 image \u2190 color \u00a8 pxl_directions This calculation might take a couple seconds. To actually see our rendered image, we need to export our array as an image file. We will be using the very simple PPM file format, in which images are plain text files. The header of a PPM file consists of a format indicator \"P3\", the size of the image (5 5), the maximum value for each color (255), and the colors in RGB format. Using the \u2395NPUT function with the append (2) argument, we write to a file called \"image.ppm\". We use the encode \u2355 operator to convert between numerical arrays to character arrays. 'P3' \u2395NPUT 'image.ppm' 2 ( \u2355\u2374 image ) \u2395NPUT 'image.ppm' 2 '255' \u2395NPUT 'image.ppm' 2 test \u2190 color \u00a8 ( , \u2218 1 \u00a8 (( \u2373 5 5 ) \u00f7 5 ) -\u2282 0.6 0.6 ) test 0 0 0 0 0 0 0 0.7893982995 0 0 0 0.8900597217 0.8571428571 0.145402276 0 0 0 0.3004347993 0 0 0 0 0 0 0 test \u2190 \u2308 \u00a8 255 \u00d7 ( test ) test 0 0 0 0 0 0 0 202 0 0 0 227 219 38 0 0 0 77 0 0 0 0 0 0 0 , \u2218 ( 0 0 ) \u00a8 test \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 0 0 \u2502 0 0 0 \u2502 202 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 0 0 \u2502 227 0 0 \u2502 219 0 0 \u2502 38 0 0 \u2502 0 0 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 0 0 \u2502 0 0 0 \u2502 77 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 , / test \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0 0 0 0 0 \u2502 0 0 202 0 0 \u2502 0 227 219 38 0 \u2502 0 0 77 0 0 \u2502 0 0 0 0 0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 image \u2190 , \u2218 ( 0 0 ) \u00a8 ( \u2308 \u00a8 255 \u00d7 image ) (( 'image.ppm' 2 ) \u2218 ( \u2395NPUT \u2368 ) \u2355 ) \u00a8 , / image Opening the file in a compatible program, such as the GIMP image editor, we see the beautifully shaded sphere. By changing the distance function of the world, it is possible to render more complex objects. Take for example, the distance function for a torus. torus \u2190 { r \u2190 \u237a \u22c4 p \u2190 \u2375 \u22c4 q \u2190 ( r [ 1 ] - \u2368 length p [ 1 ] , p [ 3 ] ) , p [ 2 ] \u22c4 r [ 2 ] - \u2368 length q } env \u2190 { 1 0.5 torus \u2375 } There are also ways of combining distance functions to create more complex scenes, such as taking the minimum of two distance functions. However, we will leave the creation of more complex 3D scenes to the interested reader.","title":"5.B - Computer graphics"},{"location":"course/ch5/bonus/#bonus-content-computer-graphics","text":"This part is optional This part is considered to be bonus content. It contains some more advanced topics that are not covered in the main course. It can also give some examples of functions and topics that are introuced later in the course. There are no exercises related to this content. Feel free to skim or skip this section for now, and return to it later! Did you know APL was used to make graphics for the original TRON movie? Judson Rosebush, one of the founders of the computer animation studio Digital Effects, developed \"Visions\"; a library of APL functions intended for generating computer graphics. It allowed the manipulation of polygons in three-dimensional space and compute perspective transformations. The company created several animated sequences for the movie, including animating the polyhedral character \"Bit\" who could only convey one bit of information, answering yes or no questions. Here's a quote from Jeffrey Kleinster, one of the co-founders of Digital Effects, in an interview published in \"CG 101\": \"Our original setup was a 1200-baud modem connection to an Amdahl V6 running A Programming language (APL) in Bethesda, Maryland, using a Tektronix display to preview wireframes. (Polygons refreshed at one per second\u2014that's one polygon per second!)\u2026\" In this section, we will write our own ray marcher to render out 3D environments entirely in APL. The advantages of an array-based language for computer graphics will be immediately seen. In very simple terms, light rays travel from light sources, potentially reflecting off of surfaces, some of which eventually reach light detectors. For example, when admiring a nice forest view, rays of light from the sun get absorbed and emitted at different frequencies by leaves, some of which then make their way to your retina. The only rays of light that affect the final image are the ones which finally reach detectors. For the purposes of computation, light rays are usually traced from from detectors to the sources. This is entirely equivalent to tracing light from sources to detectors, as long as the assumptions of geometric optics hold, which are almost universally assumed in computer graphics. The procedure we will use is as follows. We place a camera at a certain position relative to a 3D environment, and send out rays from the camera for every pixel in the final rendered image in the direction of that pixel. We then calculate the intersection of each of our rays with the environment, and get the directions from the points to the light source of our scene. We finally calculate the shading for the specific points of the environment, by comparing the vector orthogonal to the surface at that point, the normal vector, to the direction of the light source. We will ignore lighting falloff and shadows in our rendering for simplicity. For the first step, we create a vector called camera which stores the camera position. We refer to the first coordinate as the x coordinate, the second as the y coordinate, and the third as the z coordinate. We imagine the camera is facing the positive z direction, towards (0 0 1). camera \u2190 0 0 \u00af10 We then create an array to hold pixel coordinates, in this case a 300\u00d7300 image. \u2373 10 10 \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 1 \u2502 1 2 \u2502 1 3 \u2502 1 4 \u2502 1 5 \u2502 1 6 \u2502 1 7 \u2502 1 8 \u2502 1 9 \u2502 1 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 2 1 \u2502 2 2 \u2502 2 3 \u2502 2 4 \u2502 2 5 \u2502 2 6 \u2502 2 7 \u2502 2 8 \u2502 2 9 \u2502 2 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 3 1 \u2502 3 2 \u2502 3 3 \u2502 3 4 \u2502 3 5 \u2502 3 6 \u2502 3 7 \u2502 3 8 \u2502 3 9 \u2502 3 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 4 1 \u2502 4 2 \u2502 4 3 \u2502 4 4 \u2502 4 5 \u2502 4 6 \u2502 4 7 \u2502 4 8 \u2502 4 9 \u2502 4 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 5 1 \u2502 5 2 \u2502 5 3 \u2502 5 4 \u2502 5 5 \u2502 5 6 \u2502 5 7 \u2502 5 8 \u2502 5 9 \u2502 5 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 6 1 \u2502 6 2 \u2502 6 3 \u2502 6 4 \u2502 6 5 \u2502 6 6 \u2502 6 7 \u2502 6 8 \u2502 6 9 \u2502 6 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 7 1 \u2502 7 2 \u2502 7 3 \u2502 7 4 \u2502 7 5 \u2502 7 6 \u2502 7 7 \u2502 7 8 \u2502 7 9 \u2502 7 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 8 1 \u2502 8 2 \u2502 8 3 \u2502 8 4 \u2502 8 5 \u2502 8 6 \u2502 8 7 \u2502 8 8 \u2502 8 9 \u2502 8 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 9 1 \u2502 9 2 \u2502 9 3 \u2502 9 4 \u2502 9 5 \u2502 9 6 \u2502 9 7 \u2502 9 8 \u2502 9 9 \u2502 9 10 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 10 1 \u2502 10 2 \u2502 10 3 \u2502 10 4 \u2502 10 5 \u2502 10 6 \u2502 10 7 \u2502 10 8 \u2502 10 9 \u2502 10 10 \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 pxl_coords \u2190 \u2373 300 300 If we picture the image as being in front of the camera, with the camera facing the center of the image, we divide the values by the width/height, and shift them so that the vector 0 0 is at the center. ( \u2373 5 5 ) \u00f7 5 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0.2 0.2 \u2502 0.2 0.4 \u2502 0.2 0.6 \u2502 0.2 0.8 \u2502 0.2 1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0.4 0.2 \u2502 0.4 0.4 \u2502 0.4 0.6 \u2502 0.4 0.8 \u2502 0.4 1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0.6 0.2 \u2502 0.6 0.4 \u2502 0.6 0.6 \u2502 0.6 0.8 \u2502 0.6 1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0.8 0.2 \u2502 0.8 0.4 \u2502 0.8 0.6 \u2502 0.8 0.8 \u2502 0.8 1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 0.2 \u2502 1 0.4 \u2502 1 0.6 \u2502 1 0.8 \u2502 1 1 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 (( \u2373 5 5 ) \u00f7 5 ) -\u2282 0.6 0.6 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u00af0.4 \u00af0.4 \u2502 \u00af0.4 \u00af0.2 \u2502 \u00af0.4 0 \u2502 \u00af0.4 0.2 \u2502 \u00af0.4 0.4 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u00af0.2 \u00af0.4 \u2502 \u00af0.2 \u00af0.2 \u2502 \u00af0.2 0 \u2502 \u00af0.2 0.2 \u2502 \u00af0.2 0.4 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 \u00af0.4 \u2502 0 \u00af0.2 \u2502 0 0 \u2502 0 0.2 \u2502 0 0.4 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0.2 \u00af0.4 \u2502 0.2 \u00af0.2 \u2502 0.2 0 \u2502 0.2 0.2 \u2502 0.2 0.4 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0.4 \u00af0.4 \u2502 0.4 \u00af0.2 \u2502 0.4 0 \u2502 0.4 0.2 \u2502 0.4 0.4 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 pxl_directions \u2190 ( pxl_coords \u00f7\u2262 pxl_coords ) -\u2282 0.6 0.6 If we picture the image as being in front of the camera, with the camera facing the center of the image, we divide the values by the width/height, and shift them so that the vector 0 0 is at the center. , \u2218 1 \u00a8 ((( \u2373 5 5 ) \u00f7 5 ) -\u2282 0.6 0.6 ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u00af0.4 \u00af0.4 1 \u2502 \u00af0.4 \u00af0.2 1 \u2502 \u00af0.4 0 1 \u2502 \u00af0.4 0.2 1 \u2502 \u00af0.4 0.4 1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u00af0.2 \u00af0.4 1 \u2502 \u00af0.2 \u00af0.2 1 \u2502 \u00af0.2 0 1 \u2502 \u00af0.2 0.2 1 \u2502 \u00af0.2 0.4 1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 \u00af0.4 1 \u2502 0 \u00af0.2 1 \u2502 0 0 1 \u2502 0 0.2 1 \u2502 0 0.4 1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0.2 \u00af0.4 1 \u2502 0.2 \u00af0.2 1 \u2502 0.2 0 1 \u2502 0.2 0.2 1 \u2502 0.2 0.4 1 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0.4 \u00af0.4 1 \u2502 0.4 \u00af0.2 1 \u2502 0.4 0 1 \u2502 0.4 0.2 1 \u2502 0.4 0.4 1 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 pxl_directions \u2190 , \u2218 1 \u00a8 pxl_directions Where here, the each \u00a8 operator is used to apply the function (,\u22181) to each element of the array. Remember, (,\u22181) is binding the value 1 to the function (,), which means (,\u22181)x is the same as (x,1). Next, we have to calculate the intersection of our rays with the environment. One way is to do this is to keep moving along our rays in small steps until we are close enough to an object in the environment, which we detect using a function that returns the distance to the nearest object. This function should also return negative values for being inside the object, this function is usually called a signed distance function. A more efficient solution is to use this distance function to move along our rays by the distance to the nearest object, guaranteeing first that we do not accidentally move beyond the nearest object while moving along our rays, and second that we approach these objects as quickly as possible. This approach is called \"sphere tracing\". Teadrinker , Visualization of SDF ray marching algorithm , CC BY-SA 4.0 We first setup the environment. The function for getting the distance between two points \u237a and \u2375 in 3D space can be obtained using the Pythagorean theorem: dist \u2190 { 0.5 * \u2368 + / ( \u237a - \u2375 ) * 2 } 1 2 3 dist 4 6 3 5 The signed distance function for a sphere is immediate from the definition of a sphere as the set of points a distance R away from some center point C. sphere \u2190 { \u2375 [ 3 ] - \u2368 \u2375 [ 1 ] dist \u2375 [ 2 ] } R \u2190 2 C \u2190 0 0 0 P \u2190 0 0 4 sphere P C R 2 P \u2190 0 3 4 sphere P C R 3 Defining our environment as a sphere at the origin, we define the distance function for the environment. env \u2190 { C \u2190 0 0 0 \u22c4 R \u2190 2 \u22c4 sphere \u2375 C R } P \u2190 0 3 4 env P 3 Let\u2019s define the other functions we need and leave the marching function for last. When a point on an object is hit by a ray, the color of that point needs to be calculated in order to make it into the final image. The main insight is that, at every point on the surface of an object, the lighting at that point depends on the angle between the light ray and the surface. For example, if the light ray hits the surface directly, so that it is parallel to the normal at that point, that point will be at the maximum brightness compared to points where the light ray does not hit exactly. If the light ray is perpendicular or makes a negative angle with the surface, then that part of the object is obscured. We first normalise the vectors then take their dot product, this gives us the cosine of the angle between the two. Mathematically, We will use the cosine of the angle for shading, instead of using the angle explicitly. length \u2190 0 \u2218 dist normalize \u2190 \u22a2\u00f7 length normalize 3 4 0 0.6 0.8 0 The last function we will need is one which returns the normal to the environment at some point. Consider a point on the sphere. Intuitively, the vector orthogonal to the sphere will be the direction which makes the distance to the sphere increase the fastest, since every other direction either takes us towards the center of the sphere or away from the sphere at a slower rate We can construct this vector by calculating how much the distance function changes with a small variation in the x, y, and z directions, and normalizing the resulting vector. Small variations are needed so that we only consider points close to the surface point. In vector analysis terms, we are calculating the gradient of the distance function at that point. small \u2190 0.0001 0 0 P \u2190 2 0 0 \u0394env_x \u2190 ( env ( P + small )) - env ( P - small ) \u0394env_x 0.0002 We can use the rotate \u233d operator to make the small vector in the y and z direction too. 1 \u233d small 0 0 0.0001 ( \u233d \u2218 ( 0.0001 0 0 )) \u00a8 3 2 1 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0.0001 0 0 \u2502 0 0.0001 0 \u2502 0 0 0.0001 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u233d\u2373 3 3 2 1 ( \u233d \u2218 small ) \u00a8 \u233d\u2373 3 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0.0001 0 0 \u2502 0 0.0001 0 \u2502 0 0 0.0001 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 P (( env + ) - ( env - )) \u2368 small 0.0002 P (( env + ) - ( env - )) \u2368 (( \u233d \u2218 ( 0.0001 0 0 )) \u00a8 \u233d\u2373 3 ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0.0002 0 0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2283 P (( env + ) - ( env - )) \u2368 (( \u233d \u2218 ( 0.0001 0 0 )) \u00a8 \u233d\u2373 3 ) 0.0002 0 0 norm \u2190 { normalize \u2283 \u2375 (( env + ) - ( env - )) \u2368 (( \u233d \u2218 ( 0.0001 0 0 )) \u00a8 \u233d\u2373 3 ) } norm P 1 0 0 Finally, we are now ready to write the ray marching function. The marching function should take the camera\u2019s initial position, and move it along a ray according to the distance function for either a maximum number of marches or a point is hit, and for the latter return the dot product of the normal at that point with the vector from that point to the light source. march \u2190 ( { cur_pos \u2190 \u2283 \u2375 \u22c4 ray \u2190 2 \u2283 \u2375 \u22c4 i \u2190 3 \u2283 \u2375 \u22c4 cur_pos \u2190 cur_pos + ( env cur_pos ) \u00d7 ray \u22c4 ( env cur_pos ) < 0.0001 : 0 \u2308 ( norm cur_pos )( + . \u00d7 )( normalize cur_pos - light ) \u22c4 cur_pos ray ( i + 1 ) } \u2363 { ( 1 =\u2262 \u237a ) \u2228 (( \u237a , 0 0 ) [ 3 ] > 32 ) } ) camera \u2190 0 0 \u00af10 ray \u2190 0 0 1 light \u2190 2 3 4 march camera ray 0 0.8571428571 march camera ( 0 1 0 ) 0 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2510 \u2502 0 3.969795284E10 \u00af10 \u2502 0 1 0 \u2502 33 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2518 Let\u2019s go through the above code step by step. The function takes in a three element nested array, the first being the camera position, the second is the ray to march along, and the third is a counter variable. It starts from the camera position and adds to it the distance to the environment times the ray. If the distance to the environment is less than a small value, then it returns the dot product of the vector to the light source with the normal to the environment at that point, or zero, depending on which is greater. If not, then it returns the current position, ray, and counter incremented by one. The power operator f\u2363g allows us to evaluate the function f until the function g returns a value of 1. The function g takes in the previous return value of f, and the current return value of f, as left and right arguments. Here, the march function keeps moving the current position along the ray until either the result is a single value, that is, if the if statement in the march function returns either 0 or the dot product, by checking the number of elements (1=\u2262\u237a), or if the number of iterations exceeds 32, \u237a[3]>32. Wrapping the march function in a function that returns zero if the result is not a single number, we apply the function to the pixel coordinates and store the result. color \u2190 { i \u2190 march camera \u2375 0 \u22c4 1 =\u2262 i : i \u22c4 0 } color ( 0 1 0 ) 0 color \u00a8 ( , \u2218 1 \u00a8 (( \u2373 5 5 ) \u00f7 5 ) -\u2282 0.6 0.6 ) 0 0 0 0 0 0 0 0.7893982995 0 0 0 0.8900597217 0.8571428571 0.145402276 0 0 0 0.3004347993 0 0 0 0 0 0 0 image \u2190 color \u00a8 pxl_directions This calculation might take a couple seconds. To actually see our rendered image, we need to export our array as an image file. We will be using the very simple PPM file format, in which images are plain text files. The header of a PPM file consists of a format indicator \"P3\", the size of the image (5 5), the maximum value for each color (255), and the colors in RGB format. Using the \u2395NPUT function with the append (2) argument, we write to a file called \"image.ppm\". We use the encode \u2355 operator to convert between numerical arrays to character arrays. 'P3' \u2395NPUT 'image.ppm' 2 ( \u2355\u2374 image ) \u2395NPUT 'image.ppm' 2 '255' \u2395NPUT 'image.ppm' 2 test \u2190 color \u00a8 ( , \u2218 1 \u00a8 (( \u2373 5 5 ) \u00f7 5 ) -\u2282 0.6 0.6 ) test 0 0 0 0 0 0 0 0.7893982995 0 0 0 0.8900597217 0.8571428571 0.145402276 0 0 0 0.3004347993 0 0 0 0 0 0 0 test \u2190 \u2308 \u00a8 255 \u00d7 ( test ) test 0 0 0 0 0 0 0 202 0 0 0 227 219 38 0 0 0 77 0 0 0 0 0 0 0 , \u2218 ( 0 0 ) \u00a8 test \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 0 0 \u2502 0 0 0 \u2502 202 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 0 0 \u2502 227 0 0 \u2502 219 0 0 \u2502 38 0 0 \u2502 0 0 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 0 0 \u2502 0 0 0 \u2502 77 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 , / test \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0 0 0 0 0 \u2502 0 0 202 0 0 \u2502 0 227 219 38 0 \u2502 0 0 77 0 0 \u2502 0 0 0 0 0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 image \u2190 , \u2218 ( 0 0 ) \u00a8 ( \u2308 \u00a8 255 \u00d7 image ) (( 'image.ppm' 2 ) \u2218 ( \u2395NPUT \u2368 ) \u2355 ) \u00a8 , / image Opening the file in a compatible program, such as the GIMP image editor, we see the beautifully shaded sphere. By changing the distance function of the world, it is possible to render more complex objects. Take for example, the distance function for a torus. torus \u2190 { r \u2190 \u237a \u22c4 p \u2190 \u2375 \u22c4 q \u2190 ( r [ 1 ] - \u2368 length p [ 1 ] , p [ 3 ] ) , p [ 2 ] \u22c4 r [ 2 ] - \u2368 length q } env \u2190 { 1 0.5 torus \u2375 } There are also ways of combining distance functions to create more complex scenes, such as taking the minimum of two distance functions. However, we will leave the creation of more complex 3D scenes to the interested reader.","title":"Bonus content: Computer graphics"},{"location":"course/ch5/part1/","text":"Choose your axis! This part will cover Bracket-axis notation The axis operator Squad indexing So far, we\u2019ve only covered reducing along a vector. Vectors, being one-dimensional arrays, have a clear unambiguous axis along which reduction can be done. Higher dimensional arrays do not have this same privilege, the axis along which to reduce must be specified. Take the following example matrix \u2349 10 10 \u2374\u2373 10 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 The leading axis of the matrix is the first axis along which indexing is done. In this case, M [ 1 ;] 1 1 1 1 1 1 1 1 1 1 M [ 1 2 3 ;] 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 the leading axis is the vertical axis of this matrix. The last axis then is the horizontal axis of this matrix. To specify the axis along which to reduce, we can use one of the two reduce operators \u233f and /, corresponding to reducing along the leading axis and last axis respectively. + \u233f M 55 55 55 55 55 55 55 55 55 55 + / M 10 20 30 40 50 60 70 80 90 100 Since the leading axis is the vertical axis, the plus reduce first +\u233f function returned the sums of the vertical columns of the matrix; similarly, the plus reduce last +/ function returned the sums of the horizontal rows of the matrix. For higher dimensional arrays, only reducing along either the leading axis or the last axis is not sufficient, as there are intermediate axes that need to be considered. There is special syntax that allows for such general axis specification for certain built-in functions. It consists of adding a set of square brackets [ ] after the function containing an increasing integer axis number starting from 1, corresponding to the leading axis. Consider the following random 3-dimensional array ? 3 3 3 \u2374 10 5 2 4 9 1 4 5 8 4 9 5 8 5 2 2 3 2 5 2 9 4 7 2 10 7 10 6 It is visualized in 3-dimensional space as follows. Click and drag on the 3D view to orbit the array, use the scroll wheel to zoom in and out. The three axes of the array can be seen, with the red axis representing the leading axis, the green axis representing the intermediate axis, and the blue axis representing the last axis. M [ 1 ;;] 5 2 4 9 1 4 5 8 4 M [; 1 ;] 5 2 4 9 5 8 2 9 4 M [;; 1 ] 5 9 5 9 5 3 2 7 7 Then, using the bracket-axis notation, is it possible to obtain all 3 possible reductions. ( + / [ 1 ] ) M 16 16 16 21 5 16 15 20 15 ( + / [ 2 ] ) M 19 11 12 17 9 15 16 21 20 ( + / [ 3 ] ) M 11 14 17 22 9 10 15 19 23 Note that there is also a different method of specifying axes for functions which is more general than bracket-axis notation, since it behaves consistently and can be applied to any arbitrary function. The rank \u2364 operator allows for such general axis specification of a function left argument, via an integer right argument which specifies what rank cells to act on. An n-cell of a rank r array is a rank n array formed from picking (r-n) indices from that array. Some n-cells of the above array are \u235d 2-cell of M M [ 1 ;;] 5 2 4 9 1 4 5 8 4 \u235d 1-cell of M M [ 1 ; 1 ;] 5 2 4 \u235d 0-cell of M M [ 1 ; 1 ; 1 ] 5 As an example, we study the action of the rank operator \u2364 on the plus reduce +\u233f function, +\u233f\u2364n. For n=3, the modified plus reduce function +\u233f\u23643 acts on the 3-cells of the array. Since the whole array is of rank 3, there is only one 3-cell which is the array itself. Then, +\u233f\u23643 is equivalent to the action of the plus reduce +\u233f function on the whole array, adding up terms along its leading axis. ( + \u233f\u2364 3 ) M 16 16 16 21 5 16 15 20 15 + \u233f M 16 16 16 21 5 16 15 20 15 For n=2, +\u233f\u23642 acts on the 3-cells of the array. The 2-cells of the array are the cells M[1;;], M[2;;], and M[3;;]. M [ 1 ;;] 5 2 4 9 1 4 5 8 4 M [ 2 ;;] 9 5 8 5 2 2 3 2 5 M [ 3 ;;] 2 9 4 7 2 10 7 10 6 The leading axis of these 2-cells is vertical, hence the plus reduce first +\u233f function will return the sum of the columns of these arrays. + \u233f M [ 1 ;;] 19 11 12 + \u233f M [ 2 ;;] 17 9 15 + \u233f M [ 3 ;;] 16 21 20 Then, the action of +\u233f\u23642 on the original array is equivalent to adding up along its second axis. ( + \u233f\u2364 2 ) M 19 11 12 17 9 15 16 21 20 + \u233f [ 2 ] M 19 11 12 17 9 15 16 21 20 Similarly, for n=1, the action of (+\u233f\u23641) on the array is adding up its 1-cells, which is equivalent to adding along its last axis. M [ 1 ; 1 ;] 5 2 4 M [ 1 ; 2 ;] 9 1 4 M [ 1 ; 3 ;] 5 8 4 + \u233f M [ 1 ; 1 ;] 11 + \u233f M [ 1 ; 2 ;] 14 + \u233f M [ 1 ; 3 ;] 17 ( + \u233f\u2364 1 ) M 11 14 17 22 9 10 15 19 23 + \u233f [ 3 ] M 11 14 17 22 9 10 15 19 23 An operator form of (partially) indexing a matrix, such as M[1;3;], is given by the squad (\u201dsquish quad\u201d) indexing \u2337 operator. M [ 1 ; 3 ;] 5 8 4 1 3 \u2337 M 5 8 4 It is equivalent to bracket indexing, but can be used like any other operator. N \u2190 3 3 3 \u2374 \u2373 27 N 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 ( \u2282 \u2364 2 ) N \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 3 \u2502 10 11 12 \u2502 19 20 21 \u2502 \u2502 4 5 6 \u2502 13 14 15 \u2502 22 23 24 \u2502 \u2502 7 8 9 \u2502 16 17 18 \u2502 25 26 27 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 1 ( \u2337 \u2364 2 ) N 1 2 3 10 11 12 19 20 21 ( \u2282 \u2364 1 ) N \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 3 \u2502 4 5 6 \u2502 7 8 9 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 10 11 12 \u2502 13 14 15 \u2502 16 17 18 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 19 20 21 \u2502 22 23 24 \u2502 25 26 27 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 1 ( \u2337 \u2364 1 ) N 1 4 7 10 13 16 19 22 25","title":"5.1 - Choose your axis!"},{"location":"course/ch5/part1/#choose-your-axis","text":"This part will cover Bracket-axis notation The axis operator Squad indexing So far, we\u2019ve only covered reducing along a vector. Vectors, being one-dimensional arrays, have a clear unambiguous axis along which reduction can be done. Higher dimensional arrays do not have this same privilege, the axis along which to reduce must be specified. Take the following example matrix \u2349 10 10 \u2374\u2373 10 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 The leading axis of the matrix is the first axis along which indexing is done. In this case, M [ 1 ;] 1 1 1 1 1 1 1 1 1 1 M [ 1 2 3 ;] 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 the leading axis is the vertical axis of this matrix. The last axis then is the horizontal axis of this matrix. To specify the axis along which to reduce, we can use one of the two reduce operators \u233f and /, corresponding to reducing along the leading axis and last axis respectively. + \u233f M 55 55 55 55 55 55 55 55 55 55 + / M 10 20 30 40 50 60 70 80 90 100 Since the leading axis is the vertical axis, the plus reduce first +\u233f function returned the sums of the vertical columns of the matrix; similarly, the plus reduce last +/ function returned the sums of the horizontal rows of the matrix. For higher dimensional arrays, only reducing along either the leading axis or the last axis is not sufficient, as there are intermediate axes that need to be considered. There is special syntax that allows for such general axis specification for certain built-in functions. It consists of adding a set of square brackets [ ] after the function containing an increasing integer axis number starting from 1, corresponding to the leading axis. Consider the following random 3-dimensional array ? 3 3 3 \u2374 10 5 2 4 9 1 4 5 8 4 9 5 8 5 2 2 3 2 5 2 9 4 7 2 10 7 10 6 It is visualized in 3-dimensional space as follows. Click and drag on the 3D view to orbit the array, use the scroll wheel to zoom in and out. The three axes of the array can be seen, with the red axis representing the leading axis, the green axis representing the intermediate axis, and the blue axis representing the last axis. M [ 1 ;;] 5 2 4 9 1 4 5 8 4 M [; 1 ;] 5 2 4 9 5 8 2 9 4 M [;; 1 ] 5 9 5 9 5 3 2 7 7 Then, using the bracket-axis notation, is it possible to obtain all 3 possible reductions. ( + / [ 1 ] ) M 16 16 16 21 5 16 15 20 15 ( + / [ 2 ] ) M 19 11 12 17 9 15 16 21 20 ( + / [ 3 ] ) M 11 14 17 22 9 10 15 19 23 Note that there is also a different method of specifying axes for functions which is more general than bracket-axis notation, since it behaves consistently and can be applied to any arbitrary function. The rank \u2364 operator allows for such general axis specification of a function left argument, via an integer right argument which specifies what rank cells to act on. An n-cell of a rank r array is a rank n array formed from picking (r-n) indices from that array. Some n-cells of the above array are \u235d 2-cell of M M [ 1 ;;] 5 2 4 9 1 4 5 8 4 \u235d 1-cell of M M [ 1 ; 1 ;] 5 2 4 \u235d 0-cell of M M [ 1 ; 1 ; 1 ] 5 As an example, we study the action of the rank operator \u2364 on the plus reduce +\u233f function, +\u233f\u2364n. For n=3, the modified plus reduce function +\u233f\u23643 acts on the 3-cells of the array. Since the whole array is of rank 3, there is only one 3-cell which is the array itself. Then, +\u233f\u23643 is equivalent to the action of the plus reduce +\u233f function on the whole array, adding up terms along its leading axis. ( + \u233f\u2364 3 ) M 16 16 16 21 5 16 15 20 15 + \u233f M 16 16 16 21 5 16 15 20 15 For n=2, +\u233f\u23642 acts on the 3-cells of the array. The 2-cells of the array are the cells M[1;;], M[2;;], and M[3;;]. M [ 1 ;;] 5 2 4 9 1 4 5 8 4 M [ 2 ;;] 9 5 8 5 2 2 3 2 5 M [ 3 ;;] 2 9 4 7 2 10 7 10 6 The leading axis of these 2-cells is vertical, hence the plus reduce first +\u233f function will return the sum of the columns of these arrays. + \u233f M [ 1 ;;] 19 11 12 + \u233f M [ 2 ;;] 17 9 15 + \u233f M [ 3 ;;] 16 21 20 Then, the action of +\u233f\u23642 on the original array is equivalent to adding up along its second axis. ( + \u233f\u2364 2 ) M 19 11 12 17 9 15 16 21 20 + \u233f [ 2 ] M 19 11 12 17 9 15 16 21 20 Similarly, for n=1, the action of (+\u233f\u23641) on the array is adding up its 1-cells, which is equivalent to adding along its last axis. M [ 1 ; 1 ;] 5 2 4 M [ 1 ; 2 ;] 9 1 4 M [ 1 ; 3 ;] 5 8 4 + \u233f M [ 1 ; 1 ;] 11 + \u233f M [ 1 ; 2 ;] 14 + \u233f M [ 1 ; 3 ;] 17 ( + \u233f\u2364 1 ) M 11 14 17 22 9 10 15 19 23 + \u233f [ 3 ] M 11 14 17 22 9 10 15 19 23 An operator form of (partially) indexing a matrix, such as M[1;3;], is given by the squad (\u201dsquish quad\u201d) indexing \u2337 operator. M [ 1 ; 3 ;] 5 8 4 1 3 \u2337 M 5 8 4 It is equivalent to bracket indexing, but can be used like any other operator. N \u2190 3 3 3 \u2374 \u2373 27 N 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 ( \u2282 \u2364 2 ) N \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 3 \u2502 10 11 12 \u2502 19 20 21 \u2502 \u2502 4 5 6 \u2502 13 14 15 \u2502 22 23 24 \u2502 \u2502 7 8 9 \u2502 16 17 18 \u2502 25 26 27 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 1 ( \u2337 \u2364 2 ) N 1 2 3 10 11 12 19 20 21 ( \u2282 \u2364 1 ) N \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 3 \u2502 4 5 6 \u2502 7 8 9 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 10 11 12 \u2502 13 14 15 \u2502 16 17 18 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 19 20 21 \u2502 22 23 24 \u2502 25 26 27 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 1 ( \u2337 \u2364 1 ) N 1 4 7 10 13 16 19 22 25","title":"Choose your axis!"},{"location":"course/ch5/part2/","text":"Anything can be a scalar This part will cover Nested arrays Enclose Disclose Nest Each Tally In order to create a nested array out of another array, the enclose \u2282 operator can be used. \u2373 10 1 2 3 4 5 6 7 8 9 10 \u2282\u2373 10 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 3 4 5 6 7 8 9 10 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 In order to pick information out of nested arrays, the dyadic pick \u2283 operator allows indexing a nested arrays using a nested left array. Monadically, it picks the first element of the array. school \u2190 2 1 \u2374 ( 'MATH' ( '101' 30 ( 'COMPETED' )) ( '102' 37 ( 'CANCELLED' ))) ( 'CS' ( '101' 53 ( 'COMPETED' )) ( '102' 28 ( 'COMPLETED' )) ( '103' 20 ( 'IN PROGRESS' ))) school \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502\u2502 MATH \u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502 \u2502\u2502 \u2502\u2502 101 \u2502 30 \u2502 COMPETED \u2502\u2502\u2502 102 \u2502 37 \u2502 CANCELLED \u2502\u2502 \u2502 \u2502\u2502 \u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502\u250c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502\u2502 CS \u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u2502 \u2502\u2502 \u2502\u2502 101 \u2502 53 \u2502 COMPETED \u2502\u2502\u2502 102 \u2502 28 \u2502 COMPLETED \u2502\u2502\u2502 103 \u2502 20 \u2502 IN PROGRESS \u2502\u2502\u2502 \u2502\u2502 \u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2502 \u2502\u2514\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2261 school \u00af4 \u2262 school 2 school [ 1 ] RANK ERROR school [ 1 ] \u2227 \u2283 school \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 MATH \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502 \u2502\u2502 CLASS 1 \u2502 30 \u2502 COMPETED \u2502\u2502\u2502 CLASS 2 \u2502 37 \u2502 CANCELLED \u2502\u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u235d Nested left arrays are required ( 1 1 ) \u2283 school RANK ERROR ( 1 1 ) \u2283 school \u2227 ( \u2282 ( 1 1 )) \u2283 school \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 MATH \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502 \u2502\u2502 CLASS 1 \u2502 30 \u2502 COMPETED \u2502\u2502\u2502 CLASS 2 \u2502 37 \u2502 CANCELLED \u2502\u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ( \u2282 ( 2 1 )) \u2283 school \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 COMPUTER SCIENCE \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502 \u2502\u2502 CLASS 1 \u2502 53 \u2502 COMPETED \u2502\u2502\u2502 CLASS 2 \u2502 28 \u2502 COMPLETED \u2502\u2502\u2502 CLASS 3 \u2502 20 \u2502 IN PROGRESS \u2502\u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 (( 1 1 ) ( 1 )) \u2283 school MATH (( 2 1 ) ( 2 )) \u2283 school \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 CLASS 1 \u2502 53 \u2502 COMPETED \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 (( 2 1 ) ( 2 ) ( 3 )) \u2283 school COMPETED It is now time to continue the discussion we had in chapter 2 about nested arrays. This topic tends to be the most difficult part of learning APL; hopefully the following exposition will make it seem like a natural development of what we\u2019ve already discussed. Data in APL are represented using arrays. The elements of an array are called scalars, which can contain any arbitrary types of data. They could contain arrays with rank zero (simple scalars), such as the array (7) , vectors (7 14 21 28 35 42 49 56 63) , matrices 3 3\u2374(7 14 21 28 35 42 49 56 63) , or any higher rank array. Since scalars are elements of arrays, they themselves carry no rank or size; recall a similar example from chapter 2. nums \u2190 1 3 letters \u2190 'a' 'b' 2 2 \u2374 nums letters \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2510 \u2502 1 3 \u2502 ab \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2524 \u2502 1 3 \u2502 ab \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2518 The elements of the above 2x2 array are scalars with data the vectors \u2018nums\u2019 and \u2018letters\u2019, exactly what would be expected if nums and letters were switched for simple scalars. 2 2 \u2374 5 6 5 6 5 6 The element at (1,1) in both cases is a scalar, which can be verified by computing their rank. letters_numbers \u2190 2 2 \u2374 nums letters simple_matrix \u2190 2 2 \u2374 5 6 simple_matrix [ 1 ; 1 ] 5 \u2374\u2374 simple_matrix [ 1 ; 1 ] 0 letters_numbers [ 1 ; 1 ] \u250c\u2500\u2500\u2500\u2510 \u2502 1 3 \u2502 \u2514\u2500\u2500\u2500\u2518 \u2374\u2374 ( 2 2 \u2374 nums letters ) [ 1 ; 1 ] 0 Consider a more complex, nested example. nested \u2190 2 2 \u2374 ( \u2373 3 ) ( ' ' ) ( ' ' ) ( 2 2 \u2374 ( ' ' ) ( \u2373 3 ) ( 2 2 \u2374 ( \u2373 3 ) ( ' ' ) ( ' ' ) ( \u2373 2 )) ( ' ' )) nested \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 3 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502 \u2502\u2502 \u2502 1 2 3 \u2502\u2502 \u2502 \u2502\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502 \u2502\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\u2502 \u2502\u2502 \u2502 \u2502\u2502\u2502 1 2 3 \u2502 \u2502\u2502 \u2502\u2502 \u2502 \u2502\u2502\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 \u2502 \u2502\u2502\u2502 \u2502 1 2 \u2502\u2502 \u2502\u2502 \u2502 \u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\u2502 \u2502\u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 nested [ 2 ; 2 ] \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502\u2502 \u2502 1 2 3 \u2502\u2502 \u2502\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\u2502 \u2502\u2502 \u2502\u2502\u2502 1 2 3 \u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 \u2502\u2502\u2502 \u2502 1 2 \u2502\u2502 \u2502\u2502 \u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\u2502 \u2502\u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2374\u2374 nested [ 2 ; 2 ] 0 Since scalars have no rank, it is not possible to access their data using array indexing. Instead, deep indexing can be done with the dyadic \u2283 pick function. The left argument of the \u2283 pick function is a vector of indices, which successively index the right argument. multiplication_line \u2190 ( 1 \u00d7\u2373 10 ) ( 2 \u00d7\u2373 10 ) ( 3 \u00d7\u2373 10 ) ( 4 \u00d7\u2373 10 ) ( 5 \u00d7\u2373 10 ) ( 6 \u00d7\u2373 10 ) ( 7 \u00d7\u2373 10 ) ( 8 \u00d7\u2373 10 ) ( 9 \u00d7\u2373 10 ) ( 10 \u00d7\u2373 10 ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 3 4 5 6 7 8 9 10 \u2502 2 4 6 8 10 12 14 16 18 20 \u2502 3 6 9 12 15 18 21 24 27 30 \u2502 4 8 12 16 20 24 28 32 36 40 \u2502 5 10 15 20 25 30 35 40 45 50 \u2502 6 12 18 24 30 36 42 48 54 60 \u2502 7 14 21 28 35 42 49 56 63 70 \u2502 8 16 24 32 40 48 56 64 72 80 \u2502 9 18 27 36 45 54 63 72 81 90 \u2502 10 20 30 40 50 60 70 80 90 100 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 5 \u2283 multiplication_line 5 10 15 20 25 30 35 40 45 50 5 3 \u2283 multiplication_line 15 multiplication_line [ 5 ] \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 5 10 15 20 25 30 35 40 45 50 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 multiplication_line [ 5 ; 3 ] RANK ERROR multiplication_line [ 5 ; 3 ] \u2227 For the nested example, ( 2 2 )( 2 1 ) \u2283 nested \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 1 2 3 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 \u2502 1 2 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 ( 2 2 )( 2 1 )( 2 2 ) \u2283 nested 1 2 ( 2 2 )( 2 1 )( 2 2 ) 2 \u2283 nested 2 If \u2283 pick does not have a left argument, it acts as the monadic disclose function and picks the first element. \u2283 nested 1 2 3 \u2283 nested [ 2 ; 2 ] \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 1 2 3 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\u2502 \u2502 \u2502\u2502 1 2 3 \u2502 \u2502\u2502 \u2502 \u2502\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\u2502 \u2502 \u2502\u2502 \u2502 1 2 \u2502\u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 \u2283 multiplication_line 1 2 3 4 5 6 7 8 9 10 There is also a nested variant of the , ravel function called the \u220a enlist function. \u220a multiplication_line 1 2 3 4 5 6 7 8 9 10 2 4 6 8 10 12 14 16 18 20 3 6 9 12 15 18 21 24 27 30 4 8 12 16 20 24 28 32 36 40 5 10 15 20 25 30 35 40 45 50 6 12 18 24 30 36 42 48 54 60 7 14 21 28 35 42 49 56 63 70 8 16 24 32 40 48 56 64 72 80 9 18 27 36 45 54 63 72 81 90 10 20 30 40 50 60 70 80 90 100 \u220a nested 1 2 3 1 2 3 1 2 3 1 2 Creating nested arrays from already existing data can be done using the \u2282 enclose functions. The monadic enclose \u2282 function wraps its right argument as a scalar. \u2282\u2373 10 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 3 4 5 6 7 8 9 10 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2374\u2374\u2282\u2373 10 0 3 3 3 \u2374\u2373 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 \u2282 3 3 3 \u2374\u2373 9 \u250c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 3 \u2502 \u2502 4 5 6 \u2502 \u2502 7 8 9 \u2502 \u2502 \u2502 \u2502 1 2 3 \u2502 \u2502 4 5 6 \u2502 \u2502 7 8 9 \u2502 \u2502 \u2502 \u2502 1 2 3 \u2502 \u2502 4 5 6 \u2502 \u2502 7 8 9 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2374\u2374\u2282 3 3 3 \u2374\u2373 9 0 To see why creating a nested array might be useful, we take a closer look at the windowed reduce function. Applying the , ravel function to the windowed reduce operator to take a peek at its internal operation 3 , / 1 2 3 4 5 6 \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 3 \u2502 2 3 4 \u2502 3 4 5 \u2502 4 5 6 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 We can see here that the windowed reduce operator applies the , ravel function to three element sections of the vector to produce scalars which then form the final result. Compare this to the case of the + plus function applied to the windowed reduce operator 3 + / 1 2 3 4 5 6 6 9 12 15 \u235d Equivalent to (1+2+3) (2+3+4) (3+4+5) (4+5+6) Since the array constructed above has scalars containing vectors, we can apply the +/ plus reduce function to each vector using the \u00a8 each operator. 3 , / 1 2 3 4 5 6 \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 3 \u2502 2 3 4 \u2502 3 4 5 \u2502 4 5 6 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 + /\u00a8 3 , / 1 2 3 4 5 6 6 9 12 15 Without the each operator, the plus reduce function will add up the scalars + / 3 , / 1 2 3 4 5 6 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 10 14 18 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 In order to easily create and destroy such nested arrays, we can use the enclose \u2282 function with a rank specification to denote what axis to group cells along. 2 2 2 \u2374\u2373 8 1 2 3 4 5 6 7 8 \u2282 [ 3 ] 2 2 2 \u2374\u2373 8 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 1 2 \u2502 3 4 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 5 6 \u2502 7 8 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 \u2282 [ 2 ] 2 2 2 \u2374\u2373 8 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 1 3 \u2502 2 4 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 5 7 \u2502 6 8 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 \u2282 [ 1 ] 2 2 2 \u2374\u2373 8 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 1 5 \u2502 2 6 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 3 7 \u2502 4 8 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 The split \u2193 function is the dedicated function for this task \u2193 2 2 2 \u2374\u2373 8 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 1 2 \u2502 3 4 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 5 6 \u2502 7 8 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 \u2193 [ 1 ] 2 2 2 \u2374\u2373 8 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 1 5 \u2502 2 6 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 3 7 \u2502 4 8 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 With the rank operator on the enclose function, cells or arbitrary rank can be split ( \u2282 \u2364 3 ) 2 2 2 \u2374\u2373 8 \u250c\u2500\u2500\u2500\u2510 \u2502 1 2 \u2502 \u2502 3 4 \u2502 \u2502 \u2502 \u2502 5 6 \u2502 \u2502 7 8 \u2502 \u2514\u2500\u2500\u2500\u2518 ( \u2282 \u2364 2 ) 2 2 2 \u2374\u2373 8 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 1 2 \u2502 5 6 \u2502 \u2502 3 4 \u2502 7 8 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 ( \u2282 \u2364 1 ) 2 2 2 \u2374\u2373 8 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 1 2 \u2502 3 4 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 5 6 \u2502 7 8 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 The inverse to splitting is the Mix \u2191 function. If the nested array is of irregular shape, the Mix function will pad the resulting array, or try to fill in missing elements with an empty array of expected shape ( \u2282 \u2364 2 ) 2 2 2 \u2374\u2373 8 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 1 2 \u2502 5 6 \u2502 \u2502 3 4 \u2502 7 8 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 \u2191 ( \u2282 \u2364 2 ) 2 2 2 \u2374\u2373 8 1 2 3 4 5 6 7 8 ( 1 2 3 ( 4 5 ) 6 ) \u250c\u2500\u252c\u2500\u252c\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2510 \u2502 1 \u2502 2 \u2502 3 \u2502 4 5 \u2502 6 \u2502 \u2514\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2518 \u2191 ( 1 2 3 ( 4 5 ) 6 ) 1 0 2 0 3 0 4 5 6 0 ( 1 2 3 ( 4 ( 5 6 ) 7 ) 8 ) \u250c\u2500\u252c\u2500\u252c\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2510 \u2502 1 \u2502 2 \u2502 3 \u2502\u250c\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2510\u2502 8 \u2502 \u2502 \u2502 \u2502 \u2502\u2502 4 \u2502 5 6 \u2502 7 \u2502\u2502 \u2502 \u2502 \u2502 \u2502 \u2502\u2514\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2518\u2502 \u2502 \u2514\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2518 \u2191 ( 1 2 3 ( 4 ( 5 6 ) 7 ) 8 ) \u250c\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2510 \u2502 1 \u2502 0 \u2502 0 \u2502 \u251c\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2524 \u2502 2 \u2502 0 \u2502 0 \u2502 \u251c\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2524 \u2502 3 \u2502 0 \u2502 0 \u2502 \u251c\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2524 \u2502 4 \u2502 5 6 \u2502 7 \u2502 \u251c\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2524 \u2502 8 \u2502 0 \u2502 0 \u2502 \u2514\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2518 For a more involved example, consider the following grade book school \u2190 ( 'MATH' ( '101' 30 ( 'COMPETED' )) ( '102' 37 ( 'CANCELLED' ))) ( 'CS' ( '101' 53 ( 'COMPETED' )) ( '102' 28 ( 'COMPLETED' )) ( '103' 20 ( 'IN PROGRESS' ))) school \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502\u2502\u250c\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u2502\u2502\u250c\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u2502 \u2502\u2502\u2502 MATH \u2502\u2502\u2502 101 \u2502 30 \u2502 COMPETED \u2502\u2502\u2502 102 \u2502 37 \u2502 CANCELLED \u2502\u2502\u2502\u2502\u2502 CS \u2502\u2502\u2502 101 \u2502 53 \u2502 COMPETED \u2502\u2502\u2502 102 \u2502 28 \u2502 COMPLETED \u2502\u2502\u2502 103 \u2502 20 \u2502 IN PROGRESS \u2502\u2502\u2502 \u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2502\u2502\u2514\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2191 school \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u250c\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502\u2502 MATH \u2502\u2502\u2502 101 \u2502 30 \u2502 COMPETED \u2502\u2502\u2502 102 \u2502 37 \u2502 CANCELLED \u2502\u2502\u2502 \u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2500\u2518 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502\u250c\u2500\u2500\u2510 \u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502\u2502 CS \u2502 \u2502\u2502 101 \u2502 53 \u2502 COMPETED \u2502\u2502\u2502 102 \u2502 28 \u2502 COMPLETED \u2502\u2502\u2502 103 \u2502 20 \u2502 IN PROGRESS \u2502\u2502 \u2502\u2514\u2500\u2500\u2518 \u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Notice that the Math row was given an extra element with an empty nested array by the Mix function in order to match with the shape of CS row \u2191\u2191school \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502MATH\u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502101 \u250230 \u2502COMPETED \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502102 \u250237 \u2502CANCELLED \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502CS \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502101 \u250253 \u2502COMPETED \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502102 \u250228 \u2502COMPLETED \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502103 \u250220 \u2502IN PROGRESS\u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 The depth of an array can be obtained explicitly using the monadic \u2261 depth function. \u2261 10 \u235d The depth of a scalar is 0 0 \u2373 10 1 2 3 4 5 6 7 8 9 10 \u2261\u2373 10 1 \u2261 10 10 \u2374 \u2373 10 1 nested \u2190 2 2 \u2374 ( \u2373 3 ) ( ' ' ) ( ' ' ) ( 2 2 \u2374 ( ' ' ) ( \u2373 3 ) ( 2 2 \u2374 ( \u2373 3 ) ( ' ' ) ( ' ' ) ( \u2373 2 )) ( ' ' )) nested \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 3 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502 \u2502\u2502 \u2502 1 2 3 \u2502\u2502 \u2502 \u2502\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502 \u2502\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\u2502 \u2502\u2502 \u2502 \u2502\u2502\u2502 1 2 3 \u2502 \u2502\u2502 \u2502\u2502 \u2502 \u2502\u2502\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 \u2502 \u2502\u2502\u2502 \u2502 1 2 \u2502\u2502 \u2502\u2502 \u2502 \u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\u2502 \u2502\u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2261 nested \u00af4 We might expect a depth of 4 for the last array, but for arrays with elements with differing depths, the depth function returns the negative of the maximum depth of the array.","title":"5.2 - Anything can be a scalar"},{"location":"course/ch5/part2/#anything-can-be-a-scalar","text":"This part will cover Nested arrays Enclose Disclose Nest Each Tally In order to create a nested array out of another array, the enclose \u2282 operator can be used. \u2373 10 1 2 3 4 5 6 7 8 9 10 \u2282\u2373 10 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 3 4 5 6 7 8 9 10 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 In order to pick information out of nested arrays, the dyadic pick \u2283 operator allows indexing a nested arrays using a nested left array. Monadically, it picks the first element of the array. school \u2190 2 1 \u2374 ( 'MATH' ( '101' 30 ( 'COMPETED' )) ( '102' 37 ( 'CANCELLED' ))) ( 'CS' ( '101' 53 ( 'COMPETED' )) ( '102' 28 ( 'COMPLETED' )) ( '103' 20 ( 'IN PROGRESS' ))) school \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502\u2502 MATH \u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502 \u2502\u2502 \u2502\u2502 101 \u2502 30 \u2502 COMPETED \u2502\u2502\u2502 102 \u2502 37 \u2502 CANCELLED \u2502\u2502 \u2502 \u2502\u2502 \u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502\u250c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502\u2502 CS \u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u2502 \u2502\u2502 \u2502\u2502 101 \u2502 53 \u2502 COMPETED \u2502\u2502\u2502 102 \u2502 28 \u2502 COMPLETED \u2502\u2502\u2502 103 \u2502 20 \u2502 IN PROGRESS \u2502\u2502\u2502 \u2502\u2502 \u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2502 \u2502\u2514\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2261 school \u00af4 \u2262 school 2 school [ 1 ] RANK ERROR school [ 1 ] \u2227 \u2283 school \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 MATH \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502 \u2502\u2502 CLASS 1 \u2502 30 \u2502 COMPETED \u2502\u2502\u2502 CLASS 2 \u2502 37 \u2502 CANCELLED \u2502\u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u235d Nested left arrays are required ( 1 1 ) \u2283 school RANK ERROR ( 1 1 ) \u2283 school \u2227 ( \u2282 ( 1 1 )) \u2283 school \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 MATH \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502 \u2502\u2502 CLASS 1 \u2502 30 \u2502 COMPETED \u2502\u2502\u2502 CLASS 2 \u2502 37 \u2502 CANCELLED \u2502\u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ( \u2282 ( 2 1 )) \u2283 school \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 COMPUTER SCIENCE \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502 \u2502\u2502 CLASS 1 \u2502 53 \u2502 COMPETED \u2502\u2502\u2502 CLASS 2 \u2502 28 \u2502 COMPLETED \u2502\u2502\u2502 CLASS 3 \u2502 20 \u2502 IN PROGRESS \u2502\u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 (( 1 1 ) ( 1 )) \u2283 school MATH (( 2 1 ) ( 2 )) \u2283 school \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 CLASS 1 \u2502 53 \u2502 COMPETED \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 (( 2 1 ) ( 2 ) ( 3 )) \u2283 school COMPETED It is now time to continue the discussion we had in chapter 2 about nested arrays. This topic tends to be the most difficult part of learning APL; hopefully the following exposition will make it seem like a natural development of what we\u2019ve already discussed. Data in APL are represented using arrays. The elements of an array are called scalars, which can contain any arbitrary types of data. They could contain arrays with rank zero (simple scalars), such as the array (7) , vectors (7 14 21 28 35 42 49 56 63) , matrices 3 3\u2374(7 14 21 28 35 42 49 56 63) , or any higher rank array. Since scalars are elements of arrays, they themselves carry no rank or size; recall a similar example from chapter 2. nums \u2190 1 3 letters \u2190 'a' 'b' 2 2 \u2374 nums letters \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2510 \u2502 1 3 \u2502 ab \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2524 \u2502 1 3 \u2502 ab \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2518 The elements of the above 2x2 array are scalars with data the vectors \u2018nums\u2019 and \u2018letters\u2019, exactly what would be expected if nums and letters were switched for simple scalars. 2 2 \u2374 5 6 5 6 5 6 The element at (1,1) in both cases is a scalar, which can be verified by computing their rank. letters_numbers \u2190 2 2 \u2374 nums letters simple_matrix \u2190 2 2 \u2374 5 6 simple_matrix [ 1 ; 1 ] 5 \u2374\u2374 simple_matrix [ 1 ; 1 ] 0 letters_numbers [ 1 ; 1 ] \u250c\u2500\u2500\u2500\u2510 \u2502 1 3 \u2502 \u2514\u2500\u2500\u2500\u2518 \u2374\u2374 ( 2 2 \u2374 nums letters ) [ 1 ; 1 ] 0 Consider a more complex, nested example. nested \u2190 2 2 \u2374 ( \u2373 3 ) ( ' ' ) ( ' ' ) ( 2 2 \u2374 ( ' ' ) ( \u2373 3 ) ( 2 2 \u2374 ( \u2373 3 ) ( ' ' ) ( ' ' ) ( \u2373 2 )) ( ' ' )) nested \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 3 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502 \u2502\u2502 \u2502 1 2 3 \u2502\u2502 \u2502 \u2502\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502 \u2502\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\u2502 \u2502\u2502 \u2502 \u2502\u2502\u2502 1 2 3 \u2502 \u2502\u2502 \u2502\u2502 \u2502 \u2502\u2502\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 \u2502 \u2502\u2502\u2502 \u2502 1 2 \u2502\u2502 \u2502\u2502 \u2502 \u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\u2502 \u2502\u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 nested [ 2 ; 2 ] \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502\u2502 \u2502 1 2 3 \u2502\u2502 \u2502\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\u2502 \u2502\u2502 \u2502\u2502\u2502 1 2 3 \u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 \u2502\u2502\u2502 \u2502 1 2 \u2502\u2502 \u2502\u2502 \u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\u2502 \u2502\u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2374\u2374 nested [ 2 ; 2 ] 0 Since scalars have no rank, it is not possible to access their data using array indexing. Instead, deep indexing can be done with the dyadic \u2283 pick function. The left argument of the \u2283 pick function is a vector of indices, which successively index the right argument. multiplication_line \u2190 ( 1 \u00d7\u2373 10 ) ( 2 \u00d7\u2373 10 ) ( 3 \u00d7\u2373 10 ) ( 4 \u00d7\u2373 10 ) ( 5 \u00d7\u2373 10 ) ( 6 \u00d7\u2373 10 ) ( 7 \u00d7\u2373 10 ) ( 8 \u00d7\u2373 10 ) ( 9 \u00d7\u2373 10 ) ( 10 \u00d7\u2373 10 ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 3 4 5 6 7 8 9 10 \u2502 2 4 6 8 10 12 14 16 18 20 \u2502 3 6 9 12 15 18 21 24 27 30 \u2502 4 8 12 16 20 24 28 32 36 40 \u2502 5 10 15 20 25 30 35 40 45 50 \u2502 6 12 18 24 30 36 42 48 54 60 \u2502 7 14 21 28 35 42 49 56 63 70 \u2502 8 16 24 32 40 48 56 64 72 80 \u2502 9 18 27 36 45 54 63 72 81 90 \u2502 10 20 30 40 50 60 70 80 90 100 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 5 \u2283 multiplication_line 5 10 15 20 25 30 35 40 45 50 5 3 \u2283 multiplication_line 15 multiplication_line [ 5 ] \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 5 10 15 20 25 30 35 40 45 50 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 multiplication_line [ 5 ; 3 ] RANK ERROR multiplication_line [ 5 ; 3 ] \u2227 For the nested example, ( 2 2 )( 2 1 ) \u2283 nested \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 1 2 3 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 \u2502 1 2 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 ( 2 2 )( 2 1 )( 2 2 ) \u2283 nested 1 2 ( 2 2 )( 2 1 )( 2 2 ) 2 \u2283 nested 2 If \u2283 pick does not have a left argument, it acts as the monadic disclose function and picks the first element. \u2283 nested 1 2 3 \u2283 nested [ 2 ; 2 ] \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 1 2 3 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\u2502 \u2502 \u2502\u2502 1 2 3 \u2502 \u2502\u2502 \u2502 \u2502\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\u2502 \u2502 \u2502\u2502 \u2502 1 2 \u2502\u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 \u2283 multiplication_line 1 2 3 4 5 6 7 8 9 10 There is also a nested variant of the , ravel function called the \u220a enlist function. \u220a multiplication_line 1 2 3 4 5 6 7 8 9 10 2 4 6 8 10 12 14 16 18 20 3 6 9 12 15 18 21 24 27 30 4 8 12 16 20 24 28 32 36 40 5 10 15 20 25 30 35 40 45 50 6 12 18 24 30 36 42 48 54 60 7 14 21 28 35 42 49 56 63 70 8 16 24 32 40 48 56 64 72 80 9 18 27 36 45 54 63 72 81 90 10 20 30 40 50 60 70 80 90 100 \u220a nested 1 2 3 1 2 3 1 2 3 1 2 Creating nested arrays from already existing data can be done using the \u2282 enclose functions. The monadic enclose \u2282 function wraps its right argument as a scalar. \u2282\u2373 10 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 3 4 5 6 7 8 9 10 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2374\u2374\u2282\u2373 10 0 3 3 3 \u2374\u2373 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 \u2282 3 3 3 \u2374\u2373 9 \u250c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 3 \u2502 \u2502 4 5 6 \u2502 \u2502 7 8 9 \u2502 \u2502 \u2502 \u2502 1 2 3 \u2502 \u2502 4 5 6 \u2502 \u2502 7 8 9 \u2502 \u2502 \u2502 \u2502 1 2 3 \u2502 \u2502 4 5 6 \u2502 \u2502 7 8 9 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2374\u2374\u2282 3 3 3 \u2374\u2373 9 0 To see why creating a nested array might be useful, we take a closer look at the windowed reduce function. Applying the , ravel function to the windowed reduce operator to take a peek at its internal operation 3 , / 1 2 3 4 5 6 \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 3 \u2502 2 3 4 \u2502 3 4 5 \u2502 4 5 6 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 We can see here that the windowed reduce operator applies the , ravel function to three element sections of the vector to produce scalars which then form the final result. Compare this to the case of the + plus function applied to the windowed reduce operator 3 + / 1 2 3 4 5 6 6 9 12 15 \u235d Equivalent to (1+2+3) (2+3+4) (3+4+5) (4+5+6) Since the array constructed above has scalars containing vectors, we can apply the +/ plus reduce function to each vector using the \u00a8 each operator. 3 , / 1 2 3 4 5 6 \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 3 \u2502 2 3 4 \u2502 3 4 5 \u2502 4 5 6 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 + /\u00a8 3 , / 1 2 3 4 5 6 6 9 12 15 Without the each operator, the plus reduce function will add up the scalars + / 3 , / 1 2 3 4 5 6 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 10 14 18 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 In order to easily create and destroy such nested arrays, we can use the enclose \u2282 function with a rank specification to denote what axis to group cells along. 2 2 2 \u2374\u2373 8 1 2 3 4 5 6 7 8 \u2282 [ 3 ] 2 2 2 \u2374\u2373 8 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 1 2 \u2502 3 4 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 5 6 \u2502 7 8 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 \u2282 [ 2 ] 2 2 2 \u2374\u2373 8 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 1 3 \u2502 2 4 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 5 7 \u2502 6 8 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 \u2282 [ 1 ] 2 2 2 \u2374\u2373 8 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 1 5 \u2502 2 6 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 3 7 \u2502 4 8 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 The split \u2193 function is the dedicated function for this task \u2193 2 2 2 \u2374\u2373 8 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 1 2 \u2502 3 4 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 5 6 \u2502 7 8 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 \u2193 [ 1 ] 2 2 2 \u2374\u2373 8 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 1 5 \u2502 2 6 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 3 7 \u2502 4 8 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 With the rank operator on the enclose function, cells or arbitrary rank can be split ( \u2282 \u2364 3 ) 2 2 2 \u2374\u2373 8 \u250c\u2500\u2500\u2500\u2510 \u2502 1 2 \u2502 \u2502 3 4 \u2502 \u2502 \u2502 \u2502 5 6 \u2502 \u2502 7 8 \u2502 \u2514\u2500\u2500\u2500\u2518 ( \u2282 \u2364 2 ) 2 2 2 \u2374\u2373 8 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 1 2 \u2502 5 6 \u2502 \u2502 3 4 \u2502 7 8 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 ( \u2282 \u2364 1 ) 2 2 2 \u2374\u2373 8 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 1 2 \u2502 3 4 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 5 6 \u2502 7 8 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 The inverse to splitting is the Mix \u2191 function. If the nested array is of irregular shape, the Mix function will pad the resulting array, or try to fill in missing elements with an empty array of expected shape ( \u2282 \u2364 2 ) 2 2 2 \u2374\u2373 8 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 1 2 \u2502 5 6 \u2502 \u2502 3 4 \u2502 7 8 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 \u2191 ( \u2282 \u2364 2 ) 2 2 2 \u2374\u2373 8 1 2 3 4 5 6 7 8 ( 1 2 3 ( 4 5 ) 6 ) \u250c\u2500\u252c\u2500\u252c\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2510 \u2502 1 \u2502 2 \u2502 3 \u2502 4 5 \u2502 6 \u2502 \u2514\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2518 \u2191 ( 1 2 3 ( 4 5 ) 6 ) 1 0 2 0 3 0 4 5 6 0 ( 1 2 3 ( 4 ( 5 6 ) 7 ) 8 ) \u250c\u2500\u252c\u2500\u252c\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2510 \u2502 1 \u2502 2 \u2502 3 \u2502\u250c\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2510\u2502 8 \u2502 \u2502 \u2502 \u2502 \u2502\u2502 4 \u2502 5 6 \u2502 7 \u2502\u2502 \u2502 \u2502 \u2502 \u2502 \u2502\u2514\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2518\u2502 \u2502 \u2514\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2518 \u2191 ( 1 2 3 ( 4 ( 5 6 ) 7 ) 8 ) \u250c\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2510 \u2502 1 \u2502 0 \u2502 0 \u2502 \u251c\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2524 \u2502 2 \u2502 0 \u2502 0 \u2502 \u251c\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2524 \u2502 3 \u2502 0 \u2502 0 \u2502 \u251c\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2524 \u2502 4 \u2502 5 6 \u2502 7 \u2502 \u251c\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2524 \u2502 8 \u2502 0 \u2502 0 \u2502 \u2514\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2518 For a more involved example, consider the following grade book school \u2190 ( 'MATH' ( '101' 30 ( 'COMPETED' )) ( '102' 37 ( 'CANCELLED' ))) ( 'CS' ( '101' 53 ( 'COMPETED' )) ( '102' 28 ( 'COMPLETED' )) ( '103' 20 ( 'IN PROGRESS' ))) school \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502\u2502\u250c\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u2502\u2502\u250c\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u2502 \u2502\u2502\u2502 MATH \u2502\u2502\u2502 101 \u2502 30 \u2502 COMPETED \u2502\u2502\u2502 102 \u2502 37 \u2502 CANCELLED \u2502\u2502\u2502\u2502\u2502 CS \u2502\u2502\u2502 101 \u2502 53 \u2502 COMPETED \u2502\u2502\u2502 102 \u2502 28 \u2502 COMPLETED \u2502\u2502\u2502 103 \u2502 20 \u2502 IN PROGRESS \u2502\u2502\u2502 \u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2502\u2502\u2514\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2191 school \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u250c\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502\u2502 MATH \u2502\u2502\u2502 101 \u2502 30 \u2502 COMPETED \u2502\u2502\u2502 102 \u2502 37 \u2502 CANCELLED \u2502\u2502\u2502 \u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2500\u2518 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502\u250c\u2500\u2500\u2510 \u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502\u2502 CS \u2502 \u2502\u2502 101 \u2502 53 \u2502 COMPETED \u2502\u2502\u2502 102 \u2502 28 \u2502 COMPLETED \u2502\u2502\u2502 103 \u2502 20 \u2502 IN PROGRESS \u2502\u2502 \u2502\u2514\u2500\u2500\u2518 \u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Notice that the Math row was given an extra element with an empty nested array by the Mix function in order to match with the shape of CS row \u2191\u2191school \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502MATH\u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502101 \u250230 \u2502COMPETED \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502102 \u250237 \u2502CANCELLED \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502CS \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502101 \u250253 \u2502COMPETED \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502102 \u250228 \u2502COMPLETED \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502103 \u250220 \u2502IN PROGRESS\u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 The depth of an array can be obtained explicitly using the monadic \u2261 depth function. \u2261 10 \u235d The depth of a scalar is 0 0 \u2373 10 1 2 3 4 5 6 7 8 9 10 \u2261\u2373 10 1 \u2261 10 10 \u2374 \u2373 10 1 nested \u2190 2 2 \u2374 ( \u2373 3 ) ( ' ' ) ( ' ' ) ( 2 2 \u2374 ( ' ' ) ( \u2373 3 ) ( 2 2 \u2374 ( \u2373 3 ) ( ' ' ) ( ' ' ) ( \u2373 2 )) ( ' ' )) nested \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 1 2 3 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502 \u2502\u2502 \u2502 1 2 3 \u2502\u2502 \u2502 \u2502\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502 \u2502\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\u2502 \u2502\u2502 \u2502 \u2502\u2502\u2502 1 2 3 \u2502 \u2502\u2502 \u2502\u2502 \u2502 \u2502\u2502\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\u2502 \u2502\u2502 \u2502 \u2502\u2502\u2502 \u2502 1 2 \u2502\u2502 \u2502\u2502 \u2502 \u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\u2502 \u2502\u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2261 nested \u00af4 We might expect a depth of 4 for the last array, but for arrays with elements with differing depths, the depth function returns the negative of the maximum depth of the array.","title":"Anything can be a scalar"},{"location":"course/ch5/part3/","text":"(Un)matrixification This part will cover Mix Split Ravel Laminate","title":"5.3 - (Un)matrixification"},{"location":"course/ch5/part3/#unmatrixification","text":"This part will cover Mix Split Ravel Laminate","title":"(Un)matrixification"},{"location":"course/ch5/part4/","text":"Selections and reductions This part will cover The reduction and scan functions on matrices Selecting on different axes","title":"5.4 - Selections and reductions"},{"location":"course/ch5/part4/#selections-and-reductions","text":"This part will cover The reduction and scan functions on matrices Selecting on different axes","title":"Selections and reductions"},{"location":"course/ch5/part5/","text":"Cross-tabulation This part will cover Cross-tabulation Reducing and selecting in higher dimensions Applying this to data storage and data analysis","title":"5.5 - Cross-tabulation"},{"location":"course/ch5/part5/#cross-tabulation","text":"This part will cover Cross-tabulation Reducing and selecting in higher dimensions Applying this to data storage and data analysis","title":"Cross-tabulation"},{"location":"course/ch5/read/","text":"Read exercises For each of the following exercises, try to figure out what the input will produce in the TryAPL terminal. Check your answers by opening the \"Output\" tab. If you think an error will occur, try to predict which error it will be and where the arrow will point to. The exercises are not checked or graded: use them to check your knowledge!","title":"5.R - Read exercises"},{"location":"course/ch5/read/#read-exercises","text":"For each of the following exercises, try to figure out what the input will produce in the TryAPL terminal. Check your answers by opening the \"Output\" tab. If you think an error will occur, try to predict which error it will be and where the arrow will point to. The exercises are not checked or graded: use them to check your knowledge!","title":"Read exercises"},{"location":"course/ch5/summary/","text":"Function index Here is a table of symbols we have used and how to type them in TryAPL. It might be useful to review this page as you are doing the read and write exercises in the next sections. New functions Symbol Name Function Key combination Old functions Symbol Name Function Key combination + Plus Addition + - Minus Subtraction - \u00d7 Times Multiplication PREFIX - \u00f7 Divide Division PREFIX = * Power Exponentiation * \u00af Negative sign Negation of a number PREFIX 2 \u235d Lamp Comment PREFIX , \u2190 Assignment operator Assigning variables < - Tab \u2395 Quad Printing PREFIX L","title":"5.S - Summary"},{"location":"course/ch5/summary/#function-index","text":"Here is a table of symbols we have used and how to type them in TryAPL. It might be useful to review this page as you are doing the read and write exercises in the next sections.","title":"Function index"},{"location":"course/ch5/summary/#new-functions","text":"Symbol Name Function Key combination","title":"New functions"},{"location":"course/ch5/summary/#old-functions","text":"Symbol Name Function Key combination + Plus Addition + - Minus Subtraction - \u00d7 Times Multiplication PREFIX - \u00f7 Divide Division PREFIX = * Power Exponentiation * \u00af Negative sign Negation of a number PREFIX 2 \u235d Lamp Comment PREFIX , \u2190 Assignment operator Assigning variables < - Tab \u2395 Quad Printing PREFIX L","title":"Old functions"},{"location":"course/ch5/write/","text":"Write exercises Submit APL code for the following exercises. Your submissions are graded using TMC. Make sure to log in to be able to submit your work! Remember, you can test out ideas and develop you solution at TryAPL before submitting it here. You can submit as many solutions as you like. If you submit a correct solution at least once, you will receive points on the TMC server and be able to see the model solution. If the write problem is red, it is unsolved. If it it green, you have solved it and received points for it on the server.","title":"5.W - Write exercises"},{"location":"course/ch5/write/#write-exercises","text":"Submit APL code for the following exercises. Your submissions are graded using TMC. Make sure to log in to be able to submit your work! Remember, you can test out ideas and develop you solution at TryAPL before submitting it here. You can submit as many solutions as you like. If you submit a correct solution at least once, you will receive points on the TMC server and be able to see the model solution. If the write problem is red, it is unsolved. If it it green, you have solved it and received points for it on the server.","title":"Write exercises"},{"location":"course/ch6/bonus/","text":"Bonus content: Minesweeper in APL and Python This part is optional This part is considered to be bonus content. It contains some more advanced topics that are not covered in the main course. It can also give some examples of functions and topics that are introuced later in the course. There are no exercises related to this content. Feel free to skim or skip this section for now, and return to it later! One of the central advantages of APL over other programming languages is that it provides a powerful notation for reasoning about higher dimensional data. When writing code in other languages, there are times where using this notation would simplify code significantly, and luckily, APL code can be used in Python programs, and vice versa, using the Py'n'APL interface. In this section, we will write a simple minesweeper game in APL, using Py'n'APL to connect to a user interface written in Python. The Py'n'APL interface can be downloaded from the Dyalog repository. To start, create a python file inside the same directory as pynapl , and paste the following example code. from pynapl import APL apl = APL . APL () print ( apl . eval ( \"3 3\u2374\u2206\" , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 )) apl . eval ( \"a \u2190 \u2206\" , 57 ) print ( apl . eval ( \"a\u00f73\" )) The output should be [[1, 2, 3], [4, 5, 6], [7, 8, 9]] and [19] . The above code starts and connects to a Dyalog session. The session can then be sent commands using the eval function. Extra arguments to the eval function are substituted for \u2206 in the eval expression; above, the arguments 1, 2, 3, 4, 5, 6, 7, 8, 9 are passed as an array replacing \u2206 in 3 3\u2374\u2206 . The Dyalog session should be thought of like any other session, with its own variables. from pynapl import APL apl = APL . APL () apl . eval ( \"a \u2190 \u23733 3\" ) print ( apl . eval ( \"a\" )) The result should be [[[1, 1], [1, 2], [1, 3]], [[2, 1], [2, 2], [2, 3]], [[3, 1], [3, 2], [3, 3]]] . APL functions can be defined using the apl.fn function which, if assigned in Python, can be used like any other Python function. from pynapl import APL apl = APL . APL () average = apl . fn ( \"+/\u00f7\u2262\" ) print ( average ([ 1 , 2 , 3 , 4 , 5 ])) The result is 3. To define functions in APL, fix is used rather than than the eval . from pynapl import APL apl = APL . APL () apl . fix ( \"average \u2190 +/\u00f7\u2262\" ) print ( apl . eval ( \"average 1 2 3 4 5\" )) The result is 3. Minesweeper is a logic game, where the goal is to find out the location of all hidden 'mines' on a board. The size of the board and number of mines vary depending on difficulty; here we will implement a rectangular board of width 30 and height 16, with 99 mines. When the user left-clicks on a tile that does not contain a mine on the board, that tile is uncovered. Uncovered tiles display the total number of mines that are in adjacent tiles (including diagonals!). If the tile has no adjacent mines, then it reveals the adjacent tiles automatically. If the user left-clicks on a tile containing a mine, the game is lost and the mines are detonated. If the user right-clicks on a tile, that tile is flagged, representing where the user believes a mine is. The game is won when all hidden mine tiles are flagged, and all other tiles are uncovered. We recommend the reader to play at-least one game of minesweeper, in order to get familiar with the rules we will implement. We first need to create the board, which will be represented with a 2D matrix of values, 1 being mine and 0 a blank tile. board \u2190 16 30 \u2374 0 Random unique positions for the mines can be obtained using deal ? dyadic function. 99 ? 16 \u00d7 30 215 385 164 68 310 453 255 115 28 234 239 456 243 39 302 447 263 383 94 236 10 337 35 98 432 127 403 431 408 237 356 330 2 30 201 351 438 130 377 434 71 258 34 13 312 55 62 95 137 382 387 154 3 66 427 12 257 30 70 113 304 283 50 180 207 22 7 77 333 409 53 369 473 428 266 100 24 297 323 424 309 276 160 170 110 460 459 184 376 364 268 256 328 305 174 196 6 0 359 350 396 6 it is possible to see which 2D positions these numbers encode using the encode \u22a4 function ( 16 30 \u22a4 ( 99 ? 16 \u00d7 30 )) 8 10 8 13 8 4 11 14 0 10 4 1 11 9 5 6 9 12 10 6 11 3 14 14 2 12 5 1 10 5 15 14 5 11 5 2 0 14 0 2 9 12 11 1 17 20 12 15 7 27 6 0 8 24 19 22 27 12 29 23 7 18 11 11 12 2 29 18 3 3 12 9 5 20 17 8 1 16 27 0 15 3 24 19 19 26 0 4 13 7 7 4 1 6 10 5 3 10 12 9 14 14 3 15 7 2 13 0 3 3 6 10 8 4 15 2 10 5 5 4 13 11 8 15 15 13 6 11 1 4 2 13 10 20 15 14 7 13 3 23 29 4 25 7 24 28 22 17 8 4 7 20 1 6 17 3 20 1 12 7 9 7 1 21 8 13 11 12 27 1 1 5 14 2 7 4 0 9 7 6 6 9 3 9 15 11 9 27 6 23 20 6 21 12 1 10 10 8 28 ( 16 30 \u22a4 ( 99 ? 16 \u00d7 30 )) [; 1 ] 7 27 Assigning these positions to 1 on the board by (un)raveling the board into a vector, then using the @ at operator positions \u2190 99 ? 16 \u00d7 30 board \u2190 , board board 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ( 1 @ positions ) board 0 0 0 0 0 1 0 0 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 1 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 1 1 1 1 0 0 0 1 0 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 1 1 0 0 0 0 0 1 0 0 1 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0 1 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 1 1 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 1 0 0 0 1 1 0 1 0 0 0 1 0 1 1 0 0 1 board \u2190 16 30 \u2374 board Putting this operation in a single Python function from pynapl import APL apl = APL . APL () def new_board (): apl . eval ( \"board \u2190 (16\u00d730) \u2374 0\" ) apl . eval ( \"board \u2190 (1 @ (99 ? 16\u00d730)) board\" ) apl . eval ( \"board \u2190 16 30 \u2374 board\" ) new_board (); print ( apl . eval ( \"board\" )); # The output is #[[0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], #[1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], #[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], #[0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0], #[0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #[0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], #[0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], #[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0], #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1], #[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0], #[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], #[0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0], #[0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0], #[0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], #[0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0], #[0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0]] Next, we need to obtain the number of adjacent mines for every tile on the board. Consider a 1-dimensional board first, for simplicity. board \u2190 1 - \u2368 ? 7 \u2374 2 0 1 1 1 0 1 1 What is needed is a function that takes length 3 sections of the above board, and sums them up to give a new board of values. adjacency \u2190 ( 0 + 1 ) ( 0 + 1 + 1 ) ( 1 + 1 + 1 ) ( 1 + 1 + 0 ) ( 1 + 0 + 1 ) ( 0 + 1 + 1 ) ( 1 + 1 ) This can be partly obtained using the / windowed reduction operator applied to + plus and a left argument of 3. 3 , / board 0 1 1 1 1 1 1 1 0 1 0 1 0 1 1 3 + / board 2 3 2 2 2 Notice that the windowed reduction operator did not include the values at the left and right, (0+1) and (1+1) , edges of the board. This can be remedied by padding the board with zeroes on either side, the @ function can be used to do this. board 0 1 1 1 0 1 1 \u2374 board 7 \u2373 \u2374 board 1 2 3 4 5 6 7 1 + \u2373 \u2374 board 2 3 4 5 6 7 8 (( \u2374 board ) + 2 ) \u2374 0 0 0 0 0 0 0 0 0 0 ( board @ ( 1 + \u2373 \u2374 board ))(( \u2374 board ) + 2 ) \u2374 0 0 0 1 1 1 0 1 1 0 3 + / ( board @ ( 1 + \u2373 \u2374 board ))(( \u2374 board ) + 2 ) \u2374 0 1 2 3 2 2 2 2 The advantage of using the @ function is that it can be generalised to matrices, too. board \u2190 5 5 \u2374 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 + \u2373 \u2374 board 2 2 2 3 2 4 2 5 2 6 3 2 3 3 3 4 3 5 3 6 4 2 4 3 4 4 4 5 4 6 5 2 5 3 5 4 5 5 5 6 6 2 6 3 6 4 6 5 6 6 (( \u2374 board ) + 2 ) \u2374 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ( board @ ( 1 + \u2373 \u2374 board ))(( \u2374 board ) + 2 ) \u2374 0 0 0 0 0 0 0 0 0 1 1 1 1 1 0 0 1 1 1 1 1 0 0 1 1 1 1 1 0 0 1 1 1 1 1 0 0 1 1 1 1 1 0 0 0 0 0 0 0 0 The 2-dimensional generalisation of the +/ windowed reduce function is the stencil \u233a operator. The stencil operator takes in a right argument vector which specifies the size of the window, similarly to the left argument to the windowed reduce function, and a left argument which specifies the function to be applied to the window. board \u2190 7 \u2374 1 ( { \u2282 \u2375 } \u233a 3 ) board \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 Notice that it includes the edges, unlike the windowed reduce function. board \u2190 5 5 \u2374 1 ( { \u2282 \u2375 } \u233a 3 3 ) board \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 \u2502 0 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 0 \u2502 \u2502 0 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 0 \u2502 \u2502 0 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 0 \u2502 \u2502 0 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 0 \u2502 \u2502 0 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 0 \u2502 \u2502 0 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 0 \u2502 \u2502 0 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 0 \u2502 \u2502 0 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 0 \u2502 \u2502 0 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 0 \u2502 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 board \u2190 1 - \u2368 ? 5 5 \u2374 2 board 0 0 0 0 0 1 1 1 1 1 0 0 1 1 0 1 0 0 1 0 0 1 0 1 0 ( { + / , \u2375 } \u233a 3 3 ) board 2 3 3 3 2 2 4 5 5 3 3 5 6 6 4 2 3 5 4 3 2 2 3 2 2 Putting this in a python function def calculate_adjacency (): apl . eval ( \"adjacency \u2190 ({+/,\u2375}\u233a3 3)board\" ) The last thing that is needed is a function to decide what happens when a tile is clicked. The first thing to implement is the uncovering of tiles. Whenever a tile that does not contain a mine is left-clicked, it is uncovered, and any tiles with no adjacent mines automatically uncover the adjacent tiles. We will use \u00af1 to denote uncovered tiles on the board. For checking if the tile is a mine, we write a simple is_mine function that can be called from the Python code is_mine \u2190 { ( \u2375 \u2337 board ) = 1 } board \u2190 1 - \u2368 ? 5 5 \u2374 2 board 0 1 1 1 0 1 0 0 1 0 0 1 0 0 1 1 1 1 0 1 0 1 0 0 0 is_mine \u2282 ( 1 2 ) 1 We will write the tile uncovering algorithm recursively. If the tile clicked does not have any adjacent mines, then the tiles adjacent to that tile are uncovered too, forming a list of tile positions to be uncovered in the process. This is the usual flood-fill algorithm. The following function makes sure the indices we are checking are not beyond the bounds of the board matrix. in_bounds \u2190 { \u2227 / \u220a ( \u2375 <\u2374 board )( \u2375 > ( 0 0 )) } For example, using the clearly invalid index \u00af1 3 , it is less than the maximum index \u2374board , but not greater than (0 0) . \u2374 board 5 5 \u00af1 3 < \u2374 board 1 1 0 0 < \u00af1 3 0 1 \u220a ( \u00af1 3 < \u2374 board )( 0 0 < \u00af1 3 ) 1 1 0 1 \u2227 / \u220a ( \u00af1 3 < \u2374 board )( 0 0 < \u00af1 3 ) 0 in_bounds \u00af1 3 0 directions \u2190 ( 1 0 )( 0 1 )( \u00af1 0 )( 0 \u00af1 )( 1 1 )( \u00af1 \u00af1 )( 1 \u00af1 )( \u00af1 1 ) uncover \u2190 { ( in_bounds \u2375 ) = 0 : \u236c \u22c4 \u2375 \u2337 adjacency = 0 : ( \u2282 \u2375 ) , uncover \u00a8 (( \u2282 \u2375 ) + \u00a8 directions ) \u22c4 \u2375 } board \u2190 ( 0 @ ( 1 + \u2373 3 3 ))( 5 5 ) \u2374 1 board 1 1 1 1 1 1 0 0 0 1 1 0 0 0 1 1 0 0 0 1 1 1 1 1 1 adjacency \u2190 ( { + / , \u2375 } \u233a 3 3 ) board adjacency 3 4 3 4 3 4 5 3 5 4 3 3 0 3 3 4 5 3 5 4 3 4 3 4 3 uncover 3 3 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 3 3 \u2502 4 3 \u2502 3 4 \u2502 2 3 \u2502 3 2 \u2502 4 4 \u2502 2 2 \u2502 4 2 \u2502 2 4 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 The uncover function constructs a list of indices to mark as uncovered. The function first checks if the index is within the right bounds, if not it returns an empty array. If it is in the right bounds and it has no adjacent mines, then it returns the index catenated to the result of uncovering the tiles in all directions (since a tile with no adjacent mines needs to uncover all adjacent tiles), otherwise it just returns the index of the tile. Notice how the enclose functions is used here to apply + between \u2375 and every direction. Finally, the @ at operator can be used to replace the board indices to be uncovered with \u00af1 . ( \u00af1 @ ( uncover 3 3 )) board 1 1 1 1 1 1 \u00af1 \u00af1 \u00af1 1 1 \u00af1 \u00af1 \u00af1 1 1 \u00af1 \u00af1 \u00af1 1 1 1 1 1 1 Putting these functions in the Python code from pynapl import APL apl = APL . APL () def new_board (): apl . eval ( \"board \u2190 (16\u00d730) \u2374 0\" ) apl . eval ( \"board \u2190 (1 @ (99 ? 16\u00d730)) board\" ) apl . eval ( \"board \u2190 16 30 \u2374 board\" ) def calculate_adjacency (): apl . eval ( \"adjacency \u2190 ({+/,\u2375}\u233a3 3)board\" ) apl . fix ( \"in_bounds \u2190 {(+/\u2375<\u2374board)\u2227(\u2227/\u2375>(0 0))>0}\" ) apl . eval ( \"directions \u2190 (1 0)(0 1)(\u00af1 0)(0 \u00af1)(1 1)(\u00af1 \u00af1)(1 \u00af1)(\u00af1 1)\" ) apl . fix ( \"uncover \u2190 {(in_bounds \u2375)=0: \u236c \u22c4 \u2375\u2337adjacency=0: (\u2282\u2375), uncover\u00a8((\u2282\u2375)+\u00a8directions) \u22c4 \u2375}\" ) is_mine = apl . fn ( \"{(\u2375\u2337board)=1}\" ) def uncover ( x , y ): if ( is_mine ([ x , y ])): # Lose return apl . eval ( \"board \u2190 (\u00af1@(uncover \u2206))board\" , x , y ) apl . eval ( \"board \u2190 (0@(1 + \u2373 3 3))(5 5)\u23741\" ) calculate_adjacency (); uncover ( 3 , 3 ); print ( apl . eval ( \"board\" )) The result is [[1, 1, 1, 1, 1], [1, -1, -1, -1, 1], [1, -1, -1, -1, 1], [1, -1, -1, -1, 1], [1, 1, 1, 1, 1]] , as is expected. The last piece of logic needed is flagging, and win/loss states. We will create a separate board to keep track of tile icons, '\u2691' for flags, '\u26ef' for mines, and numbers for adjacency numbers of uncovered tiles. We write a function that takes in a tile index to be flagged, and flags it if it is not already uncovered. apl . eval ( \"labels \u2190 (\u2374 board) \u2374 ' '\" ) def flag ( x , y ): if ( apl . eval ( \"\u2206\u2337board\" , x , y ) !=- 1 ): #Not uncovered apl . eval ( \"\u2206\u2337labels \u2190 \\' \u2691 \\' \" , x , y ) We also need to update the adjacency numbers shown to the player when more tiles are uncovered. The labels matrix should have the values in the adjacency matrix where the board matrix has a \u00af1 value (where a tile is uncovered). First find where board is \u00af1 , then selectively assign the adjacency values to the labels. labels \u2190 ( \u2374 board ) \u2374 ' ' board \u2190 1 - \u2368 ? 5 5 \u2374 2 adjacency \u2190 ({ +/ , \u2375 } \u233a 3 3 ) board board 1 1 0 0 1 1 0 0 1 0 0 1 1 1 1 0 1 0 1 0 1 1 0 1 0 adjacency 3 3 2 2 2 4 5 5 5 4 3 4 6 5 4 4 5 7 5 4 3 3 4 2 2 board [ 1 ; 3 ] \u2190 \u00af 1 board [ 1 ; 4 ] \u2190 \u00af 1 board 1 1 \u00af 1 \u00af 1 1 1 0 0 1 0 0 1 1 1 1 0 1 0 1 0 1 1 0 1 0 board = \u00af 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 (( board = \u00af 1 ) / \u00a8 labels ) \u2190 adjacency labels 2 2 Putting this in our uncover function def uncover ( x , y ): if ( is_mine ([ x , y ])): # Lose return apl . eval ( \"board \u2190 (\u00af1@(uncover \u2206))board\" , x , y ) apl . eval ( \"((board=\u00af1)/\u00a8labels) \u2190 adjacency\" ) Revealing mines when the game is lost def uncover ( x , y ): if ( is_mine ([ x , y ])): apl . eval ( \"((board=1)/\u00a8labels) \u2190 \\' \u26ef \\' \" ) # Lose return apl . eval ( \"board \u2190 (\u00af1@(uncover \u2206))board\" , x , y ) apl . eval ( \"((board=\u00af1)/\u00a8labels) \u2190 adjacency\" )","title":"6.B - Minesweeper in APL and Python"},{"location":"course/ch6/bonus/#bonus-content-minesweeper-in-apl-and-python","text":"This part is optional This part is considered to be bonus content. It contains some more advanced topics that are not covered in the main course. It can also give some examples of functions and topics that are introuced later in the course. There are no exercises related to this content. Feel free to skim or skip this section for now, and return to it later! One of the central advantages of APL over other programming languages is that it provides a powerful notation for reasoning about higher dimensional data. When writing code in other languages, there are times where using this notation would simplify code significantly, and luckily, APL code can be used in Python programs, and vice versa, using the Py'n'APL interface. In this section, we will write a simple minesweeper game in APL, using Py'n'APL to connect to a user interface written in Python. The Py'n'APL interface can be downloaded from the Dyalog repository. To start, create a python file inside the same directory as pynapl , and paste the following example code. from pynapl import APL apl = APL . APL () print ( apl . eval ( \"3 3\u2374\u2206\" , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 )) apl . eval ( \"a \u2190 \u2206\" , 57 ) print ( apl . eval ( \"a\u00f73\" )) The output should be [[1, 2, 3], [4, 5, 6], [7, 8, 9]] and [19] . The above code starts and connects to a Dyalog session. The session can then be sent commands using the eval function. Extra arguments to the eval function are substituted for \u2206 in the eval expression; above, the arguments 1, 2, 3, 4, 5, 6, 7, 8, 9 are passed as an array replacing \u2206 in 3 3\u2374\u2206 . The Dyalog session should be thought of like any other session, with its own variables. from pynapl import APL apl = APL . APL () apl . eval ( \"a \u2190 \u23733 3\" ) print ( apl . eval ( \"a\" )) The result should be [[[1, 1], [1, 2], [1, 3]], [[2, 1], [2, 2], [2, 3]], [[3, 1], [3, 2], [3, 3]]] . APL functions can be defined using the apl.fn function which, if assigned in Python, can be used like any other Python function. from pynapl import APL apl = APL . APL () average = apl . fn ( \"+/\u00f7\u2262\" ) print ( average ([ 1 , 2 , 3 , 4 , 5 ])) The result is 3. To define functions in APL, fix is used rather than than the eval . from pynapl import APL apl = APL . APL () apl . fix ( \"average \u2190 +/\u00f7\u2262\" ) print ( apl . eval ( \"average 1 2 3 4 5\" )) The result is 3. Minesweeper is a logic game, where the goal is to find out the location of all hidden 'mines' on a board. The size of the board and number of mines vary depending on difficulty; here we will implement a rectangular board of width 30 and height 16, with 99 mines. When the user left-clicks on a tile that does not contain a mine on the board, that tile is uncovered. Uncovered tiles display the total number of mines that are in adjacent tiles (including diagonals!). If the tile has no adjacent mines, then it reveals the adjacent tiles automatically. If the user left-clicks on a tile containing a mine, the game is lost and the mines are detonated. If the user right-clicks on a tile, that tile is flagged, representing where the user believes a mine is. The game is won when all hidden mine tiles are flagged, and all other tiles are uncovered. We recommend the reader to play at-least one game of minesweeper, in order to get familiar with the rules we will implement. We first need to create the board, which will be represented with a 2D matrix of values, 1 being mine and 0 a blank tile. board \u2190 16 30 \u2374 0 Random unique positions for the mines can be obtained using deal ? dyadic function. 99 ? 16 \u00d7 30 215 385 164 68 310 453 255 115 28 234 239 456 243 39 302 447 263 383 94 236 10 337 35 98 432 127 403 431 408 237 356 330 2 30 201 351 438 130 377 434 71 258 34 13 312 55 62 95 137 382 387 154 3 66 427 12 257 30 70 113 304 283 50 180 207 22 7 77 333 409 53 369 473 428 266 100 24 297 323 424 309 276 160 170 110 460 459 184 376 364 268 256 328 305 174 196 6 0 359 350 396 6 it is possible to see which 2D positions these numbers encode using the encode \u22a4 function ( 16 30 \u22a4 ( 99 ? 16 \u00d7 30 )) 8 10 8 13 8 4 11 14 0 10 4 1 11 9 5 6 9 12 10 6 11 3 14 14 2 12 5 1 10 5 15 14 5 11 5 2 0 14 0 2 9 12 11 1 17 20 12 15 7 27 6 0 8 24 19 22 27 12 29 23 7 18 11 11 12 2 29 18 3 3 12 9 5 20 17 8 1 16 27 0 15 3 24 19 19 26 0 4 13 7 7 4 1 6 10 5 3 10 12 9 14 14 3 15 7 2 13 0 3 3 6 10 8 4 15 2 10 5 5 4 13 11 8 15 15 13 6 11 1 4 2 13 10 20 15 14 7 13 3 23 29 4 25 7 24 28 22 17 8 4 7 20 1 6 17 3 20 1 12 7 9 7 1 21 8 13 11 12 27 1 1 5 14 2 7 4 0 9 7 6 6 9 3 9 15 11 9 27 6 23 20 6 21 12 1 10 10 8 28 ( 16 30 \u22a4 ( 99 ? 16 \u00d7 30 )) [; 1 ] 7 27 Assigning these positions to 1 on the board by (un)raveling the board into a vector, then using the @ at operator positions \u2190 99 ? 16 \u00d7 30 board \u2190 , board board 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ( 1 @ positions ) board 0 0 0 0 0 1 0 0 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 1 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 1 1 1 1 0 0 0 1 0 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 1 1 0 0 0 0 0 1 0 0 1 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0 1 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 1 1 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 1 0 0 0 1 1 0 1 0 0 0 1 0 1 1 0 0 1 board \u2190 16 30 \u2374 board Putting this operation in a single Python function from pynapl import APL apl = APL . APL () def new_board (): apl . eval ( \"board \u2190 (16\u00d730) \u2374 0\" ) apl . eval ( \"board \u2190 (1 @ (99 ? 16\u00d730)) board\" ) apl . eval ( \"board \u2190 16 30 \u2374 board\" ) new_board (); print ( apl . eval ( \"board\" )); # The output is #[[0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], #[1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], #[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], #[0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0], #[0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #[0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], #[0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], #[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0], #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1], #[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0], #[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], #[0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0], #[0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0], #[0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], #[0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0], #[0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0]] Next, we need to obtain the number of adjacent mines for every tile on the board. Consider a 1-dimensional board first, for simplicity. board \u2190 1 - \u2368 ? 7 \u2374 2 0 1 1 1 0 1 1 What is needed is a function that takes length 3 sections of the above board, and sums them up to give a new board of values. adjacency \u2190 ( 0 + 1 ) ( 0 + 1 + 1 ) ( 1 + 1 + 1 ) ( 1 + 1 + 0 ) ( 1 + 0 + 1 ) ( 0 + 1 + 1 ) ( 1 + 1 ) This can be partly obtained using the / windowed reduction operator applied to + plus and a left argument of 3. 3 , / board 0 1 1 1 1 1 1 1 0 1 0 1 0 1 1 3 + / board 2 3 2 2 2 Notice that the windowed reduction operator did not include the values at the left and right, (0+1) and (1+1) , edges of the board. This can be remedied by padding the board with zeroes on either side, the @ function can be used to do this. board 0 1 1 1 0 1 1 \u2374 board 7 \u2373 \u2374 board 1 2 3 4 5 6 7 1 + \u2373 \u2374 board 2 3 4 5 6 7 8 (( \u2374 board ) + 2 ) \u2374 0 0 0 0 0 0 0 0 0 0 ( board @ ( 1 + \u2373 \u2374 board ))(( \u2374 board ) + 2 ) \u2374 0 0 0 1 1 1 0 1 1 0 3 + / ( board @ ( 1 + \u2373 \u2374 board ))(( \u2374 board ) + 2 ) \u2374 0 1 2 3 2 2 2 2 The advantage of using the @ function is that it can be generalised to matrices, too. board \u2190 5 5 \u2374 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 + \u2373 \u2374 board 2 2 2 3 2 4 2 5 2 6 3 2 3 3 3 4 3 5 3 6 4 2 4 3 4 4 4 5 4 6 5 2 5 3 5 4 5 5 5 6 6 2 6 3 6 4 6 5 6 6 (( \u2374 board ) + 2 ) \u2374 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ( board @ ( 1 + \u2373 \u2374 board ))(( \u2374 board ) + 2 ) \u2374 0 0 0 0 0 0 0 0 0 1 1 1 1 1 0 0 1 1 1 1 1 0 0 1 1 1 1 1 0 0 1 1 1 1 1 0 0 1 1 1 1 1 0 0 0 0 0 0 0 0 The 2-dimensional generalisation of the +/ windowed reduce function is the stencil \u233a operator. The stencil operator takes in a right argument vector which specifies the size of the window, similarly to the left argument to the windowed reduce function, and a left argument which specifies the function to be applied to the window. board \u2190 7 \u2374 1 ( { \u2282 \u2375 } \u233a 3 ) board \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 Notice that it includes the edges, unlike the windowed reduce function. board \u2190 5 5 \u2374 1 ( { \u2282 \u2375 } \u233a 3 3 ) board \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 \u2502 0 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 0 \u2502 \u2502 0 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 0 \u2502 \u2502 0 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 0 \u2502 \u2502 0 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 0 \u2502 \u2502 0 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 0 \u2502 \u2502 0 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 0 \u2502 \u2502 0 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 0 \u2502 \u2502 0 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 0 \u2502 \u2502 0 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 1 \u2502 1 1 0 \u2502 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 0 0 0 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 board \u2190 1 - \u2368 ? 5 5 \u2374 2 board 0 0 0 0 0 1 1 1 1 1 0 0 1 1 0 1 0 0 1 0 0 1 0 1 0 ( { + / , \u2375 } \u233a 3 3 ) board 2 3 3 3 2 2 4 5 5 3 3 5 6 6 4 2 3 5 4 3 2 2 3 2 2 Putting this in a python function def calculate_adjacency (): apl . eval ( \"adjacency \u2190 ({+/,\u2375}\u233a3 3)board\" ) The last thing that is needed is a function to decide what happens when a tile is clicked. The first thing to implement is the uncovering of tiles. Whenever a tile that does not contain a mine is left-clicked, it is uncovered, and any tiles with no adjacent mines automatically uncover the adjacent tiles. We will use \u00af1 to denote uncovered tiles on the board. For checking if the tile is a mine, we write a simple is_mine function that can be called from the Python code is_mine \u2190 { ( \u2375 \u2337 board ) = 1 } board \u2190 1 - \u2368 ? 5 5 \u2374 2 board 0 1 1 1 0 1 0 0 1 0 0 1 0 0 1 1 1 1 0 1 0 1 0 0 0 is_mine \u2282 ( 1 2 ) 1 We will write the tile uncovering algorithm recursively. If the tile clicked does not have any adjacent mines, then the tiles adjacent to that tile are uncovered too, forming a list of tile positions to be uncovered in the process. This is the usual flood-fill algorithm. The following function makes sure the indices we are checking are not beyond the bounds of the board matrix. in_bounds \u2190 { \u2227 / \u220a ( \u2375 <\u2374 board )( \u2375 > ( 0 0 )) } For example, using the clearly invalid index \u00af1 3 , it is less than the maximum index \u2374board , but not greater than (0 0) . \u2374 board 5 5 \u00af1 3 < \u2374 board 1 1 0 0 < \u00af1 3 0 1 \u220a ( \u00af1 3 < \u2374 board )( 0 0 < \u00af1 3 ) 1 1 0 1 \u2227 / \u220a ( \u00af1 3 < \u2374 board )( 0 0 < \u00af1 3 ) 0 in_bounds \u00af1 3 0 directions \u2190 ( 1 0 )( 0 1 )( \u00af1 0 )( 0 \u00af1 )( 1 1 )( \u00af1 \u00af1 )( 1 \u00af1 )( \u00af1 1 ) uncover \u2190 { ( in_bounds \u2375 ) = 0 : \u236c \u22c4 \u2375 \u2337 adjacency = 0 : ( \u2282 \u2375 ) , uncover \u00a8 (( \u2282 \u2375 ) + \u00a8 directions ) \u22c4 \u2375 } board \u2190 ( 0 @ ( 1 + \u2373 3 3 ))( 5 5 ) \u2374 1 board 1 1 1 1 1 1 0 0 0 1 1 0 0 0 1 1 0 0 0 1 1 1 1 1 1 adjacency \u2190 ( { + / , \u2375 } \u233a 3 3 ) board adjacency 3 4 3 4 3 4 5 3 5 4 3 3 0 3 3 4 5 3 5 4 3 4 3 4 3 uncover 3 3 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 3 3 \u2502 4 3 \u2502 3 4 \u2502 2 3 \u2502 3 2 \u2502 4 4 \u2502 2 2 \u2502 4 2 \u2502 2 4 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 The uncover function constructs a list of indices to mark as uncovered. The function first checks if the index is within the right bounds, if not it returns an empty array. If it is in the right bounds and it has no adjacent mines, then it returns the index catenated to the result of uncovering the tiles in all directions (since a tile with no adjacent mines needs to uncover all adjacent tiles), otherwise it just returns the index of the tile. Notice how the enclose functions is used here to apply + between \u2375 and every direction. Finally, the @ at operator can be used to replace the board indices to be uncovered with \u00af1 . ( \u00af1 @ ( uncover 3 3 )) board 1 1 1 1 1 1 \u00af1 \u00af1 \u00af1 1 1 \u00af1 \u00af1 \u00af1 1 1 \u00af1 \u00af1 \u00af1 1 1 1 1 1 1 Putting these functions in the Python code from pynapl import APL apl = APL . APL () def new_board (): apl . eval ( \"board \u2190 (16\u00d730) \u2374 0\" ) apl . eval ( \"board \u2190 (1 @ (99 ? 16\u00d730)) board\" ) apl . eval ( \"board \u2190 16 30 \u2374 board\" ) def calculate_adjacency (): apl . eval ( \"adjacency \u2190 ({+/,\u2375}\u233a3 3)board\" ) apl . fix ( \"in_bounds \u2190 {(+/\u2375<\u2374board)\u2227(\u2227/\u2375>(0 0))>0}\" ) apl . eval ( \"directions \u2190 (1 0)(0 1)(\u00af1 0)(0 \u00af1)(1 1)(\u00af1 \u00af1)(1 \u00af1)(\u00af1 1)\" ) apl . fix ( \"uncover \u2190 {(in_bounds \u2375)=0: \u236c \u22c4 \u2375\u2337adjacency=0: (\u2282\u2375), uncover\u00a8((\u2282\u2375)+\u00a8directions) \u22c4 \u2375}\" ) is_mine = apl . fn ( \"{(\u2375\u2337board)=1}\" ) def uncover ( x , y ): if ( is_mine ([ x , y ])): # Lose return apl . eval ( \"board \u2190 (\u00af1@(uncover \u2206))board\" , x , y ) apl . eval ( \"board \u2190 (0@(1 + \u2373 3 3))(5 5)\u23741\" ) calculate_adjacency (); uncover ( 3 , 3 ); print ( apl . eval ( \"board\" )) The result is [[1, 1, 1, 1, 1], [1, -1, -1, -1, 1], [1, -1, -1, -1, 1], [1, -1, -1, -1, 1], [1, 1, 1, 1, 1]] , as is expected. The last piece of logic needed is flagging, and win/loss states. We will create a separate board to keep track of tile icons, '\u2691' for flags, '\u26ef' for mines, and numbers for adjacency numbers of uncovered tiles. We write a function that takes in a tile index to be flagged, and flags it if it is not already uncovered. apl . eval ( \"labels \u2190 (\u2374 board) \u2374 ' '\" ) def flag ( x , y ): if ( apl . eval ( \"\u2206\u2337board\" , x , y ) !=- 1 ): #Not uncovered apl . eval ( \"\u2206\u2337labels \u2190 \\' \u2691 \\' \" , x , y ) We also need to update the adjacency numbers shown to the player when more tiles are uncovered. The labels matrix should have the values in the adjacency matrix where the board matrix has a \u00af1 value (where a tile is uncovered). First find where board is \u00af1 , then selectively assign the adjacency values to the labels. labels \u2190 ( \u2374 board ) \u2374 ' ' board \u2190 1 - \u2368 ? 5 5 \u2374 2 adjacency \u2190 ({ +/ , \u2375 } \u233a 3 3 ) board board 1 1 0 0 1 1 0 0 1 0 0 1 1 1 1 0 1 0 1 0 1 1 0 1 0 adjacency 3 3 2 2 2 4 5 5 5 4 3 4 6 5 4 4 5 7 5 4 3 3 4 2 2 board [ 1 ; 3 ] \u2190 \u00af 1 board [ 1 ; 4 ] \u2190 \u00af 1 board 1 1 \u00af 1 \u00af 1 1 1 0 0 1 0 0 1 1 1 1 0 1 0 1 0 1 1 0 1 0 board = \u00af 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 (( board = \u00af 1 ) / \u00a8 labels ) \u2190 adjacency labels 2 2 Putting this in our uncover function def uncover ( x , y ): if ( is_mine ([ x , y ])): # Lose return apl . eval ( \"board \u2190 (\u00af1@(uncover \u2206))board\" , x , y ) apl . eval ( \"((board=\u00af1)/\u00a8labels) \u2190 adjacency\" ) Revealing mines when the game is lost def uncover ( x , y ): if ( is_mine ([ x , y ])): apl . eval ( \"((board=1)/\u00a8labels) \u2190 \\' \u26ef \\' \" ) # Lose return apl . eval ( \"board \u2190 (\u00af1@(uncover \u2206))board\" , x , y ) apl . eval ( \"((board=\u00af1)/\u00a8labels) \u2190 adjacency\" )","title":"Bonus content: Minesweeper in APL and Python"},{"location":"course/ch6/part1/","text":"String manipulation This part will cover Partition Partitioned enclose Interval index","title":"6.1 - String manipulation"},{"location":"course/ch6/part1/#string-manipulation","text":"This part will cover Partition Partitioned enclose Interval index","title":"String manipulation"},{"location":"course/ch6/part2/","text":"Inner and outer products This part will cover Inner products Outer products Matrix inverse Recall the Rank \u2364 operator which specified what rank cells a function acts on, M \u2190 ? 5 5 \u2374 10 3 2 2 9 5 9 2 10 8 2 3 4 6 5 2 9 3 5 3 2 8 8 6 8 8 ( \u2282 \u2364 2 ) M \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 3 2 2 9 5 \u2502 \u2502 9 2 10 8 2 \u2502 \u2502 3 4 6 5 2 \u2502 \u2502 9 3 5 3 2 \u2502 \u2502 8 8 6 8 8 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ( \u2282 \u2364 1 ) M \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 3 2 2 9 5 \u2502 9 2 10 8 2 \u2502 3 4 6 5 2 \u2502 9 3 5 3 2 \u2502 8 8 6 8 8 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ( \u2282 \u2364 0 ) M 3 2 2 9 5 9 2 10 8 2 3 4 6 5 2 9 3 5 3 2 8 8 6 8 8 As can be seen above, a rank-n cell of a rank-r array obtained by specifying the first (r-n) indices of the array. M [;] 3 2 2 9 5 9 2 10 8 2 3 4 6 5 2 9 3 5 3 2 8 8 6 8 8 M [ 1 ;] 3 2 2 9 5 M [ 1 ; 1 ] 3 This specifies the cells to act on monadically; for dyadic functions, two ranks must be specified, to be interpreted as matching up cells of a certain rank from the left argument with certain cells of the right argument. v \u2190 ? 5 \u2374 5 v 3 4 4 3 2 M \u2190 5 5 \u2374 \u2373 25 M 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \u235d See pairing of 0-cells of v and 1-cells of M v ( { \u237a , '-' , \u2375 } \u2364 ( 0 1 )) M 3 - 1 2 3 4 5 4 - 6 7 8 9 10 4 - 11 12 13 14 15 3 - 16 17 18 19 20 2 - 21 22 23 24 25 \u235d Pairing of 1-cells of v and 1-cells of M v ( { \u237a , '-' , \u2375 } \u2364 ( 1 1 )) M 3 4 4 3 2 - 1 2 3 4 5 3 4 4 3 2 - 6 7 8 9 10 3 4 4 3 2 - 11 12 13 14 15 3 4 4 3 2 - 16 17 18 19 20 3 4 4 3 2 - 21 22 23 24 25 N \u2190 5 5 \u2374 + \\ \u2373 25 N 1 3 6 10 15 21 28 36 45 55 66 78 91 105 120 136 153 171 190 210 231 253 276 300 325 \u235d Pairing of 1-cells of v and 1-cells of M N ( { \u237a , '-' , \u2375 } \u2364 ( 1 1 )) M 1 3 6 10 15 - 1 2 3 4 5 21 28 36 45 55 - 6 7 8 9 10 66 78 91 105 120 - 11 12 13 14 15 136 153 171 190 210 - 16 17 18 19 20 231 253 276 300 325 - 21 22 23 24 25 One commonly used operation is matching every pair of elements from two vectors, one way to write this is using each and rank \u2364 v1 \u2190 ? 5 \u2374 5 5 5 3 4 1 v2 \u2190 \u2395A [ ? 5 \u2374 26 ] HTOKY v1 ( , \u2364 ( 0 1 )) v2 5 HTOKY 5 HTOKY 3 HTOKY 4 HTOKY 1 HTOKY v1 ( , \u00a8\u2364 ( 0 1 )) v2 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 5 H \u2502 5 T \u2502 5 O \u2502 5 K \u2502 5 Y \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 5 H \u2502 5 T \u2502 5 O \u2502 5 K \u2502 5 Y \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 3 H \u2502 3 T \u2502 3 O \u2502 3 K \u2502 3 Y \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 4 H \u2502 4 T \u2502 4 O \u2502 4 K \u2502 4 Y \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 1 H \u2502 1 T \u2502 1 O \u2502 1 K \u2502 1 Y \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 There is a specific operator for this operation called the outer product (\u2218.f), this operator is special in that it takes a right function argument. v1 ( \u2218. , ) v2 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 5 H \u2502 5 T \u2502 5 O \u2502 5 K \u2502 5 Y \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 5 H \u2502 5 T \u2502 5 O \u2502 5 K \u2502 5 Y \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 3 H \u2502 3 T \u2502 3 O \u2502 3 K \u2502 3 Y \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 4 H \u2502 4 T \u2502 4 O \u2502 4 K \u2502 4 Y \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 1 H \u2502 1 T \u2502 1 O \u2502 1 K \u2502 1 Y \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 'POP' 'HEAVY' 'ALT' 'SYNTH' \u2218. , 'ROCK' 'METAL' 'PUNK' 'WAVE' \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 POPROCK \u2502 POPMETAL \u2502 POPPUNK \u2502 POPWAVE \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 HEAVYROCK \u2502 HEAVYMETAL \u2502 HEAVYPUNK \u2502 HEAVYWAVE \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 ALTROCK \u2502 ALTMETAL \u2502 ALTPUNK \u2502 ALTWAVE \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 SYNTHROCK \u2502 SYNTHMETAL \u2502 SYNTHPUNK \u2502 SYNTHWAVE \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u235d Multiplication table ( \u2373 10 )( \u2218. \u00d7 ) \u2373 10 1 2 3 4 5 6 7 8 9 10 2 4 6 8 10 12 14 16 18 20 3 6 9 12 15 18 21 24 27 30 4 8 12 16 20 24 28 32 36 40 5 10 15 20 25 30 35 40 45 50 6 12 18 24 30 36 42 48 54 60 7 14 21 28 35 42 49 56 63 70 8 16 24 32 40 48 56 64 72 80 9 18 27 36 45 54 63 72 81 90 10 20 30 40 50 60 70 80 90 100 \u235d Composite numbers ( 1 +\u2373 9 )( \u2218. \u00d7 ) 1 +\u2373 9 4 6 8 10 12 14 16 18 20 6 9 12 15 18 21 24 27 30 8 12 16 20 24 28 32 36 40 10 15 20 25 30 35 40 45 50 12 18 24 30 36 42 48 54 60 14 21 28 35 42 49 56 63 70 16 24 32 40 48 56 64 72 80 18 27 36 45 54 63 72 81 90 20 30 40 50 60 70 80 90 100 \u235d Prime numbers up to N as numbers minus composite numbers up to N/2 ( \u2373 100 ) ~ ( 1 +\u2373 49 )( \u2218. \u00d7 ) 1 +\u2373 49 1 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 In many applications, it is useful to reduce over the diagonal of the outer product. That is, match each element of the vectors in order, then reduce over them. The inner product of vectors is an example of this, which APL generalizes using the inner product (f.g) operator. v1 \u2190 3 - \u2368 ? 5 \u2374 5 v1 0 \u00af1 0 2 \u00af2 v2 \u2190 3 - \u2368 ? 5 \u2374 5 v2 \u00af1 \u00af2 2 0 0 v1 \u2218. \u00d7 v2 0 0 0 0 0 1 2 \u00af2 0 0 0 0 0 0 0 \u00af2 \u00af4 4 0 0 2 4 \u00af4 0 0 \u235d Diagonal ( 1 1 ) \u2218 \u2349 ( v1 \u2218. \u00d7 v2 ) 0 2 0 0 0 + / ( 1 1 ) \u2218 \u2349 ( v1 \u2218. \u00d7 v2 ) 2 v1 + . \u00d7 v2 2 \u235d Absolute difference between pairs of elements v1 \u2218. ( |- ) v2 1 2 2 0 0 0 1 3 1 1 1 2 2 0 0 3 4 0 2 2 1 0 4 2 2 \u235d Maximum absolute difference between all pairs of elements of two vectors \u2308 / , v1 \u2218. ( |- ) v2 4 \u235d Maximum absolute difference between matching elements of two vectors \u2308 / ( 1 1 ) \u2218 \u2349 v1 \u2218. ( |- ) v2 2 v1 \u2308 . ( |- ) v2 2 The inner product function +.\u00d7 applied to matrices is the matrix product function M \u2190 ( \u2373 5 ) \u2218. =\u2373 5 M 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 5 ? 5 3 4 2 1 5 M \u2190 M [ 5 ? 5 ;] M 0 0 0 1 0 0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 1 0 0 0 N \u2190 + \\ 5 5 \u2374 \u2373 6 N 1 3 6 10 15 6 7 9 12 16 5 11 12 14 17 4 9 15 16 18 3 7 12 18 19 M + . \u00d7 N 4 9 15 16 18 3 7 12 18 19 5 11 12 14 17 1 3 6 10 15 6 7 9 12 16 M \u2190 0 1 0 0 0 \u2218. \u00d7 0 0 1 0 0 M 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 M + . \u00d7 N 0 0 0 0 0 5 11 12 14 17 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 Using the matrix inverse \u2339 function to verify the multiplication M \u2190 + \\ 5 5 \u2374 \u2373 7 M 1 3 6 10 15 6 13 14 16 19 4 9 15 22 23 2 5 9 14 20 7 8 10 13 17 N \u2190 + \\ 5 5 \u2374 \u2373 6 N 1 3 6 10 15 6 7 9 12 16 5 11 12 14 17 4 9 15 16 18 3 7 12 18 19 L \u2190 M + . \u00d7 N L 134 285 435 560 630 275 540 789 1010 1185 290 599 891 1124 1292 193 406 615 790 895 208 423 633 820 960 L + . \u00d7\u2339 N 1 3 6 10 15 6 13 14 16 19 4 9 15 22 23 2 5 9 14 20 7 8 10 13 17 \u2339 M + . \u00d7 L 1 3 6 10 15 6 7 9 12 16 5 11 12 14 17 4 9 15 16 18 3 7 12 18 19 The matrix inverse \u2339 also takes the pseudoinverse of a matrix, if the inverse does not exist, which can be used to get least squares solutions of systems of linear equations when a unique solution is not possible. Take the example of a bakery, wanting to make the most out of their ingredients \u235d Recipes \u235d Flour Milk Sugar Butter Eggs Cake \u2190 450 0 700 500 6 Pancake \u2190 200 300 50 50 1 Cupcake \u2190 150 125 150 50 0 Cookies \u2190 280 0 250 200 2 Available \u2190 2200 1000 2200 1600 19 Since there are more ingredients than recipes, there will not be a unique solution to this problem. The system of equations here is \\[ \\text{Cakes}\\cdot\\begin{bmatrix}450\\\\ 0\\\\ 700\\\\ 500\\\\ 2 \\end{bmatrix}+\\text{Pancake}\\cdot\\begin{bmatrix}200\\\\ 300\\\\ 50\\\\ 50\\\\ 1 \\end{bmatrix}+\\text{Cupcakes}\\cdot\\begin{bmatrix}150\\\\ 125\\\\ 150\\\\ 50\\\\ 0 \\end{bmatrix}+\\text{Cookies}\\cdot\\begin{bmatrix}280\\\\ 0\\\\ 250\\\\ 200\\\\ 2 \\end{bmatrix}=\\begin{bmatrix} 2200\\\\ 1000\\\\ 2200\\\\ 1600\\\\ 19 \\end{bmatrix} \\] which can be written in matrix form as \\[ \\begin{bmatrix} 450 & 200 & 150 & 280 \\\\ 0 & 300 & 125 & 0 \\\\ 700 & 50 & 150 & 250 \\\\ 500 & 50 & 50 & 200 \\\\ 2 & 1 & 0 & 2 \\end{bmatrix} \\begin{bmatrix} \\text{Cakes} \\\\ \\text{Pancake} \\\\ \\text{Cupcake} \\\\ \\text{Cookies} \\end{bmatrix} = \\begin{bmatrix} 2200 \\\\ 1000 \\\\ 2200 \\\\ 1600 \\\\ 19 \\end{bmatrix} \\] which can be solved by obtaining the pseudoinverse of the matrix (represented below using the + symbol), and multiplying it by the target vector. \\[ \\begin{bmatrix} \\text{Cakes} \\\\ \\text{Pancake} \\\\ \\text{Cupcake} \\\\ \\text{Cookies} \\end{bmatrix} = \\begin{bmatrix} 450 & 200 & 150 & 280 \\\\ 0 & 300 & 125 & 0 \\\\ 700 & 50 & 150 & 250 \\\\ 500 & 50 & 50 & 200 \\\\ 2 & 1 & 0 & 2 \\end{bmatrix}^+ \\begin{bmatrix} 2200 \\\\ 1000 \\\\ 2200 \\\\ 1600 \\\\ 19 \\end{bmatrix} \\] Goods \u2190 \u2349 \u2191 Cake Pancake Cupcake Cookies Goods 450 200 150 280 0 300 125 0 700 50 150 250 500 50 50 200 6 1 0 2 \u235d (Pseudo)inverse multiplied by the target vector ( \u2339 Goods ) + . \u00d7 Available 1.99585722 2.919959252 0.992099059 2.032347529 Then, the closest solution is baking roughly 2 cakes, 3 batches of pancakes, 1 batch of cupcakes, and 2 batches of cookies.","title":"6.2 - Inner and outer products"},{"location":"course/ch6/part2/#inner-and-outer-products","text":"This part will cover Inner products Outer products Matrix inverse Recall the Rank \u2364 operator which specified what rank cells a function acts on, M \u2190 ? 5 5 \u2374 10 3 2 2 9 5 9 2 10 8 2 3 4 6 5 2 9 3 5 3 2 8 8 6 8 8 ( \u2282 \u2364 2 ) M \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 3 2 2 9 5 \u2502 \u2502 9 2 10 8 2 \u2502 \u2502 3 4 6 5 2 \u2502 \u2502 9 3 5 3 2 \u2502 \u2502 8 8 6 8 8 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ( \u2282 \u2364 1 ) M \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 3 2 2 9 5 \u2502 9 2 10 8 2 \u2502 3 4 6 5 2 \u2502 9 3 5 3 2 \u2502 8 8 6 8 8 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ( \u2282 \u2364 0 ) M 3 2 2 9 5 9 2 10 8 2 3 4 6 5 2 9 3 5 3 2 8 8 6 8 8 As can be seen above, a rank-n cell of a rank-r array obtained by specifying the first (r-n) indices of the array. M [;] 3 2 2 9 5 9 2 10 8 2 3 4 6 5 2 9 3 5 3 2 8 8 6 8 8 M [ 1 ;] 3 2 2 9 5 M [ 1 ; 1 ] 3 This specifies the cells to act on monadically; for dyadic functions, two ranks must be specified, to be interpreted as matching up cells of a certain rank from the left argument with certain cells of the right argument. v \u2190 ? 5 \u2374 5 v 3 4 4 3 2 M \u2190 5 5 \u2374 \u2373 25 M 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \u235d See pairing of 0-cells of v and 1-cells of M v ( { \u237a , '-' , \u2375 } \u2364 ( 0 1 )) M 3 - 1 2 3 4 5 4 - 6 7 8 9 10 4 - 11 12 13 14 15 3 - 16 17 18 19 20 2 - 21 22 23 24 25 \u235d Pairing of 1-cells of v and 1-cells of M v ( { \u237a , '-' , \u2375 } \u2364 ( 1 1 )) M 3 4 4 3 2 - 1 2 3 4 5 3 4 4 3 2 - 6 7 8 9 10 3 4 4 3 2 - 11 12 13 14 15 3 4 4 3 2 - 16 17 18 19 20 3 4 4 3 2 - 21 22 23 24 25 N \u2190 5 5 \u2374 + \\ \u2373 25 N 1 3 6 10 15 21 28 36 45 55 66 78 91 105 120 136 153 171 190 210 231 253 276 300 325 \u235d Pairing of 1-cells of v and 1-cells of M N ( { \u237a , '-' , \u2375 } \u2364 ( 1 1 )) M 1 3 6 10 15 - 1 2 3 4 5 21 28 36 45 55 - 6 7 8 9 10 66 78 91 105 120 - 11 12 13 14 15 136 153 171 190 210 - 16 17 18 19 20 231 253 276 300 325 - 21 22 23 24 25 One commonly used operation is matching every pair of elements from two vectors, one way to write this is using each and rank \u2364 v1 \u2190 ? 5 \u2374 5 5 5 3 4 1 v2 \u2190 \u2395A [ ? 5 \u2374 26 ] HTOKY v1 ( , \u2364 ( 0 1 )) v2 5 HTOKY 5 HTOKY 3 HTOKY 4 HTOKY 1 HTOKY v1 ( , \u00a8\u2364 ( 0 1 )) v2 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 5 H \u2502 5 T \u2502 5 O \u2502 5 K \u2502 5 Y \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 5 H \u2502 5 T \u2502 5 O \u2502 5 K \u2502 5 Y \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 3 H \u2502 3 T \u2502 3 O \u2502 3 K \u2502 3 Y \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 4 H \u2502 4 T \u2502 4 O \u2502 4 K \u2502 4 Y \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 1 H \u2502 1 T \u2502 1 O \u2502 1 K \u2502 1 Y \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 There is a specific operator for this operation called the outer product (\u2218.f), this operator is special in that it takes a right function argument. v1 ( \u2218. , ) v2 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 5 H \u2502 5 T \u2502 5 O \u2502 5 K \u2502 5 Y \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 5 H \u2502 5 T \u2502 5 O \u2502 5 K \u2502 5 Y \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 3 H \u2502 3 T \u2502 3 O \u2502 3 K \u2502 3 Y \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 4 H \u2502 4 T \u2502 4 O \u2502 4 K \u2502 4 Y \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 1 H \u2502 1 T \u2502 1 O \u2502 1 K \u2502 1 Y \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 'POP' 'HEAVY' 'ALT' 'SYNTH' \u2218. , 'ROCK' 'METAL' 'PUNK' 'WAVE' \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 POPROCK \u2502 POPMETAL \u2502 POPPUNK \u2502 POPWAVE \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 HEAVYROCK \u2502 HEAVYMETAL \u2502 HEAVYPUNK \u2502 HEAVYWAVE \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 ALTROCK \u2502 ALTMETAL \u2502 ALTPUNK \u2502 ALTWAVE \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 SYNTHROCK \u2502 SYNTHMETAL \u2502 SYNTHPUNK \u2502 SYNTHWAVE \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u235d Multiplication table ( \u2373 10 )( \u2218. \u00d7 ) \u2373 10 1 2 3 4 5 6 7 8 9 10 2 4 6 8 10 12 14 16 18 20 3 6 9 12 15 18 21 24 27 30 4 8 12 16 20 24 28 32 36 40 5 10 15 20 25 30 35 40 45 50 6 12 18 24 30 36 42 48 54 60 7 14 21 28 35 42 49 56 63 70 8 16 24 32 40 48 56 64 72 80 9 18 27 36 45 54 63 72 81 90 10 20 30 40 50 60 70 80 90 100 \u235d Composite numbers ( 1 +\u2373 9 )( \u2218. \u00d7 ) 1 +\u2373 9 4 6 8 10 12 14 16 18 20 6 9 12 15 18 21 24 27 30 8 12 16 20 24 28 32 36 40 10 15 20 25 30 35 40 45 50 12 18 24 30 36 42 48 54 60 14 21 28 35 42 49 56 63 70 16 24 32 40 48 56 64 72 80 18 27 36 45 54 63 72 81 90 20 30 40 50 60 70 80 90 100 \u235d Prime numbers up to N as numbers minus composite numbers up to N/2 ( \u2373 100 ) ~ ( 1 +\u2373 49 )( \u2218. \u00d7 ) 1 +\u2373 49 1 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 In many applications, it is useful to reduce over the diagonal of the outer product. That is, match each element of the vectors in order, then reduce over them. The inner product of vectors is an example of this, which APL generalizes using the inner product (f.g) operator. v1 \u2190 3 - \u2368 ? 5 \u2374 5 v1 0 \u00af1 0 2 \u00af2 v2 \u2190 3 - \u2368 ? 5 \u2374 5 v2 \u00af1 \u00af2 2 0 0 v1 \u2218. \u00d7 v2 0 0 0 0 0 1 2 \u00af2 0 0 0 0 0 0 0 \u00af2 \u00af4 4 0 0 2 4 \u00af4 0 0 \u235d Diagonal ( 1 1 ) \u2218 \u2349 ( v1 \u2218. \u00d7 v2 ) 0 2 0 0 0 + / ( 1 1 ) \u2218 \u2349 ( v1 \u2218. \u00d7 v2 ) 2 v1 + . \u00d7 v2 2 \u235d Absolute difference between pairs of elements v1 \u2218. ( |- ) v2 1 2 2 0 0 0 1 3 1 1 1 2 2 0 0 3 4 0 2 2 1 0 4 2 2 \u235d Maximum absolute difference between all pairs of elements of two vectors \u2308 / , v1 \u2218. ( |- ) v2 4 \u235d Maximum absolute difference between matching elements of two vectors \u2308 / ( 1 1 ) \u2218 \u2349 v1 \u2218. ( |- ) v2 2 v1 \u2308 . ( |- ) v2 2 The inner product function +.\u00d7 applied to matrices is the matrix product function M \u2190 ( \u2373 5 ) \u2218. =\u2373 5 M 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 5 ? 5 3 4 2 1 5 M \u2190 M [ 5 ? 5 ;] M 0 0 0 1 0 0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 1 0 0 0 N \u2190 + \\ 5 5 \u2374 \u2373 6 N 1 3 6 10 15 6 7 9 12 16 5 11 12 14 17 4 9 15 16 18 3 7 12 18 19 M + . \u00d7 N 4 9 15 16 18 3 7 12 18 19 5 11 12 14 17 1 3 6 10 15 6 7 9 12 16 M \u2190 0 1 0 0 0 \u2218. \u00d7 0 0 1 0 0 M 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 M + . \u00d7 N 0 0 0 0 0 5 11 12 14 17 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 Using the matrix inverse \u2339 function to verify the multiplication M \u2190 + \\ 5 5 \u2374 \u2373 7 M 1 3 6 10 15 6 13 14 16 19 4 9 15 22 23 2 5 9 14 20 7 8 10 13 17 N \u2190 + \\ 5 5 \u2374 \u2373 6 N 1 3 6 10 15 6 7 9 12 16 5 11 12 14 17 4 9 15 16 18 3 7 12 18 19 L \u2190 M + . \u00d7 N L 134 285 435 560 630 275 540 789 1010 1185 290 599 891 1124 1292 193 406 615 790 895 208 423 633 820 960 L + . \u00d7\u2339 N 1 3 6 10 15 6 13 14 16 19 4 9 15 22 23 2 5 9 14 20 7 8 10 13 17 \u2339 M + . \u00d7 L 1 3 6 10 15 6 7 9 12 16 5 11 12 14 17 4 9 15 16 18 3 7 12 18 19 The matrix inverse \u2339 also takes the pseudoinverse of a matrix, if the inverse does not exist, which can be used to get least squares solutions of systems of linear equations when a unique solution is not possible. Take the example of a bakery, wanting to make the most out of their ingredients \u235d Recipes \u235d Flour Milk Sugar Butter Eggs Cake \u2190 450 0 700 500 6 Pancake \u2190 200 300 50 50 1 Cupcake \u2190 150 125 150 50 0 Cookies \u2190 280 0 250 200 2 Available \u2190 2200 1000 2200 1600 19 Since there are more ingredients than recipes, there will not be a unique solution to this problem. The system of equations here is \\[ \\text{Cakes}\\cdot\\begin{bmatrix}450\\\\ 0\\\\ 700\\\\ 500\\\\ 2 \\end{bmatrix}+\\text{Pancake}\\cdot\\begin{bmatrix}200\\\\ 300\\\\ 50\\\\ 50\\\\ 1 \\end{bmatrix}+\\text{Cupcakes}\\cdot\\begin{bmatrix}150\\\\ 125\\\\ 150\\\\ 50\\\\ 0 \\end{bmatrix}+\\text{Cookies}\\cdot\\begin{bmatrix}280\\\\ 0\\\\ 250\\\\ 200\\\\ 2 \\end{bmatrix}=\\begin{bmatrix} 2200\\\\ 1000\\\\ 2200\\\\ 1600\\\\ 19 \\end{bmatrix} \\] which can be written in matrix form as \\[ \\begin{bmatrix} 450 & 200 & 150 & 280 \\\\ 0 & 300 & 125 & 0 \\\\ 700 & 50 & 150 & 250 \\\\ 500 & 50 & 50 & 200 \\\\ 2 & 1 & 0 & 2 \\end{bmatrix} \\begin{bmatrix} \\text{Cakes} \\\\ \\text{Pancake} \\\\ \\text{Cupcake} \\\\ \\text{Cookies} \\end{bmatrix} = \\begin{bmatrix} 2200 \\\\ 1000 \\\\ 2200 \\\\ 1600 \\\\ 19 \\end{bmatrix} \\] which can be solved by obtaining the pseudoinverse of the matrix (represented below using the + symbol), and multiplying it by the target vector. \\[ \\begin{bmatrix} \\text{Cakes} \\\\ \\text{Pancake} \\\\ \\text{Cupcake} \\\\ \\text{Cookies} \\end{bmatrix} = \\begin{bmatrix} 450 & 200 & 150 & 280 \\\\ 0 & 300 & 125 & 0 \\\\ 700 & 50 & 150 & 250 \\\\ 500 & 50 & 50 & 200 \\\\ 2 & 1 & 0 & 2 \\end{bmatrix}^+ \\begin{bmatrix} 2200 \\\\ 1000 \\\\ 2200 \\\\ 1600 \\\\ 19 \\end{bmatrix} \\] Goods \u2190 \u2349 \u2191 Cake Pancake Cupcake Cookies Goods 450 200 150 280 0 300 125 0 700 50 150 250 500 50 50 200 6 1 0 2 \u235d (Pseudo)inverse multiplied by the target vector ( \u2339 Goods ) + . \u00d7 Available 1.99585722 2.919959252 0.992099059 2.032347529 Then, the closest solution is baking roughly 2 cakes, 3 batches of pancakes, 1 batch of cupcakes, and 2 batches of cookies.","title":"Inner and outer products"},{"location":"course/ch6/part3/","text":"Encoding and decoding This part will cover Inner products Outer products Matrix inverse A common operation in the manipulation of time data is the formatting of a period of time into a standard format in terms of days, hours, minutes, and seconds. This appears, for example, when calculating the time difference between two dates. A similar problem of grouping numbers is converting between decimal and binary, a very common operation when dealing with encoding or decoding numbers numbers between human-readable data and machine data. The same calculation even appears when dealing with measurements and converting between measurement systems, such length or weight in SI or imperial units. The general problem is solved by the \u22a4 encode and \u22a5 decode functions, which convert to and from a different groupings of a number. Mathematically, this is converting between mixed-radix number systems. For the problems mentioned above, we implement solutions using encode and decode functions. The encode \u22a4 function takes in a left argument vector of groupings and a right argument to be encoded. \u235d Converting 10000 seconds \u235d 24 hours in a day, 60 minutes in an hour, 60 seconds in a minute 24 60 60 \u22a4 10000 2 46 40 \u235d Two hours, 46 minutes, 40 seconds The left argument can even be decimal numbers, for example in the case of getting the average number of years (since leap years have 366 days, as opposed to 365). \u235d Converting 1000000000 (one billion) seconds to average years, days \u235d Up to 1000 years, ~365.25 days in a year, 24 hours in a day, ... 1000 365.25 24 60 60 \u22a4 1000000000 31 251.25 1 46 40 \u235d 31 average years, 251.25 days, 1 hour, 46 minutes, 40 seconds Note that an extra grouping for the leftmost value had to be added (measuring 1000 years), otherwise it would not be returned. The decode function takes in a left argument vector of groupings and a right argument to be encoded. It can also take in one simple scalar left argument in case the groupings are equal. \u235d Convert 10 to 8-bit binary ( 8 / 2 ) \u22a4 10 0 0 0 0 1 0 1 0 2 \u22a5 1 0 1 0 1 0 42 \u235d Equivalent to ( 1 \u00d7 2 * 5 ) + ( 1 \u00d7 2 * 3 ) + ( 1 \u00d7 2 * 1 ) 42 For converting between SI units of distance and imperial units \u235d One million millimeters \u235d to millimeters, centimeters, meters, kilometers, up to 10000km 10000 1000 10 10 \u22a4 1000000 1 0 0 0 \u235d 1 kilometer \u235d Convert from millimeters to mils (thousands of an inch) 1000000 \u00d7 ( 1 \u00f7 0.0254 ) 39370078.7402 \u235d One million millimeters \u235d to mils, inches, feet, yards, miles, leagues \u235d (1\u00f70.0254) mm to mils \u235d 1000 mils to inches \u235d 12 inches to a foot \u235d 3 feet to a yard \u235d 1760 yards to a mile \u235d Measuring up to 1000 miles 1000 1760 3 12 1000 \u22a4 1000000 0 1093 1 10 78.7402 \u235d 1093 yards, 1 foot, 10 inches, 78.7402 mils \u235d Back to millimeters 0.0254 \u00d7 1000 1760 3 12 1000 \u22a5 0 1093 1 10 78.7402 1000000","title":"6.3 - Encoding and decoding"},{"location":"course/ch6/part3/#encoding-and-decoding","text":"This part will cover Inner products Outer products Matrix inverse A common operation in the manipulation of time data is the formatting of a period of time into a standard format in terms of days, hours, minutes, and seconds. This appears, for example, when calculating the time difference between two dates. A similar problem of grouping numbers is converting between decimal and binary, a very common operation when dealing with encoding or decoding numbers numbers between human-readable data and machine data. The same calculation even appears when dealing with measurements and converting between measurement systems, such length or weight in SI or imperial units. The general problem is solved by the \u22a4 encode and \u22a5 decode functions, which convert to and from a different groupings of a number. Mathematically, this is converting between mixed-radix number systems. For the problems mentioned above, we implement solutions using encode and decode functions. The encode \u22a4 function takes in a left argument vector of groupings and a right argument to be encoded. \u235d Converting 10000 seconds \u235d 24 hours in a day, 60 minutes in an hour, 60 seconds in a minute 24 60 60 \u22a4 10000 2 46 40 \u235d Two hours, 46 minutes, 40 seconds The left argument can even be decimal numbers, for example in the case of getting the average number of years (since leap years have 366 days, as opposed to 365). \u235d Converting 1000000000 (one billion) seconds to average years, days \u235d Up to 1000 years, ~365.25 days in a year, 24 hours in a day, ... 1000 365.25 24 60 60 \u22a4 1000000000 31 251.25 1 46 40 \u235d 31 average years, 251.25 days, 1 hour, 46 minutes, 40 seconds Note that an extra grouping for the leftmost value had to be added (measuring 1000 years), otherwise it would not be returned. The decode function takes in a left argument vector of groupings and a right argument to be encoded. It can also take in one simple scalar left argument in case the groupings are equal. \u235d Convert 10 to 8-bit binary ( 8 / 2 ) \u22a4 10 0 0 0 0 1 0 1 0 2 \u22a5 1 0 1 0 1 0 42 \u235d Equivalent to ( 1 \u00d7 2 * 5 ) + ( 1 \u00d7 2 * 3 ) + ( 1 \u00d7 2 * 1 ) 42 For converting between SI units of distance and imperial units \u235d One million millimeters \u235d to millimeters, centimeters, meters, kilometers, up to 10000km 10000 1000 10 10 \u22a4 1000000 1 0 0 0 \u235d 1 kilometer \u235d Convert from millimeters to mils (thousands of an inch) 1000000 \u00d7 ( 1 \u00f7 0.0254 ) 39370078.7402 \u235d One million millimeters \u235d to mils, inches, feet, yards, miles, leagues \u235d (1\u00f70.0254) mm to mils \u235d 1000 mils to inches \u235d 12 inches to a foot \u235d 3 feet to a yard \u235d 1760 yards to a mile \u235d Measuring up to 1000 miles 1000 1760 3 12 1000 \u22a4 1000000 0 1093 1 10 78.7402 \u235d 1093 yards, 1 foot, 10 inches, 78.7402 mils \u235d Back to millimeters 0.0254 \u00d7 1000 1760 3 12 1000 \u22a5 0 1093 1 10 78.7402 1000000","title":"Encoding and decoding"},{"location":"course/ch6/part4/","text":"Repeat, Masking This part will cover Repeat Masking Just as the reduce / operator destructs a list by iterating through it from the right, the power \u2363 operator can be thought of as destructing a number n by repeating n times. The power operator repeats its left function argument the amount of times specified by its right argument. 2 ( + \u2363 3 ) 5 11 ( 2 + ( 2 + ( 2 + 5 ))) 11 2 ( \u00d7 \u2363 3 ) 5 40 ( 2 \u00d7 ( 2 \u00d7 ( 2 \u00d7 5 ))) 40 0.5 ( * \u2363 3 ) 0.5 0.65404086 0.5 ( 0.5 * ( 0.5 * 0.5 )) 0.65404086 1 ( , \u2363 10 ) 2 1 1 1 1 1 1 1 1 1 1 2 1 ( { \u2375 , \u237a , \u2375 } \u2363 2 ) 2 2 1 2 1 2 1 2 ( \u2282 \u2363 5 ) 'Welcome' \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u2502 \u2502\u2502\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502 Welcome \u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2502\u2502 \u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Note that X (f\u2363g) Y is equivalent to binding the left argument as the left argument to f, (X\u2218f\u2363g) Y. 2 ( \u00d7 \u2363 3 ) 5 40 ( 2 \u2218 \u00d7 \u2363 3 ) 5 40 The right argument to the power \u2363 operator can be a function, f\u2363g, where the f is applied until g, applied to the current and previous value of f, returns 1. For example, the following code multiplies 5 by 2 until the current value is greater than 100. 2 ( \u00d7 \u2363 { \u237a > 100 } ) 5 160 2 ( \u00d7 \u2363 { \u2395 \u2190 \u237a , \u2375 \u22c4 \u237a > 100 } ) 5 10 5 20 10 40 20 80 40 160 80 160 This is equivalent to \u236c { \u237a > 100 : \u237a \u22c4 ( 2 \u00d7 \u2375 ) \u2207 \u237a } 5 160 For a more complicated example, the power operator can also be used to find fixed points of functions. \u235d Fixed point of 0.5\u2218* 0.5 ( * \u2363 = ) 0.5 0.6411857445 0.5 * 0.6411857445 0.6411857445 The code applies 0.5\u2218* until the current and previous values are equal. When the power operator is applied to a negative right argument, it acts as the repeated inverse operator for its function left argument, for certain functions. 3 ( + \u2363 2 ) 5 11 3 ( + \u2363 \u00af2 ) 5 \u00af1 2 \u22a5 1 0 1 0 1 0 42 2 ( \u22a5 \u2363 \u00af1 ) 42 1 0 1 0 1 0 Recall how we modified elements of arrays in Chapter 2; the elements were specified on the left-hand side of the assignment, and the replacement values were specified on the right. M \u2190 5 5 \u2374\u2373 25 M 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 M [ 1 ;] 1 2 3 4 5 M [ 1 ;] \u2190 0 M 0 0 0 0 0 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 It was also possible to replace specified arrays with other arrays as long as their shape matched. M [ 1 2 ; 1 2 ] 1 2 6 7 M [ 1 2 ; 1 2 ] \u2190 2 2 \u2374 0 1 1 0 M 0 1 1 4 5 1 0 0 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 The story does not end there, for any expression that selects from an array can be used on the left-hand side of the assignment. M \u2190 5 5 \u2374 \u2373 25 2 \u2191 M 1 2 3 4 5 6 7 8 9 10 ( 2 \u2191 M ) \u2190 5 M 5 5 5 5 5 5 5 5 5 5 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 M \u2190 5 5 \u2374 \u2373 25 ( 2 \u2193 M ) \u2190 5 M 1 2 3 4 5 6 7 8 9 10 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 With replicate each, the right-hand side can also be an array of the same shape as the original array to then selectively copy values depending on the left-hand side. M \u2190 5 5 \u2374\u2373 25 \u235d Random logical array B \u2190 1 - \u2368 ? 5 5 \u2374 2 B 0 1 0 1 1 0 1 0 1 1 1 1 0 0 0 0 1 0 0 0 0 1 1 1 1 ( B /\u00a8 M ) \u250c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2510 \u2502 \u2502 2 \u2502 \u2502 4 \u2502 5 \u2502 \u251c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524 \u2502 \u2502 7 \u2502 \u2502 9 \u2502 10 \u2502 \u251c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524 \u2502 11 \u2502 12 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524 \u2502 \u2502 17 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524 \u2502 \u2502 22 \u2502 23 \u2502 24 \u2502 25 \u2502 \u2514\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2518 ( B /\u00a8 M ) \u2190 5 5 \u2374 \u2395A M 1 B 3 D E 6 G 8 I J K L 13 14 15 16 Q 18 19 20 21 V W X Y For other types of replacements, the At @ operator comes in handy. For array left and right arguments, the At @ operator returns a function which replaces the elements at the indices specified by the right argument, using the values of the left argument. Note that the arrays have to match shape. Then, replacing each element masked by B using successive letters of the alphabet, M \u2190 5 5 \u2374 \u2373 25 \u2378 B \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 1 2 \u2502 1 4 \u2502 1 5 \u2502 2 2 \u2502 2 4 \u2502 2 5 \u2502 3 1 \u2502 3 2 \u2502 4 2 \u2502 5 2 \u2502 5 3 \u2502 5 4 \u2502 5 5 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 \u2374\u2378 B 13 ( \u2374\u2378 B ) \u2191 \u2395A ABCDEFGHIJKLM ((( \u2374\u2378 B ) \u2191 \u2395A ) @ ( \u2378 B )) M 1 A 3 B C 6 D 8 E F G H 13 14 15 16 I 18 19 20 21 J K L M The arguments to @ can be functions instead, where the left argument function is the function to apply to the selected elements, and the right argument is a logical function that selects the elements out of the right argument array. M \u2190 5 5 \u2374 \u2373 25 \u235d Negate elements which are multiples of 3 ( - @ { 0 = 3 | \u2375 } ) M 1 2 \u00af3 4 5 \u00af6 7 8 \u00af9 10 11 \u00af12 13 14 \u00af15 16 17 \u00af18 19 20 \u00af21 22 23 \u00af24 25 M \u2190 5 5 \u2374 \u2373 25 \u235d Reverse list of elements which are multiples of 3 ( \u2296 @ { 0 = 3 | \u2375 } ) M 1 2 24 4 5 21 7 8 18 10 11 15 13 14 12 16 17 9 19 20 6 22 23 3 25","title":"6.4 - Operators"},{"location":"course/ch6/part4/#repeat-masking","text":"This part will cover Repeat Masking Just as the reduce / operator destructs a list by iterating through it from the right, the power \u2363 operator can be thought of as destructing a number n by repeating n times. The power operator repeats its left function argument the amount of times specified by its right argument. 2 ( + \u2363 3 ) 5 11 ( 2 + ( 2 + ( 2 + 5 ))) 11 2 ( \u00d7 \u2363 3 ) 5 40 ( 2 \u00d7 ( 2 \u00d7 ( 2 \u00d7 5 ))) 40 0.5 ( * \u2363 3 ) 0.5 0.65404086 0.5 ( 0.5 * ( 0.5 * 0.5 )) 0.65404086 1 ( , \u2363 10 ) 2 1 1 1 1 1 1 1 1 1 1 2 1 ( { \u2375 , \u237a , \u2375 } \u2363 2 ) 2 2 1 2 1 2 1 2 ( \u2282 \u2363 5 ) 'Welcome' \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u2502 \u2502\u2502\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502 Welcome \u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2502\u2502 \u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Note that X (f\u2363g) Y is equivalent to binding the left argument as the left argument to f, (X\u2218f\u2363g) Y. 2 ( \u00d7 \u2363 3 ) 5 40 ( 2 \u2218 \u00d7 \u2363 3 ) 5 40 The right argument to the power \u2363 operator can be a function, f\u2363g, where the f is applied until g, applied to the current and previous value of f, returns 1. For example, the following code multiplies 5 by 2 until the current value is greater than 100. 2 ( \u00d7 \u2363 { \u237a > 100 } ) 5 160 2 ( \u00d7 \u2363 { \u2395 \u2190 \u237a , \u2375 \u22c4 \u237a > 100 } ) 5 10 5 20 10 40 20 80 40 160 80 160 This is equivalent to \u236c { \u237a > 100 : \u237a \u22c4 ( 2 \u00d7 \u2375 ) \u2207 \u237a } 5 160 For a more complicated example, the power operator can also be used to find fixed points of functions. \u235d Fixed point of 0.5\u2218* 0.5 ( * \u2363 = ) 0.5 0.6411857445 0.5 * 0.6411857445 0.6411857445 The code applies 0.5\u2218* until the current and previous values are equal. When the power operator is applied to a negative right argument, it acts as the repeated inverse operator for its function left argument, for certain functions. 3 ( + \u2363 2 ) 5 11 3 ( + \u2363 \u00af2 ) 5 \u00af1 2 \u22a5 1 0 1 0 1 0 42 2 ( \u22a5 \u2363 \u00af1 ) 42 1 0 1 0 1 0 Recall how we modified elements of arrays in Chapter 2; the elements were specified on the left-hand side of the assignment, and the replacement values were specified on the right. M \u2190 5 5 \u2374\u2373 25 M 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 M [ 1 ;] 1 2 3 4 5 M [ 1 ;] \u2190 0 M 0 0 0 0 0 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 It was also possible to replace specified arrays with other arrays as long as their shape matched. M [ 1 2 ; 1 2 ] 1 2 6 7 M [ 1 2 ; 1 2 ] \u2190 2 2 \u2374 0 1 1 0 M 0 1 1 4 5 1 0 0 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 The story does not end there, for any expression that selects from an array can be used on the left-hand side of the assignment. M \u2190 5 5 \u2374 \u2373 25 2 \u2191 M 1 2 3 4 5 6 7 8 9 10 ( 2 \u2191 M ) \u2190 5 M 5 5 5 5 5 5 5 5 5 5 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 M \u2190 5 5 \u2374 \u2373 25 ( 2 \u2193 M ) \u2190 5 M 1 2 3 4 5 6 7 8 9 10 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 With replicate each, the right-hand side can also be an array of the same shape as the original array to then selectively copy values depending on the left-hand side. M \u2190 5 5 \u2374\u2373 25 \u235d Random logical array B \u2190 1 - \u2368 ? 5 5 \u2374 2 B 0 1 0 1 1 0 1 0 1 1 1 1 0 0 0 0 1 0 0 0 0 1 1 1 1 ( B /\u00a8 M ) \u250c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2510 \u2502 \u2502 2 \u2502 \u2502 4 \u2502 5 \u2502 \u251c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524 \u2502 \u2502 7 \u2502 \u2502 9 \u2502 10 \u2502 \u251c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524 \u2502 11 \u2502 12 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524 \u2502 \u2502 17 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524 \u2502 \u2502 22 \u2502 23 \u2502 24 \u2502 25 \u2502 \u2514\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2518 ( B /\u00a8 M ) \u2190 5 5 \u2374 \u2395A M 1 B 3 D E 6 G 8 I J K L 13 14 15 16 Q 18 19 20 21 V W X Y For other types of replacements, the At @ operator comes in handy. For array left and right arguments, the At @ operator returns a function which replaces the elements at the indices specified by the right argument, using the values of the left argument. Note that the arrays have to match shape. Then, replacing each element masked by B using successive letters of the alphabet, M \u2190 5 5 \u2374 \u2373 25 \u2378 B \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 1 2 \u2502 1 4 \u2502 1 5 \u2502 2 2 \u2502 2 4 \u2502 2 5 \u2502 3 1 \u2502 3 2 \u2502 4 2 \u2502 5 2 \u2502 5 3 \u2502 5 4 \u2502 5 5 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 \u2374\u2378 B 13 ( \u2374\u2378 B ) \u2191 \u2395A ABCDEFGHIJKLM ((( \u2374\u2378 B ) \u2191 \u2395A ) @ ( \u2378 B )) M 1 A 3 B C 6 D 8 E F G H 13 14 15 16 I 18 19 20 21 J K L M The arguments to @ can be functions instead, where the left argument function is the function to apply to the selected elements, and the right argument is a logical function that selects the elements out of the right argument array. M \u2190 5 5 \u2374 \u2373 25 \u235d Negate elements which are multiples of 3 ( - @ { 0 = 3 | \u2375 } ) M 1 2 \u00af3 4 5 \u00af6 7 8 \u00af9 10 11 \u00af12 13 14 \u00af15 16 17 \u00af18 19 20 \u00af21 22 23 \u00af24 25 M \u2190 5 5 \u2374 \u2373 25 \u235d Reverse list of elements which are multiples of 3 ( \u2296 @ { 0 = 3 | \u2375 } ) M 1 2 24 4 5 21 7 8 18 10 11 15 13 14 12 16 17 9 19 20 6 22 23 3 25","title":"Repeat, Masking"},{"location":"course/ch6/part5/","text":"Choo choo This part will cover 4-trains 5-trains advanced trains","title":"6.5 - Choo choo"},{"location":"course/ch6/part5/#choo-choo","text":"This part will cover 4-trains 5-trains advanced trains","title":"Choo choo"},{"location":"course/ch6/read/","text":"Read exercises For each of the following exercises, try to figure out what the input will produce in the TryAPL terminal. Check your answers by opening the \"Output\" tab. If you think an error will occur, try to predict which error it will be and where the arrow will point to. The exercises are not checked or graded: use them to check your knowledge!","title":"6.R - Read exercises"},{"location":"course/ch6/read/#read-exercises","text":"For each of the following exercises, try to figure out what the input will produce in the TryAPL terminal. Check your answers by opening the \"Output\" tab. If you think an error will occur, try to predict which error it will be and where the arrow will point to. The exercises are not checked or graded: use them to check your knowledge!","title":"Read exercises"},{"location":"course/ch6/summary/","text":"Function index Here is a table of symbols we have used and how to type them in TryAPL. It might be useful to review this page as you are doing the read and write exercises in the next sections. New functions Symbol Name Function Key combination Old functions Symbol Name Function Key combination + Plus Addition + - Minus Subtraction - \u00d7 Times Multiplication PREFIX - \u00f7 Divide Division PREFIX = * Power Exponentiation * \u00af Negative sign Negation of a number PREFIX 2 \u235d Lamp Comment PREFIX , \u2190 Assignment operator Assigning variables < - Tab \u2395 Quad Printing PREFIX L","title":"6.S - Summary"},{"location":"course/ch6/summary/#function-index","text":"Here is a table of symbols we have used and how to type them in TryAPL. It might be useful to review this page as you are doing the read and write exercises in the next sections.","title":"Function index"},{"location":"course/ch6/summary/#new-functions","text":"Symbol Name Function Key combination","title":"New functions"},{"location":"course/ch6/summary/#old-functions","text":"Symbol Name Function Key combination + Plus Addition + - Minus Subtraction - \u00d7 Times Multiplication PREFIX - \u00f7 Divide Division PREFIX = * Power Exponentiation * \u00af Negative sign Negation of a number PREFIX 2 \u235d Lamp Comment PREFIX , \u2190 Assignment operator Assigning variables < - Tab \u2395 Quad Printing PREFIX L","title":"Old functions"},{"location":"course/ch6/write/","text":"Write exercises Submit APL code for the following exercises. Your submissions are graded using TMC. Make sure to log in to be able to submit your work! Remember, you can test out ideas and develop you solution at TryAPL before submitting it here. You can submit as many solutions as you like. If you submit a correct solution at least once, you will receive points on the TMC server and be able to see the model solution. If the write problem is red, it is unsolved. If it it green, you have solved it and received points for it on the server.","title":"6.W - Write exercises"},{"location":"course/ch6/write/#write-exercises","text":"Submit APL code for the following exercises. Your submissions are graded using TMC. Make sure to log in to be able to submit your work! Remember, you can test out ideas and develop you solution at TryAPL before submitting it here. You can submit as many solutions as you like. If you submit a correct solution at least once, you will receive points on the TMC server and be able to see the model solution. If the write problem is red, it is unsolved. If it it green, you have solved it and received points for it on the server.","title":"Write exercises"},{"location":"course/ch7/part1/","text":"Development environment This part will cover Setting up your development environment Dyalog LINK","title":"7.1 - Development environment"},{"location":"course/ch7/part1/#development-environment","text":"This part will cover Setting up your development environment Dyalog LINK","title":"Development environment"},{"location":"course/ch7/part2/","text":"Branching and looping This part will cover The branch operator If, else if, else For, while","title":"7.2 - Branching and looping"},{"location":"course/ch7/part2/#branching-and-looping","text":"This part will cover The branch operator If, else if, else For, while","title":"Branching and looping"},{"location":"course/ch7/part3/","text":"Execute and format This part will cover Execute Format","title":"7.3 - Execute and format"},{"location":"course/ch7/part3/#execute-and-format","text":"This part will cover Execute Format","title":"Execute and format"},{"location":"course/ch7/part4/","text":"Writing interactive programs This part will cover Writing interactive programs Input and output Configurability","title":"7.4 - Writing interactive programs"},{"location":"course/ch7/part4/#writing-interactive-programs","text":"This part will cover Writing interactive programs Input and output Configurability","title":"Writing interactive programs"},{"location":"course/ch7/part5/","text":"File I/O This part will cover File reading and writing Quad CSV","title":"7.5 - File I/O"},{"location":"course/ch7/part5/#file-io","text":"This part will cover File reading and writing Quad CSV","title":"File I/O"},{"location":"course/ch7/part6/","text":"External libraries This part will cover Tatin package manager Using external libraries HTTP server OpenAI etc.","title":"7.6 - External libraries"},{"location":"course/ch7/part6/#external-libraries","text":"This part will cover Tatin package manager Using external libraries HTTP server OpenAI etc.","title":"External libraries"},{"location":"course/ch7/project/","text":"Project work This section will contain the final exercises students need to submit. The exercises will be long and require students to write longer, more involved programs and submit them to the test server.","title":"7.P - Programming project"},{"location":"course/ch7/project/#project-work","text":"This section will contain the final exercises students need to submit. The exercises will be long and require students to write longer, more involved programs and submit them to the test server.","title":"Project work"},{"location":"course/ch7/summary/","text":"Function index Here is a table of symbols we have used and how to type them in TryAPL. It might be useful to review this page as you are doing the read and write exercises in the next sections. New functions Symbol Name Function Key combination Old functions Symbol Name Function Key combination + Plus Addition + - Minus Subtraction - \u00d7 Times Multiplication PREFIX - \u00f7 Divide Division PREFIX = * Power Exponentiation * \u00af Negative sign Negation of a number PREFIX 2 \u235d Lamp Comment PREFIX , \u2190 Assignment operator Assigning variables < - Tab \u2395 Quad Printing PREFIX L","title":"7.S - Summary"},{"location":"course/ch7/summary/#function-index","text":"Here is a table of symbols we have used and how to type them in TryAPL. It might be useful to review this page as you are doing the read and write exercises in the next sections.","title":"Function index"},{"location":"course/ch7/summary/#new-functions","text":"Symbol Name Function Key combination","title":"New functions"},{"location":"course/ch7/summary/#old-functions","text":"Symbol Name Function Key combination + Plus Addition + - Minus Subtraction - \u00d7 Times Multiplication PREFIX - \u00f7 Divide Division PREFIX = * Power Exponentiation * \u00af Negative sign Negation of a number PREFIX 2 \u235d Lamp Comment PREFIX , \u2190 Assignment operator Assigning variables < - Tab \u2395 Quad Printing PREFIX L","title":"Old functions"}]}