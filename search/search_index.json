{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"APL MOOC This is an online course on array programming in APL. No prior array programming knowledge is required; however, being familiar with at least one \"normal\" programming language is highly recommended. This course is a work-in-progress. When complete, it is intended to be an official 5 ECTS credit course at the University of Helsinki. Course developed and written by Sergey Ichtchenko (sergey.ichtchenko[at]helsinki.fi). Thank you to Dyalog Ltd. for collaborating on this MOOC. What are you waiting for? Get started!","title":"Home"},{"location":"#apl-mooc","text":"This is an online course on array programming in APL. No prior array programming knowledge is required; however, being familiar with at least one \"normal\" programming language is highly recommended. This course is a work-in-progress. When complete, it is intended to be an official 5 ECTS credit course at the University of Helsinki. Course developed and written by Sergey Ichtchenko (sergey.ichtchenko[at]helsinki.fi). Thank you to Dyalog Ltd. for collaborating on this MOOC. What are you waiting for? Get started!","title":"APL MOOC"},{"location":"credits/","text":"Receiving ECTS Credits After you have completed over 90% of the exercises, use the credits request form to request ECTS credits for the course. < form here >","title":"Receiving ECTS Credits"},{"location":"credits/#receiving-ects-credits","text":"After you have completed over 90% of the exercises, use the credits request form to request ECTS credits for the course. < form here >","title":"Receiving ECTS Credits"},{"location":"login/","text":"Log in Sign in with your mooc.fi credentials to be able to submit write problems to TMC and receive problem points. Log in $=>document.querySelector","title":"Log in"},{"location":"login/#log-in","text":"Sign in with your mooc.fi credentials to be able to submit write problems to TMC and receive problem points. Log in $=>document.querySelector","title":"Log in"},{"location":"course/ch0/part1/","text":"Welcome to the wonderful world of APL programming! APL is quirky, different, and not like the other programming languages. < examples to follow >","title":"0.1 - Quirky and different"},{"location":"course/ch0/part1/#welcome-to-the-wonderful-world-of-apl-programming","text":"APL is quirky, different, and not like the other programming languages. < examples to follow >","title":"Welcome to the wonderful world of APL programming!"},{"location":"course/ch0/part2/","text":"What's the big idea? < explain what APL is all about >","title":"0.2 - What's the big idea?"},{"location":"course/ch0/part2/#whats-the-big-idea","text":"< explain what APL is all about >","title":"What's the big idea?"},{"location":"course/ch0/part3/","text":"Resources < add useful resources and problem sets here >","title":"0.3 - Useful resources"},{"location":"course/ch0/part3/#resources","text":"< add useful resources and problem sets here >","title":"Resources"},{"location":"course/ch0/part4/","text":"About the course < practicalities, credits, read/write exercises, etc >","title":"0.4 - About the course"},{"location":"course/ch0/part4/#about-the-course","text":"< practicalities, credits, read/write exercises, etc >","title":"About the course"},{"location":"course/ch1/part1/","text":"Immediate execution mode Let's get started with some basic APL! For the first few chapters, we will be working with the REPL available at TryAPL . If you've ever tried running python3 ( py for W*ndows users) or the IDLE editor on your computer, this is the same thing. The REPL will wait for you to enter a command, then evaluate and print the result (if your command resulted in a result), after which it will return control back to you. This will repeat for as long as your heart desires. Try it yourself You can run APL code at tryapl.org Try running the commands in this chapter yourself. You can also use the REPL for playing around, testing out ideas, and working on the write exercises at the end of the chapter. The mode you land in by default is called Immediate Execution mode (because it immediately executes whatever you give it). Other modes include Execution mode, Function Editing mode, Character Input mode, Evaluated Input mode, and GUI Input Form mode. We will get back to these modes in future chapters. Surprisingly enough, this style of prompt is how APL code has been written for the longest time! By using the different modes outlined above, alongside APL workspaces and an APL IDE, you can write any programs you like. Thankfully, since we live in the year 2022, some APL developers have realised that it might be smart to finally get with the times and let programmers write their code in text files that are executed by an APL interpreter. This is fairly straightforward to do but requires some configuration, so we will get back to this in a later chapter. For now, the TryAPL interpreter will suffice.","title":"1.1 - Immediate execution mode"},{"location":"course/ch1/part1/#immediate-execution-mode","text":"Let's get started with some basic APL! For the first few chapters, we will be working with the REPL available at TryAPL . If you've ever tried running python3 ( py for W*ndows users) or the IDLE editor on your computer, this is the same thing. The REPL will wait for you to enter a command, then evaluate and print the result (if your command resulted in a result), after which it will return control back to you. This will repeat for as long as your heart desires. Try it yourself You can run APL code at tryapl.org Try running the commands in this chapter yourself. You can also use the REPL for playing around, testing out ideas, and working on the write exercises at the end of the chapter. The mode you land in by default is called Immediate Execution mode (because it immediately executes whatever you give it). Other modes include Execution mode, Function Editing mode, Character Input mode, Evaluated Input mode, and GUI Input Form mode. We will get back to these modes in future chapters. Surprisingly enough, this style of prompt is how APL code has been written for the longest time! By using the different modes outlined above, alongside APL workspaces and an APL IDE, you can write any programs you like. Thankfully, since we live in the year 2022, some APL developers have realised that it might be smart to finally get with the times and let programmers write their code in text files that are executed by an APL interpreter. This is fairly straightforward to do but requires some configuration, so we will get back to this in a later chapter. For now, the TryAPL interpreter will suffice.","title":"Immediate execution mode"},{"location":"course/ch1/part2/","text":"Basic operations and input (funky) Okay, so we have TryAPL open. Now what? APL is a programming language, so it would make sense if it could, at least, do some basic arithmetic. Let's try it out! How about addition? 2 + 2 4 Okay, it seems to be able to handle that. Great start! You'll notice that the programmer's input is indented, while the interpreter's output is not. You can think of it as a conversation, where you are on the right and the interpreter is on the left. Keep this in mind. It will be important for later. Time to try subtraction... 8 - 5 3 5 - 8 \u00af3 Okay, so that seems to work as well. But wait, why is the negative sign before the number 3 rendered weirdly? It looks different from the minus sign we typed. As it turns out, there are two signs for negation in APL. One of them is a minus function ( - ), that subtracts two numbers. The other is a negative sign ( \u00af ), which is slightly higher and tells APL that a number is negative. The negative sign is not a function! In the same way that a full stop ( . ) decorates a number ( 3.14159 ) to show that it has a decimal part, the negative sign ( \u00af ) decorates a number ( \u00af1337 ) to show that it's negative. Multiplication should work just as intuitively. 2 * 2 4 2 * 5 32 Wait, what? 2*2 evaluated to 4 , while 2*5 evaluated to 32 ?! This isn't multiplication, it's exponentiation! What's going on here? Warning APL was created by mathematicians in the 1960s. Mathematicians love weird and funny symbols. This was the time before Unicode, the standard way in which we encode characters today, was invented. As such, the creators were free to invent any typewriter symbols they wanted (yes, APL was written on a typewriter), and added a lot of special symbols that look really cool but aren't found on any modern keyboards. There are lots of symbols implemented in Unicode even today just because they were invented by APL'ers before any proper standards were written. You will learn how to type them shortly! In fact, the creators of APL added a special multiplication cross ( \u00d7 ) to do multiplication. Not to be confused with the letter x ! Similarly, division is done with the dedicated mathematical division symbol ( \u00f7 ). Let's try them out: 2 \u00d7 2 4 2 \u00d7 5 10 4 \u00f7 2 2 2 \u00f7 4 0.5 123 \u00d7 \u00af456 \u00af56088 Funkar som den ska.","title":"1.2 - Basic operations and input (funky)"},{"location":"course/ch1/part2/#basic-operations-and-input-funky","text":"Okay, so we have TryAPL open. Now what? APL is a programming language, so it would make sense if it could, at least, do some basic arithmetic. Let's try it out! How about addition? 2 + 2 4 Okay, it seems to be able to handle that. Great start! You'll notice that the programmer's input is indented, while the interpreter's output is not. You can think of it as a conversation, where you are on the right and the interpreter is on the left. Keep this in mind. It will be important for later. Time to try subtraction... 8 - 5 3 5 - 8 \u00af3 Okay, so that seems to work as well. But wait, why is the negative sign before the number 3 rendered weirdly? It looks different from the minus sign we typed. As it turns out, there are two signs for negation in APL. One of them is a minus function ( - ), that subtracts two numbers. The other is a negative sign ( \u00af ), which is slightly higher and tells APL that a number is negative. The negative sign is not a function! In the same way that a full stop ( . ) decorates a number ( 3.14159 ) to show that it has a decimal part, the negative sign ( \u00af ) decorates a number ( \u00af1337 ) to show that it's negative. Multiplication should work just as intuitively. 2 * 2 4 2 * 5 32 Wait, what? 2*2 evaluated to 4 , while 2*5 evaluated to 32 ?! This isn't multiplication, it's exponentiation! What's going on here? Warning APL was created by mathematicians in the 1960s. Mathematicians love weird and funny symbols. This was the time before Unicode, the standard way in which we encode characters today, was invented. As such, the creators were free to invent any typewriter symbols they wanted (yes, APL was written on a typewriter), and added a lot of special symbols that look really cool but aren't found on any modern keyboards. There are lots of symbols implemented in Unicode even today just because they were invented by APL'ers before any proper standards were written. You will learn how to type them shortly! In fact, the creators of APL added a special multiplication cross ( \u00d7 ) to do multiplication. Not to be confused with the letter x ! Similarly, division is done with the dedicated mathematical division symbol ( \u00f7 ). Let's try them out: 2 \u00d7 2 4 2 \u00d7 5 10 4 \u00f7 2 2 2 \u00f7 4 0.5 123 \u00d7 \u00af456 \u00af56088 Funkar som den ska.","title":"Basic operations and input (funky)"},{"location":"course/ch1/part3/","text":"How do I type these characters?!?!?!? Step 1: go to Amazon and buy a special APL typewriter keyboard... Just kidding (thankfully). In the modern day and age, there are way better options: Simplest: Press the buttons in the IDE At the top of the TryAPL page (and this course page) there are symbols you can click. You can also hover over them to get a quick overview of what each symbol does in APL. This is, however, quite slow when you need to write APL code fast . Find some alternatives below. Quickest: Use keyboard shortcuts On TryAPL (and this page), you can use prefixes to insert various special symbols. You can use any of the following keys as prefixes: ` \u00a7 \u00b0 \u00b2 \u00b5 \u00ba \u00bd \u00f9 On Finnish keyboards, the \u00a7 key (located to the left of 1 ) is the easiest to use. On US and UK keyboards, the ` key is preferred. Whichever key you pick we will denote as PREFIX from now on. To use prefixes, hit whatever prefix key you are using, followed by the key you want to type. For example, the multiplication symbol \u00d7 is inserted by typing PREFIX - and division \u00f7 is inserted with PREFIX = . While these might seem unintuitive at first, you'll get used to them fairly quickly. You can see the completion shortcut if you hover over the symbol in the top language bar. For example, hovering over \u00d7 shows that you can type it by using <prefix> - , just like we did above. Quickest (alternative): Tab completion Sometimes, if you have a Finnish keyboard, you will be unable to type certain prefix shortcuts that were designed for US keyboards. Thankfully, there is an alternative: tab completions. You can find the keys needed for tab completion in the same tooltip that shows you what keys to use for the prefix shortcuts. For example, hovering over the arrow symbol ( \u2190 ) shows the follwing information: < - <tab> . Just follow the instructions and hit the keys < - Tab . You'll notice that the alternative, PREFIX [ is impossible to type on a Finnish keyboard, as it doesn't have a separate [ key (and using AltGr breaks the APL shortcut). Note! Tab completion is only required for non-US users due to a bug feature in TryAPL, which is that it's designed with only US keyboards in mind. When we install the Dyalog IDE in a future chapter, this will no longer be a concern, as that supports Finnish (and various other non-US) keyboards natively.","title":"1.3 - How do I type these characters?!?!?!?"},{"location":"course/ch1/part3/#how-do-i-type-these-characters","text":"Step 1: go to Amazon and buy a special APL typewriter keyboard... Just kidding (thankfully). In the modern day and age, there are way better options:","title":"How do I type these characters?!?!?!?"},{"location":"course/ch1/part3/#simplest-press-the-buttons-in-the-ide","text":"At the top of the TryAPL page (and this course page) there are symbols you can click. You can also hover over them to get a quick overview of what each symbol does in APL. This is, however, quite slow when you need to write APL code fast . Find some alternatives below.","title":"Simplest: Press the buttons in the IDE"},{"location":"course/ch1/part3/#quickest-use-keyboard-shortcuts","text":"On TryAPL (and this page), you can use prefixes to insert various special symbols. You can use any of the following keys as prefixes: ` \u00a7 \u00b0 \u00b2 \u00b5 \u00ba \u00bd \u00f9 On Finnish keyboards, the \u00a7 key (located to the left of 1 ) is the easiest to use. On US and UK keyboards, the ` key is preferred. Whichever key you pick we will denote as PREFIX from now on. To use prefixes, hit whatever prefix key you are using, followed by the key you want to type. For example, the multiplication symbol \u00d7 is inserted by typing PREFIX - and division \u00f7 is inserted with PREFIX = . While these might seem unintuitive at first, you'll get used to them fairly quickly. You can see the completion shortcut if you hover over the symbol in the top language bar. For example, hovering over \u00d7 shows that you can type it by using <prefix> - , just like we did above.","title":"Quickest: Use keyboard shortcuts"},{"location":"course/ch1/part3/#quickest-alternative-tab-completion","text":"Sometimes, if you have a Finnish keyboard, you will be unable to type certain prefix shortcuts that were designed for US keyboards. Thankfully, there is an alternative: tab completions. You can find the keys needed for tab completion in the same tooltip that shows you what keys to use for the prefix shortcuts. For example, hovering over the arrow symbol ( \u2190 ) shows the follwing information: < - <tab> . Just follow the instructions and hit the keys < - Tab . You'll notice that the alternative, PREFIX [ is impossible to type on a Finnish keyboard, as it doesn't have a separate [ key (and using AltGr breaks the APL shortcut). Note! Tab completion is only required for non-US users due to a bug feature in TryAPL, which is that it's designed with only US keyboards in mind. When we install the Dyalog IDE in a future chapter, this will no longer be a concern, as that supports Finnish (and various other non-US) keyboards natively.","title":"Quickest (alternative): Tab completion"},{"location":"course/ch1/read/","text":"Read exercises For each of the following exercises, try to figure out what the input will produce in the tryAPL terminal. Check your answers by opening the \"Output\" tab. The exercises are not checked or graded: use them to check your knowledge! Read problem 1 Input Output 2 + 3 5 Read problem 2 Input Output 6 6 \u2374\u2373 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9","title":"1.R - Read exercises"},{"location":"course/ch1/read/#read-exercises","text":"For each of the following exercises, try to figure out what the input will produce in the tryAPL terminal. Check your answers by opening the \"Output\" tab. The exercises are not checked or graded: use them to check your knowledge! Read problem 1 Input Output 2 + 3 5 Read problem 2 Input Output 6 6 \u2374\u2373 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9","title":"Read exercises"},{"location":"course/ch1/summary/","text":"Chapter 1 summary Facts: < quick summary of things covered > Function index: < list of all functions acquired so far >","title":"1.S - Summary"},{"location":"course/ch1/summary/#chapter-1-summary","text":"Facts: < quick summary of things covered > Function index: < list of all functions acquired so far >","title":"Chapter 1 summary"},{"location":"course/ch1/write/","text":"Write exercises Submit APL code for the following exercises. These are graded using TMC. You can submit as many solutions as you like. Write problem 1: Sum of a vector Write a dfn that, given a right vector argument, returns the sum of its elements. your_function \u2190 Submit","title":"1.W - Write exercises"},{"location":"course/ch1/write/#write-exercises","text":"Submit APL code for the following exercises. These are graded using TMC. You can submit as many solutions as you like. Write problem 1: Sum of a vector Write a dfn that, given a right vector argument, returns the sum of its elements. your_function \u2190 Submit","title":"Write exercises"}]}